window.docContents[241].resolve({"/IO/#io":{"id":"/IO/#io","header":"15. IO","context":"Lean Reference","contents":"Lean is a pure functional programming language.\nWhile Lean code is strictly evaluated at run time, the order of evaluation that is used during type checking, especially while checking definitional equality, is formally unspecified and makes use of a number of heuristics that improve performance but are subject to change.\nThis means that simply adding operations that perform side effects (such as file I/O, exceptions, or mutable references) would lead to programs in which the order of effects is unspecified.\nDuring type checking, even terms with free variables are reduced; this would make side effects even more difficult to predict.\nFinally, a basic principle of Lean's logic is that functions are functions that map each element of the domain to a unique element of the range.\nIncluding side effects such as console I/O, arbitrary mutable state, or random number generation would violate this principle.\n\nPrograms that may have side effects have a type (typically IO α) that distinguishes them from pure functions.\nLogically speaking, IO describes the sequencing and data dependencies of side effects.\nMany of the basic side effects, such as reading from files, are opaque constants from the perspective of Lean's logic.\nOthers are specified by code that is logically equivalent to the run-time version.\nAt run time, the compiler produces ordinary code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Extensional-Hash-Sets--Creation":{"id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Extensional-Hash-Sets--Creation","header":"19.17.7.1. Creation","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Extensional Hash Sets","contents":"Creates a new empty hash set. The optional parameter capacity can be supplied to presize the\nset so that it can hold the given number of elements without reallocating. It is also possible to\nuse the empty collection notations ∅ and {} to create an empty hash set with the default\ncapacity.\n\n"}});