window.docContents[39].resolve({"/The-Type-System/Inductive-Types/#recursors":{"id":"/The-Type-System/Inductive-Types/#recursors","header":"4.4.3.1. Recursors","context":"Lean Reference\u0009Type System\u0009Inductive Types\u0009Logical Model","contents":"Every inductive type is equipped with a recursor.\nThe recursor is completely determined by the signatures of the type constructor and the constructors.\nRecursors have function types, but they are primitive and are not definable using fun.\n\n\n\n\n\n"},"/Error-Explanations/lean___inferDefTypeFailed/#The-Lean-Language-Reference--Error-Explanations--lean___inferDefTypeFailed":{"id":"/Error-Explanations/lean___inferDefTypeFailed/#The-Lean-Language-Reference--Error-Explanations--lean___inferDefTypeFailed","header":"lean.inferDefTypeFailed","context":"Lean Reference\u0009Error Explanations","contents":"\n\nThis error occurs when the type of a definition is not fully specified and Lean is unable to infer\nits type from the available information. If the definition has parameters, this error refers only to\nthe resulting type after the colon (the error\nlean.inferBinderTypeFailed indicates\nthat a parameter type could not be inferred).\n\nTo resolve this error, provide additional type information in the definition. This can be done\nstraightforwardly by providing an explicit resulting type after the colon in the definition\nheader. Alternatively, if an explicit resulting type is not provided, adding further type\ninformation to the definition's body—such as by specifying implicit type arguments or giving\nexplicit types to let binders—may allow Lean to infer the type of the definition. Look for type\ninference or implicit argument synthesis errors that arise alongside this one to identify\nambiguities that may be contributing to this error.\n\nNote that when an explicit resulting type is provided—even if that type contains holes—Lean will not\nuse information from the definition body to help infer the type of the definition or its parameters.\nThus, adding an explicit resulting type may also necessitate adding type annotations to parameters\nwhose types were previously inferrable. Additionally, it is always necessary to provide an explicit\ntype in a theorem declaration: the theorem syntax requires a type annotation, and the elaborator\nwill never attempt to use the theorem body to infer the proposition being proved.\n\n\n\n"}});