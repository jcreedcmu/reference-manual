window.docContents[6].resolve({"/The--grind--tactic/Linear-Integer-Arithmetic/#cutsat-qlia":{"id":"/The--grind--tactic/Linear-Integer-Arithmetic/#cutsat-qlia","header":"17.6.1. Rational Solutions","context":"Lean Reference\u0009The  grind  tactic\u0009Linear Integer Arithmetic","contents":"The solver is complete for linear integer arithmetic.\nHowever, the search can become vast with very few constraints, but cutsat was not designed to perform massive case-analysis.\nThe qlia option to grind reduces the search space by instructing cutsat to accept rational solutions.\nWith this option, cutsat is likely to be faster, but it is incomplete.\n\nRational SolutionsThe following example has a rational solution, but does not have integer solutions:example {x y : Int} :\n    27 ≤ 13 * x + 11 * y →\n    13 * x + 11 * y ≤ 30 →\n    -10 ≤ 9 * x - 7 * y →\n    9 * x - 7 * y > 4 := by\n  grind\nBecause it uses the rational solution, grind fails to refute the negation of the goal when +qlia is specified:example {x y : Int} :\n    27 ≤ 13 * x + 11 * y →\n    13 * x + 11 * y ≤ 30 →\n    -10 ≤ 9 * x - 7 * y →\n    9 * x - 7 * y > 4 := by\n  grind +qlia\n`grind` failed\ncase grind\nx y : Int\nh : -13 * x + -11 * y + 27 ≤ 0\nh_1 : 13 * x + 11 * y + -30 ≤ 0\nh_2 : -9 * x + 7 * y + -10 ≤ 0\nh_3 : 9 * x + -7 * y + -4 ≤ 0\n⊢ False\n[grind] Goal diagnostics\n  [facts] Asserted facts\n  [eqc] True propositions\n  [cutsat] Assignment satisfying linear constraints\n    [assign] x := 62/117\n    [assign] y := 2\nThe rational model constructed by cutsat is in the section Assignment satisfying linear constraints in the goal diagnostics.\n\n"},"/Basic-Types/Fixed-Precision-Integers/#fixed-ints":{"id":"/Basic-Types/Fixed-Precision-Integers/#fixed-ints","header":"19.4. Fixed-Precision Integers","context":"Lean Reference\u0009Basic Types","contents":"Lean's standard library includes the usual assortment of fixed-width integer types.\nFrom the perspective of formalization and proofs, these types are wrappers around bitvectors of the appropriate size; the wrappers ensure that the correct implementations of e.g. arithmetic operations are applied.\nIn compiled code, they are represented efficiently: the compiler has special support for them, as it does for other fundamental types.\n\n\n\n\n\n\n\n\n\n"}});