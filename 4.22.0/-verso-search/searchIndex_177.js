window.docContents[177].resolve({"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Dependent-Tree-Based-Maps--Queries":{"id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Dependent-Tree-Based-Maps--Queries","header":"19.17.9.3. Queries","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Dependent Tree-Based Maps","contents":"Returns true if there is a mapping for the given key a or a key that is equal to a according\nto the comparator cmp. There is also a Prop-valued version\nof this: a ∈ t is equivalent to t.contains a = true.Observe that this is different behavior than for lists: for lists, ∈ uses = and contains uses\n== for equality checks, while for tree maps, both use the given comparator cmp.\n\nGiven a proof that a mapping for the given key is present, retrieves the mapping for the given key.Uses the LawfulEqCmp instance to cast the retrieved value to the correct type.\n\nTries to retrieve the mapping for the given key, panicking if no such mapping is present.Uses the LawfulEqCmp instance to cast the retrieved value to the correct type.\n\nTries to retrieve the mapping for the given key, returning none if no such mapping is present.Uses the LawfulEqCmp instance to cast the retrieved value to the correct type.\n\nTries to retrieve the mapping for the given key, returning fallback if no such mapping is present.Uses the LawfulEqCmp instance to cast the retrieved value to the correct type.\n\nRetrieves the key from the mapping that matches a. Ensures that such a mapping exists by\nrequiring a proof of a ∈ m. The result is guaranteed to be pointer equal to the key in the map.\n\nChecks if a mapping for the given key exists and returns the key if it does, otherwise panics.\nIf no panic occurs the result is guaranteed to be pointer equal to the key in the map.\n\nChecks if a mapping for the given key exists and returns the key if it does, otherwise none.\nThe result in the some case is guaranteed to be pointer equal to the key in the map.\n\nChecks if a mapping for the given key exists and returns the key if it does, otherwise fallback.\nIf a mapping exists the result is guaranteed to be pointer equal to the key in the map.\n\nReturns a list of all keys present in the tree map in ascending  order.\n\nReturns an array of all keys present in the tree map in ascending  order.\n\nReturns a list of all values present in the tree map in ascending  order.\n\nReturns an array of all values present in the tree map in ascending  order.\n\n"},"/Basic-Types/Lazy-Computations/#Thunk":{"id":"/Basic-Types/Lazy-Computations/#Thunk","header":"19.19. Lazy Computations","context":"Lean Reference\u0009Basic Types","contents":"A thunk delays the computation of a value.\nIn particular, the Thunk type is used to delay the computation of a value in compiled code until it is explicitly requested—this request is called forcing the thunk.\nThe computed value is saved, so subsequent requests do not result in recomputation.\nComputing values at most once, when explicitly requested, is called lazy evaluation.\nThis caching is invisible to Lean's logic, in which Thunk is equivalent to a function from Unit.\n\n\n\n\n\n\n\n\n\n"}});