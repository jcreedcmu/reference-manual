window.docContents[153].resolve({"/Source-Files-and-Modules/#module-contents":{"id":"/Source-Files-and-Modules/#module-contents","header":"5.4. Elaborated Modules","context":"Lean Reference\u0009Source Files and Modules","contents":"When Lean elaborates a module, the result is an  environment.\nThe environment includes the constants, inductive types, theorems, type classes, instances, and everything else declared in the module, along with side tables that track data as diverse as simp sets, namespace aliases, and documentation comments.\n\nAs the module is processed by Lean, commands add content to the environment.\nA module's environment can be serialized to a .olean file, which contains both the environment and a compacted heap region with the run-time objects needed by the environment.\nThis means that an imported module can be loaded without re-executing all of its commands.\n\n"},"/Introduction/#The-Lean-Language-Reference--Introduction--How-to-Cite-This-Work":{"id":"/Introduction/#The-Lean-Language-Reference--Introduction--How-to-Cite-This-Work","header":"1.3. How to Cite This Work","context":"Lean Reference\u0009Introduction","contents":"In formal citations, please cite this work as The Lean Language Reference by The Lean Developers.\nAdditionally, please include the corresponding version of Lean in the citation, which is 4.22.0.\n\n"},"/Definitions/#definitions":{"id":"/Definitions/#definitions","header":"7. Definitions","context":"Lean Reference","contents":"The following commands in Lean are definition-like: \n\n* def* abbrev* example* theorem* opaque\n\nAll of these commands cause Lean to elaborate a term based on a signature.\nWith the exception of example, which discards the result, the resulting expression in Lean's core language is saved for future use in the environment.\nThe instance command is described in the section on instance declarations.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Dependent-Hash-Maps--Queries":{"id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Dependent-Hash-Maps--Queries","header":"19.17.3.3. Queries","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Dependent Hash Maps","contents":"Returns true if there is a mapping for the given key. There is also a Prop-valued version\nof this: a ∈ m is equivalent to m.contains a = true.Observe that this is different behavior than for lists: for lists, ∈ uses = and contains uses\n== for comparisons, while for hash maps, both use ==.\n\nRetrieves the mapping for the given key. Ensures that such a mapping exists by requiring a proof\nof a ∈ m.Uses the LawfulBEq instance to cast the retrieved value to the correct type.\n\nTries to retrieve the mapping for the given key, panicking if no such mapping is present.Uses the LawfulBEq instance to cast the retrieved value to the correct type.\n\nTries to retrieve the mapping for the given key, returning none if no such mapping is present.Uses the LawfulBEq instance to cast the retrieved value to the correct type.\n\nTries to retrieve the mapping for the given key, returning fallback if no such mapping is present.Uses the LawfulBEq instance to cast the retrieved value to the correct type.\n\nRetrieves the key from the mapping that matches a. Ensures that such a mapping exists by\nrequiring a proof of a ∈ m. The result is guaranteed to be pointer equal to the key in the map.\n\nChecks if a mapping for the given key exists and returns the key if it does, otherwise panics.\nIf no panic occurs the result is guaranteed to be pointer equal to the key in the map.\n\nChecks if a mapping for the given key exists and returns the key if it does, otherwise none.\nThe result in the some case is guaranteed to be pointer equal to the key in the map.\n\nChecks if a mapping for the given key exists and returns the key if it does, otherwise fallback.\nIf a mapping exists the result is guaranteed to be pointer equal to the key in the map.\n\nReturns a list of all keys present in the hash map in some order.\n\nReturns an array of all keys present in the hash map in some order.\n\nReturns a list of all values present in the hash map in some order.\n\nReturns an array of all values present in the hash map in some order.\n\n"}});