window.docContents[160].resolve({"/Functors___-Monads-and--do--Notation/Varieties-of-Monads/#The-Lean-Language-Reference--Functors___-Monads-and--do--Notation--Varieties-of-Monads--Combined-Error-and-State-Monads--State-Rollback":{"id":"/Functors___-Monads-and--do--Notation/Varieties-of-Monads/#The-Lean-Language-Reference--Functors___-Monads-and--do--Notation--Varieties-of-Monads--Combined-Error-and-State-Monads--State-Rollback","header":"14.5.8.1. State Rollback","context":"Lean Reference\u0009Functors, Monads and  do -Notation\u0009Varieties of Monads\u0009Combined Error and State Monads","contents":"Composing StateT and ExceptT in different orders causes exceptions to interact differently with state.\nIn one ordering, state changes are rolled back when exceptions are caught; in the other, they persist.\nThe latter option matches the semantics of most imperative programming languages, but the former is very useful for search-based problems.\nOften, some but not all state should be rolled back; this can be achieved by “sandwiching” ExceptT between two separate uses of StateT.\n\nTo avoid yet another layer of indirection via the use of StateT σ (EStateM ε σ') α, EStateM offers the EStateM.Backtrackable type class.\nThis class specifies some part of the state that can be saved and restored.\nEStateM then arranges for the saving and restoring to take place around error handling.\n\nException handlers in EStateM save some part of the state, determined by δ, and restore it if an\nexception is caught. By default, δ is Unit, and no information is saved.Extracts the information in the state that should be rolled back if an exception is handled.Updates the current state with the saved information that should be rolled back. This updated\nstate becomes the current state when an exception is handled.\n\nThere is a universally-applicable instance of Backtrackable that neither saves nor restores anything.\nBecause instance synthesis chooses the most recent instance first, the universal instance is used only if no other instance has been defined.\n\nA fallback Backtrackable instance that saves no information from a state. This allows every type\nto be used as a state in EStateM, with no rollback.Because this is the first declared instance of Backtrackable _ σ, it will be picked only if there\nare no other Backtrackable _ σ instances registered.\n\n"},"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Configuration-File-Format--Lean-Format--Targets--Custom-Facets":{"id":"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Configuration-File-Format--Lean-Format--Targets--Custom-Facets","header":"22.1.3.2.4.5. Custom Facets","context":"Lean Reference\u0009Build Tools\u0009Lake\u0009Configuration File Format\u0009Lean Format\u0009Targets","contents":"Custom facets allow additional artifacts to be incrementally built from a module, library, or package.\n\nCustom Package FacetsPackage facets allow the production of an artifact or set of artifacts from a whole package.\nThe Lake API makes it possible to query a package for its libraries; thus, one common use for a package facet is to build a given facet of each library.Define a new package facet. Has one form:package_facet «facet-name» (pkg : Package) : α :=\n  /- build term of type `FetchM (Job α)` -/\nThe pkg parameter (and its type specifier) is optional.\n\nCustom Library FacetsPackage facets allow the production of an artifact or set of artifacts from a library.\nThe Lake API makes it possible to query a library for its modules; thus, one common use for a library facet is to build a given facet of each module.Define a new library facet. Has one form:library_facet «facet-name» (lib : LeanLib) : α :=\n  /- build term of type `FetchM (Job α)` -/\nThe lib parameter (and its type specifier) is optional.\n\nCustom Module FacetsPackage facets allow the production of an artifact or set of artifacts from a module, typically by invoking a command-line tool.Define a new module facet. Has one form:module_facet «facet-name» (mod : Module) : α :=\n  /- build term of type `FetchM (Job α)` -/\nThe mod parameter (and its type specifier) is optional.\n\n"},"/Basic-Types/Characters/#The-Lean-Language-Reference--Basic-Types--Characters--API-Reference--Case-Conversion":{"id":"/Basic-Types/Characters/#The-Lean-Language-Reference--Basic-Types--Characters--API-Reference--Case-Conversion","header":"19.7.4.3. Case Conversion","context":"Lean Reference\u0009Basic Types\u0009Characters\u0009API Reference","contents":"Converts a lowercase ASCII letter to the corresponding uppercase letter. Letters outside the ASCII\nalphabet are returned unchanged.The lowercase ASCII letters are the following: abcdefghijklmnopqrstuvwxyz.\n\nConverts an uppercase ASCII letter to the corresponding lowercase letter. Letters outside the ASCII\nalphabet are returned unchanged.The uppercase ASCII letters are the following: ABCDEFGHIJKLMNOPQRSTUVWXYZ.\n\n"}});