window.docContents[99].resolve({"/IO/Tasks-and-Threads/#The-Lean-Language-Reference--IO--Tasks-and-Threads--Cancellation-and-Status":{"id":"/IO/Tasks-and-Threads/#The-Lean-Language-Reference--IO--Tasks-and-Threads--Cancellation-and-Status","header":"15.11.4. Cancellation and Status","context":"Lean Reference\u0009IO\u0009Tasks and Threads","contents":"Impure tasks should use IO.checkCanceled to react to cancellation, which occurs either as a result of IO.cancel or when the last reference to the task is dropped.\nPure tasks are terminated automatically upon cancellation.\n\nRequests cooperative cancellation of the task. The task must explicitly call IO.checkCanceled to\nreact to the cancellation.\n\nChecks whether the current task's cancellation flag has been set by calling IO.cancel or by\ndropping the last reference to the task.\n\nChecks whether the task has finished execution, at which point calling Task.get will return\nimmediately.\n\nReturns the current state of a task in the Lean runtime's task manager.For tasks derived from Promises, the states waiting and running should be considered\nequivalent.\n\nThe current state of a Task in the Lean runtime's task manager.The Task is waiting to be run.It can be waiting for dependencies to complete or sitting in the task manager queue waiting for a\nthread to run on.The Task is actively running on a thread or, in the case of a Promise, waiting for a call to\nIO.Promise.resolve.The Task has finished running and its result is available. Calling Task.get or IO.wait on\nthe task will not block.\n\nReturns the thread ID of the calling thread.\n\n"}});