window.docContents[166].resolve({"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Sets--Queries--Ordering-Based-Queries":{"id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Sets--Queries--Ordering-Based-Queries","header":"19.17.10.3.1. Ordering-Based Queries","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Tree-Based Sets\u0009Queries","contents":"Returns the n-th smallest element.\n\nReturns the n-th smallest element, or panics if n is at least t.size.\n\nReturns the n-th smallest element, or none if n is at least t.size.\n\nReturns the n-th smallest element, or fallback if n is at least t.size.\n\nGiven a proof that such an element exists, retrieves the smallest element that is\ngreater than or equal to the given element.\n\nTries to retrieve the smallest element that is greater than or equal to the\ngiven element, panicking if no such element exists.\n\nTries to retrieve the smallest element that is greater than or equal to the\ngiven element, returning none if no such element exists.\n\nTries to retrieve the smallest element that is greater than or equal to the\ngiven element, returning fallback if no such element exists.\n\nGiven a proof that such an element exists, retrieves the smallest element that is\ngreater than the given element.\n\nTries to retrieve the smallest element that is greater than the given element,\npanicking if no such element exists.\n\nTries to retrieve the smallest element that is greater than the given element,\nreturning none if no such element exists.\n\nTries to retrieve the smallest element that is greater than the given element,\nreturning fallback if no such element exists.\n\nGiven a proof that such an element exists, retrieves the largest element that is\nless than or equal to the given element.\n\nTries to retrieve the largest element that is less than or equal to the\ngiven element, panicking if no such element exists.\n\nTries to retrieve the largest element that is less than or equal to the\ngiven element, returning none if no such element exists.\n\nTries to retrieve the largest element that is less than or equal to the\ngiven element, returning fallback if no such element exists.\n\nGiven a proof that such an element exists, retrieves the smallest element that is\nless than the given element.\n\nTries to retrieve the smallest element that is less than the given element,\npanicking if no such element exists.\n\nTries to retrieve the smallest element that is less than the given element,\nreturning none if no such element exists.\n\nTries to retrieve the smallest element that is less than the given element,\nreturning fallback if no such element exists.\n\nGiven a proof that the tree set is not empty, retrieves the smallest element.\n\nTries to retrieve the smallest element of the tree set, panicking if the set is empty.\n\nTries to retrieve the smallest element of the tree set, returning none if the set is empty.\n\nTries to retrieve the smallest element of the tree set, returning fallback if the tree set is empty.\n\nGiven a proof that the tree set is not empty, retrieves the largest element.\n\nTries to retrieve the largest element of the tree set, panicking if the set is empty.\n\nTries to retrieve the largest element of the tree set, returning none if the set is empty.\n\nTries to retrieve the largest element of the tree set, returning fallback if the tree set is empty.\n\n"},"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Hash-Maps--Iteration":{"id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Hash-Maps--Iteration","header":"19.17.2.5. Iteration","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Hash Maps","contents":"Updates the values of the hash map by applying the given function to all mappings.\n\nFolds the given function over the mappings in the hash map in some order.\n\nMonadically computes a value by folding the given function over the mappings in the hash\nmap in some order.\n\nSupport for the for loop construct in do blocks.\n\nCarries out a monadic action on each mapping in the hash map in some order.\n\n"},"/Basic-Types/Linked-Lists/#The-Lean-Language-Reference--Basic-Types--Linked-Lists--API-Reference--Iteration":{"id":"/Basic-Types/Linked-Lists/#The-Lean-Language-Reference--Basic-Types--Linked-Lists--API-Reference--Iteration","header":"19.15.3.10. Iteration","context":"Lean Reference\u0009Basic Types\u0009Linked Lists\u0009API Reference","contents":"Applies the applicative action f to every element in the list, in order.If m is also a Monad, then using List.forM can be more efficient.List.mapA is a variant that collects results.\n\nApplies the monadic action f to every element in the list, in order.List.mapM is a variant that collects results. List.forA is a variant that works on any\nApplicative.\n\nMaps f over the list and collects the results with <|>. The result for the end of the list is\nfailure.Examples:* [[], [1, 2], [], [2]].firstM List.head? = some 1* [[], [], []].firstM List.head? = none* [].firstM List.head? = none\n\nComputes the sum of the elements of a list.Examples:* [a, b, c].sum = a + (b + (c + 0))* [1, 2, 5].sum = 8\n\n\n\n"}});