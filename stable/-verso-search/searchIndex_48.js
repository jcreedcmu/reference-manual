window.docContents[48].resolve({"/releases/v4.19.0/#release-v4___19___0":{"id":"/releases/v4.19.0/#release-v4___19___0","header":"Lean 4.19.0 (2025-05-01)","context":"Lean Reference\u0009Release Notes","contents":"For this release, 420 changes landed. In addition to the 164 feature additions and 78 fixes listed below there were 13 refactoring changes, 29 documentation improvements, 31 performance improvements, 9 improvements to the test suite and 94 other changes.HighlightsLean v4.19.0 introduces a number of features, bug fixes, performance gains, library developments,\nalong with quality-of-life improvements across documentation, the language server, and Lake.New Decorations in VS CodeVisual feedback in VS Code has been improved, with the extension now featuring:* Gutter decorations for errors and warnings. These make the full range of errors/warnings clear,\nwhich is especially useful when the corresponding squigglies are small.* End-of-line markers for 'unsolved goals'. These are displayed at the line where\n'unsolved goals' error ends and indicate where the proof needs to be continued.* 'Goals accomplished!' message. When a theorem or a Prop-typed example contains no errors or sorrys anymore,\ntwo blue checkmarks appear next to the start of the declaration as a gutter decoration.\nAdditionally, a 'Goals accomplished!' message appears under 'Messages' in the InfoView.Gutter decorations for errors and warnings are available for all Lean 4 versions.\nDecorations for 'unsolved goals' and 'goals accomplished' rely on server-side support,\nwhich is added in this version via #7366.All of these features can be disabled, and 'Goals accomplished!' icon can be configured in VS Code extension settings.\nSee leanprover/vscode-lean4#585 for the details.Parallel Elaboration* #7084 enables the elaboration of theorem bodies, i.e. proofs, to\nhappen in parallel to each other as well as to other elaboration tasks.Language Features* #5182 makes functions defined by well-founded recursion use an\nopaque well-founded proof by default. This reliably prevents kernel\nreduction of such definitions and proofs, which tends to be\nprohibitively slow (fixes #2171), and which regularly causes\nhard-to-debug kernel type-checking failures. This change renders\nunseal ineffective for such definitions. To avoid the opaque proof,\nannotate the function definition with @[semireducible].* #7166 extends the notion of “fixed parameter” of a recursive function\nalso to parameters that come after varying function. The main benefit is\nthat we get nicer induction principles.Before, the definitiondef app (as : List α) (bs : List α) : List α :=\n  match as with\n  | [] => bs\n  | a::as => a :: app as bs\nproducedapp.induct.{u_1} {α : Type u_1} (motive : List α → List α → Prop) (case1 : ∀ (bs : List α), motive [] bs)\n  (case2 : ∀ (bs : List α) (a : α) (as : List α), motive as bs → motive (a :: as) bs) (as bs : List α) : motive as bs\nand now you getapp.induct.{u_1} {α : Type u_1} (motive : List α → Prop) (case1 : motive [])\n  (case2 : ∀ (a : α) (as : List α), motive as → motive (a :: as)) (as : List α) : motive as\nbecause bs is fixed throughout the recursion (and can completely be dropped from the principle).This is a breaking change when such an induction principle is used explicitly. Using fun_induction makes proof tactics robust against this change.See the PR description for the rules for when a parameter is considered fixed.Note that in a definition likedef app : List α → List α → List α\n  | [], bs => bs\n  | a::as, bs => a :: app as bs\nthe bs is not considered fixed, as it goes through the matcher machinery.* #7431 changes the syntax of location modifiers for tactics like simp\nand rw (e.g., simp at h ⊢) to allow the turnstile ⊢ to appear\nanywhere in the sequence of locations.* #7457 ensures info tree users such as linters and request handlers\nhave access to info subtrees created by async elab task by introducing\nAPI to leave holes filled by such tasks.Breaking change: other metaprogramming users of Command.State.infoState may need to call InfoState.substituteLazy on it manually to fill all holes.Updates to structures and classes* #7302 changes how fields are elaborated in the structure/class\ncommands and also makes default values respect the structure resolution\norder when there is diamond inheritance. Before, the details of\nsubobjects were exposed during elaboration, and in the local context any\nfields that came from a subobject were defined to be projections of the\nsubobject field. Now, every field is represented as a local variable.\nAll parents (not just subobject parents) are now represented in the\nlocal context, and they are now local variables defined to be parent\nconstructors applied to field variables (inverting the previous\nrelationship). See the PR description for further details.* #7640 implements the main logic for inheriting and overriding\nautoParam fields in the structure/class commands, pending being\nenabled in the structure instance notation elaborator. Adds term info to\noverridden fields, so they now can be hovered over, and \"go to\ndefinition\" goes to the structure the field is originally defined in.* #7717 changes how {...}/where notation (\"structure instance\nnotation\") elaborates. The notation now tries to simulate a flat\nrepresentation as much as possible, without exposing the details of\nsubobjects.\nThis is a breaking change, see the PR description for further details and mitigation strategies.* #7742 adds a feature to structure/class where binders without\ntypes on a field definition are interpreted as overriding the type's\nparameters binder kinds in that field's projection function. See the PR description for further details.Library Updates* Developments in the async machinery;* Standardization of the integer division API;* Conversions between finite types;* API expansion of BitVec and tree maps;* Proofs of Bitwuzla rewrite rules;* Improvements to List/Array/Vector, as well as HashMap and Int/Nat.See the Library section below for details.Other Highlights* Documentation has been significantly expanded. See the Documentation section below for details.* #7185 refactors Lake's build internals to enable the introduction of\ntargets and facets beyond packages, modules, and libraries. Facets,\nbuild keys, build info, and CLI commands have been generalized to\narbitrary target types.Language* #5182 makes functions defined by well-founded recursion use an\nopaque well-founded proof by default; see highlights section for details.* #5998 lets omega always abstract its own proofs into an auxiliary\ndefinition. The size of the olean of Vector.Extract goes down from 20MB\nto 5MB with this, overall stdlib olean size and build instruction count\ngo down 5%.* #6325 ensures that environments can be loaded, repeatedly, without\nexecuting arbitrary code* #7075 ensures that names suggested by tactics like simp? are not\nshadowed by auxiliary declarations in the local context and that names\nof let rec and where declarations are correctly resolved in tactic\nblocks.* #7166 extends the notion of “fixed parameter” of a recursive function\nalso to parameters that come after varying function; see highlights section for details.* #7256 introduces the assert! variant debug_assert! that is\nactivated when compiled with buildType debug.* #7304 fixes an issue where nested let rec declarations within\nmatch expressions or tactic blocks failed to compile if they were\nnested within, and recursively called, a let rec that referenced a\nvariable bound by a containing declaration.* #7324 changes the internal construction of well-founded recursion, to\nnot change the type of fix’s induction hypothesis in non-defeq ways.* #7333 allows aux decls (like generated by match) to be generated by\ndecreasing_by tactics.* #7335 modifies elabTerminationByHints in a way that the type of the\nrecursive function used for elaboration of the termination measure is\nstriped of from optional parameters. It prevents introducing\ndependencies between the default values for arguments, that can cause\nthe termination checker to fail.* #7353 changes abstractNestedProofs so that it also visits the\nsubterms in the head of an application.* #7362 allows simp dischargers to add aux decls to the environment.\nThis enables tactics like native_decide to be used here, and unblocks\nimprovements to omega in #5998.* #7387 uses -implicitDefEqProofs in bv_omega to ensure it is not\naffected by the change in #7386.* #7397 ensures that Poly.mul p 0 always returns Poly.num 0.* #7409 allows the use of dsimp during preprocessing of well-founded\ndefinitions. This fixes regressions when using if-then-else without\ngiving a name to the condition, but where the condition is needed for\nthe termination proof, in cases where that subexpression is reachable\nonly by dsimp, but not by simp (e.g. inside a dependent let)* #7431 changes the syntax of location modifiers for tactics like simp\nand rw (e.g., simp at h ⊢) to allow the turnstile ⊢ to appear\nanywhere in the sequence of locations.* #7509 disables the implicitDefEqProofs simp option in the\npreprocessor of bv_decide in order to account for regressions caused\nby #7387.* #7511 fixes two bugs in simp +arith that were preventing specific\nsubterms from being normalized.* #7515 fixes another bug in simp +arith. This bug was affecting\ngrind. See new test for an example.* #7551 changes isNatCmp to ignore optional arguments annotations,\nwhen checking for <-like comparison between elements of Nat. That\npreviously caused guessLex to fail when checking termination of a\nfunction, whose signature involved an optional argument of the type\nNat.* #7560 ensures that we use the same ordering to normalize linear Int\nterms and relations. This change affects simp +arith and grind\nnormalizer.* #7622 fixes fun_induction when used on structurally recursive\nfunctions where there are targets occurring before fixed parameters.* #7630 fixes a performance issue in the whnfCore procedure.* #7728 fixes an issue in abstractNestedProofs.\nWe should abstract proofs occurring in the inferred proposition too.Structures* #7302 changes how fields are elaborated in the structure/class\ncommands and also makes default values respect the structure resolution\norder when there is diamond inheritance. Before, the details of\nsubobjects were exposed during elaboration, and in the local context any\nfields that came from a subobject were defined to be projections of the\nsubobject field. Now, every field is represented as a local variable.\nAll parents (not just subobject parents) are now represented in the\nlocal context, and they are now local variables defined to be parent\nconstructors applied to field variables (inverting the previous\nrelationship). Other notes:* The entire collection of parents is processed, and all parent\nprojection names are checked for consistency. Every parent appears in\nthe local context now.* For classes, every parent now contributes an instance, not just the\nparents represented as subobjects.* Default values are now processed according to the parent resolution\norder. Default value definition/override auxiliary definitions are\nstored at StructName.fieldName._default, and inherited values are\nstored at StructName.fieldName._inherited_default. Metaprograms no\nlonger need to look at parents when doing calculations on default\nvalues.* Default value omission for structure instance notation pretty printing\nhas been updated in consideration of this.* Now the elaborator generates a _flat_ctor constructor that will be\nused for structure instance elaboration. All types in this constructor\nare put in \"field normal form\" (projections of parent constructors are\nreduced, and parent constructors are eta reduced), and all fields with\nautoParams are annotated as such. This is not meant for users, but it\nmay be useful for metaprogramming.* While elaborating fields, any metavariables whose type is one of the\nparents is assigned to that parent. The hypothesis is that, for the\npurpose of elaborating structure fields, parents are fixed: there is\nonly one instance of any given parent under consideration. See the\nMagma test for an example of this being necessary. The hypothesis may\nnot be true when there are recursive structures, since different values\nof the structure might not agree on parent fields.* #7314 changes elaboration of structure parents so that each must be\nfully elaborated before the next one is processed.* #7640 implements the main logic for inheriting and overriding\nautoParam fields in the structure/class commands, pending being\nenabled in the structure instance notation elaborator. Adds term info to\noverridden fields, so they now can be hovered over, and \"go to\ndefinition\" goes to the structure the field is originally defined in.* #7652 gives #print for structures the ability to show the default\nvalues and auto-param tactics for fields.* #7717 changes how {...}/where notation (\"structure instance\nnotation\") elaborates. The notation now tries to simulate a flat\nrepresentation as much as possible, without exposing the details of\nsubobjects. Features:* When fields are elaborated, their expected types now have a couple\nreductions applied. For all projections and constructors associated to\nthe structure and its parents, projections of constructors are reduced\nand constructors of projections are eta reduced, and also implementation\ndetail local variables are zeta reduced in propositions (so tactic\nproofs should never see them anymore). Furthermore, field values are\nbeta reduced automatically in successive field types. The example in\nmathlib4#12129\nnow shows a goal of 0 = 0 rather than { toFun := fun x => x }.toFun 0 = 0.* All parents can now be used as field names, not just the subobject\nparents. These are like additional sources but with three constraints:\nevery field of the value must be used, the fields must not overlap with\nother provided fields, and every field of the specified parent must be\nprovided for. Similar to sources, the values are hoisted to lets if\nthey are not already variables, to avoid multiple evaluation. They are\nimplementation detail local variables, so they get unfolded for\nsuccessive fields.* All class parents are now used to fill in missing fields, not just the\nsubobject parents. Closes #6046. Rules: (1) only those parents whose\nfields are a subset of the remaining fields are considered, (2) parents\nare considered only before any fields are elaborated, and (3) only those\nparents whose type can be computed are considered (this can happen if a\nparent depends on another parent, which is possible since #7302).* Default values and autoparams now respect the resolution order\ncompletely: each field has at most one default value definition that can\nprovide for it. The algorithm that tries to unstick default values by\nwalking up the subobject hierarchy has been removed. If there are\napplications of default value priorities, we might consider it in a\nfuture release.* The resulting constructors are now fully packed. This is implemented\nby doing structure eta reduction of the elaborated expressions.* \"Magic field definitions\" (as reported on\nZulip)\nhave been eliminated. This was where fields were being solved for by\nunification, tricking the default value system into thinking they had\nactually been provided. Now the default value system keeps track of\nwhich fields it has actually solved for, and which fields the user did\nnot provide. Explicit structure fields (the default kind) without any\nexplicit value definition will result in an error. If it was solved for\nby unification, the error message will include the inferred value, like\n\"field 'f' must be explicitly provided, its synthesized value is v\"* When the notation is used in patterns, it now no longer inserts fields\nusing class parents, and it no longer applies autoparams or default\nvalues. The motivation is that one expects patterns to match only the\ngiven fields. This is still imperfect, since fields might be solved for\nindirectly.* Elaboration now attempts error recovery. Extraneous fields log errors\nand are ignored, missing fields are filled with sorry.* #7742 adds a feature to structure/class where binders without\ntypes on a field definition are interpreted as overriding the type's\nparameters binder kinds in that field's projection function. The rules\nare (1) only a prefix of the binders are interpreted this way, (2)\nmulti-identifier binders are allowed but they must all be for\nparameters, (3) only parameters that appear in the declaration itself\n(not from variables) can be overridden and (4) the updates will be\napplied after parameter binder kind inference is done. Binder updates\nare not allowed in default value redefinitions. Example application: In\nthe following, (R p) causes the R and p parameters to be explicit,\nwhere normally they would be implicit.class CharP (R : Type u) [AddMonoidWithOne R] (p : Nat) : Prop where\n  cast_eq_zero_iff (R p) : ∀ x : Nat, (x : R) = 0 ↔ p ∣ x\n\n#guard_msgs in #check CharP.cast_eq_zero_iff\n/-\ninfo: CharP.cast_eq_zero_iff.{u} (R : Type u) {inst✝ : AddMonoidWithOne R} (p : Nat) [self : CharP R p] (x : Nat) :\n  ↑x = 0 ↔ p ∣ x\n-/\n* #7746 adds declaration ranges to structure fields that were copied\nfrom parents that aren't represented as subobjects, supporting \"go to\ndefinition\". The declaration range is the parent in the extends\nclause.Parallel Elaboration* #7084 enables the elaboration of theorem bodies, i.e. proofs, to\nhappen in parallel to each other as well as to other elaboration tasks.* #7247 makes generation of match equations and splitters compatible\nwith parallelism.* #7261 ensures all equation, unfold, induction, and partial fixpoint\ntheorem generators in core are compatible with parallelism.* #7348 ensures all equation and unfold theorem generators in core are\ncompatible with parallelism.* #7457 ensures info tree users such as linters and request handlers\nhave access to info subtrees created by async elab task by introducing\nAPI to leave holes filled by such tasks.* #8101 fixes a parallelism regression where linters that e.g. check for\nerrors in the command would no longer find such messages.bv_decide* #7298 adds rewrites to bv_decide's preprocessing that concern\ncombinations of if-then-else and operation such as multiplication or\nnegation.* #7309 fixes a bug where bv_decide's new structure support would\nsometimes not case split on all available structure fvars as their type\nwas an mvar.* #7329 adds support to bv_decide for simple pattern matching on enum\ninductives. By simple we mean non dependent match statements with all\narms written out.* #7347 upgrades the CaDiCal we ship and use for bv_decide to version\n2.1.2. Additionally it enables binary LRAT proofs on windows by default\nas https://github.com/arminbiere/cadical/issues/112 has been fixed.* #7381 refactors the AIG datastructures that underly bv_decide in order\nto allow a better tracking of negations in the circuit. This refactor\nhas two effects, for one adding full constant folding to the AIG\nframework and secondly enabling us to add further simplifications from\nthe Brummayer Biere paper in the future which was previously\narchitecturally impossible.* #7390 makes bv_decide's preprocessing handle casts, as we are in the\nconstant BitVec fragment we should be able to always remove them using\nBitVec.cast_eq.* #7407 adds rules for -1#w * a = -a and a * -1#w = -a to\nbv_normalize as seen in Bitwuzla's BV_MUL_SPECIAL_CONST.* #7417 adds support for enum inductive matches with default branches to\nbv_decide.* #7429 adds the BV_EXTRACT_FULL preprocessing rule from Bitwuzla to\nbv_decide.* #7436 adds simprocs that turn left and right shifts by constants into\nextracts to bv_decide.* #7438 adds the EQUAL_CONST_BV_ADD and BV_AND_CONST rules to\nbv_decide's preprocessor.* #7441 adds the BV_CONCAT_CONST, BV_CONCAT_EXTRACT and ELIM_ZERO_EXTEND\nrule from Bitwuzla to bv_decide.* #7477 ensures that bv_decide doesn't accidentally operate on terms\nunderneath binders. As there is currently no binder construct that is in\nthe supported fragment of bv_decide this changes nothing about the proof\npower.* #7480 adds the necessary rewrites for the Bitwuzla rules\nBV_ULT_SPECIAL_CONST, BV_SIGN_EXTEND_ELIM, TODO.* #7486 adds the BitVec.add_neg_mul rule introduced in #7481 to\nbv_decide's preprocessor.* #7491 achieves a speed up in bv_decide's LRAT checker by improving its\ninput validation.* #7521 adds the equivalent of Array.emptyWithCapacity to the AIG\nframework and applies it to bv_decide. This is particularly useful as\nwe are only working with capacities that are always known at run time so\nwe should never have to reallocate a RefVec.* #7527 adds the BV_EXTRACT_CONCAT_LHS_RHS, NORM_BV_ADD_MUL and\nNORM_BV_SHL_NEG rewrite from Bitwuzla as well as a reduction from\ngetLsbD to extractLsb' to bv_decide.* #7615 adds the ADD part of bitwuzlas BV_EXTRACT_ADD_MUL rule to\nbv_decide's preprocessor.* #7617 adds the known bits optimization from the multiplication circuit\nto the add one, allowing us to discover potentially even more symmetries\nbefore going to the SAT solver.* #7636 makes sure that the expression level cache in bv_decide is\nmaintained across the entire bitblaster instead of just locally per\nBitVec expression.* #7644 adds a cache to the reflection procedure of bv_decide.* #7649 changes the AIG representation of constants from const (b : Bool) to a single constructor false. Since #7381 Ref contains an\ninvert flag meaning the constant true can be represented as a Ref\nto false with invert set, so no expressivity is lost.* #7655 adds the preprocessing rule for extraction over multiplication\nto bv_decide.* #7663 uses computed fields to store the hash code and pointer equality\nto increase performance of comparison and hashmap lookups on the core\ndata structure used by the bitblaster.* #7670 improves the caching computation of the atoms assignment in\nbv_decide's reflection procedure.* #7698 adds more sharing and caching procedures to bv_decide's\nreflection step.* #7720 compresses the AIG representation by storing the inverter bit in\nthe lowest bit of the gate descriptor instead of as a separate Bool.* #7727 avoids some unnecessary allocations in the CNF to dimacs\nconversion* #7733 ensures that in the AIG the constant circuit node is always\nstored at the first spot. This allows us to skip performing a cache\nlookup when we require a constant node.Grind* #7355 fixes a bug in the markNestedProofs preprocessor used in the\ngrind tactic.* #7392 fixes an issue in the grind tactic when case splitting on\nif-then-else expressions.* #7510 ensures that grind can be used as a more powerful\ncontradiction tactic, sparing the user from having to type exfalso; grind or intros; exfalso; grind.* #7512 adds missing normalization rules for Nat div and mod to the\ngrind tactic.* #7514 adds more missing normalization rules for div and mod to\ngrind.* #7532 fixes the procedure for putting new facts into the grind\n\"to-do\" list. It ensures the new facts are preprocessed. also\nremoves some of the clutter in the Nat.sub support.* #7540 adds [grind cases eager] attribute to Subtype. See new test.* #7553 removes a bad normalization rule in grind, and adds a missing\ndsimproc.* #7641 implements basic model-based theory combination in grind.\ngrind can now solve examples such asexample (f : Int → Int) (x : Int)\n    : 0 ≤ x → x ≠ 0 → x ≤ 1 → f x = 2 → f 1 = 2 := by\n  grind\n* #7712 ensures grind always abstract its own proofs into an auxiliary\ndefinition/theorem. This is similar to #5998 but for grind* #7714 fixes an assertion violation in the grind model-based theory\ncombination module.* #7723 adds the configuration options zeta and zetaDelta in\ngrind. Both are set to true by default.* #7724 adds dite_eq_ite normalization rule to grind. This rule is\nimportant to adjust mismatches between a definition and its function\ninduction principle.* #7726 fixes the markNestedProofs procedure used in grind. It was\nmissing the case where the type of a nested proof may contain other\nnested proofs.* #7760 ensures grind is using the default transparency setting when\ncomputing auxiliary congruence lemmas.* #7765 improves how grind normalizes dependent implications during\nintroduction.\nPreviously, grind would introduce a hypothesis h : p for a goal of\nthe form .. ⊢ (h : p) → q h, and then normalize and assert a\nnon-dependent copy of p. As a result, the local context would contain\nboth h : p and a separate h' : p', where p' is the normal form of\np. Moreover, q would still depend on the original h.* #7776 improves the equality proof discharger used by the E-matching\nprocedure in grind.* #7777 fixes the introduction procedure used in grind. It was not\nregistering local instances that are also propositions. See new test.* #7778 adds missing propagation rules for LawfulBEq A to grind.\nThey are needed in a context where the instance DecidableEq A is not\navailable. See new test.* #7781 adds a new propagation rule for Bool disequalities to grind.\nIt now propagates x = true (x = false) from the disequality x = false (x = true). It ensures we don't have to perform case analysis\non x to learn this fact. See tests.CutSat* #7312 implements proof term generation for cooper_dvd_left and its\nvariants in the cutsat procedure for linear integer arithmetic.* #7315 implements the Cooper conflict resolution in cutsat. We still\nneed to implement the backtracking and disequality case.* #7339 implements cooper conflict resolution in the cutsat procedure.\nIt also fixes several bugs in the proof term construction. We still need\nto add more tests, but we can already solve the following example that\nomega fails to solve:example (x y : Int) :\n    27 ≤ 11*x + 13*y →\n    11*x + 13*y ≤ 45 →\n    -10 ≤ 7*x - 9*y →\n    7*x - 9*y ≤ 4 → False := by\n  grind\n* #7351 ensures cutsat does not have to perform case analysis in the\nunivariate polynomial case. That it, it can close a goal whenever there\nis no solution for a divisibility constraint in an interval. Example of\ntheorem that is now proved in a single step by cutsat:example (x : Int) : 100 ≤ x → x ≤ 10000 → 20000 ∣ 3*x → False := by\n  grind\n* #7357 adds support for / and % to the cutsat procedure.* #7369 uses let-declarations for each polynomial occurring in a proof\nterm generated by the cutsat procedure.* #7370 simplifies the proof term due to the Cooper's conflict\nresolution in cutsat.* #7373 implements the last missing case for the cutsat procedure and\nfixes a bug. During model construction, we may encounter a bounded\ninterval containing integer solutions that satisfy the divisibility\nconstraint but fail to satisfy known disequalities.* #7394 adds infrastructure necessary for supporting Nat in the cutsat\nprocedure. It also makes the grind more robust.* #7396 fixes a bug in the cutsat model construction. It was searching\nfor a solution in the wrong direction.* #7401 improves the cutsat model search procedure by tightening\ninequalities using divisibility constraints.* #7494 implements support for Nat inequalities in the cutsat\nprocedure.* #7495 implements support for Nat divisibility constraints in the\ncutsat procedure.* #7501 implements support for Nat equalities and disequalities in the\ncutsat procedure.* #7502 implements support for Nat div and mod in the cutsat\nprocedure.* #7503 implements support for Nat.sub in cutsat* #7536 implements support for ¬ d ∣ p in the cutsat procedure.* #7537 implements support for Int.natAbs and Int.toNat in the\ncutsat procedure.* #7538 fixes a bug in the cutsat model construction. It was not\nresetting the decision stack at the end of the search.* #7561 fixes the support for nonlinear Nat terms in cutsat. For\nexample, cutsat was failing in the following exampleexample (i j k l : Nat) : i / j + k + l - k = i / j + l := by grind\nbecause we were not adding the fact that i / j is non negative when we\ninject the Nat expression into Int.* #7579 improves the counterexamples produced by the cutsat procedure,\nand adds proper support for Nat. Before this PR, the assignment for an\nnatural variable x would be represented as NatCast.natCast x.Library* #6496 adds short-circuit support to bv_decide to accelerate\nmultiplications with shared coefficients. In particular, a * x = b * x\ncan be extended to a = b v (a * x = b * x). The latter is faster if a = b is true, as a = b may be evaluated without considering the\nmultiplication circuit. On the other hand, we require the multiplication\ncircuit, as a * x = b * x -> a = b is not always true due to two's\ncomplement wrapping.* #7141 generalizes cond to allow the motive to be in Sort u, not\njust Type u.* #7289 adds getKey_beq, getKey_congr and variants to the hashmap\napi.* #7319 continues alignment of lemmas about Int.ediv/fdiv/tdiv,\nincluding adding notes about \"missing\" lemmas that do not apply in one\ncase. Also lemmas about emod/fmod/tmod. There's still more to do.* #7338 adds @[simp] to Int.neg_inj.* #7341 adds an equivalence relation to the hash map with several lemmas\nfor it.* #7356 adds lemmas reducing monadic operations with pure to the\nnon-monadic counterparts.* #7358 fills further gaps in the integer division API, and mostly\nachieves parity between the three variants of integer division. There\nare still some inequality lemmas about tdiv and fdiv that are\nmissing, but as they would have quite awkward statements I'm hoping that\nfor now no one is going to miss them.* #7378 adds lemmas about Int that will be required in #7368.* #7380 moves DHashMap.Raw.foldRev(M) into DHashMap.Raw.Internal.* #7406 makes the instance for Subsingleton (Squash α) work for α : Sort u.* #7418 renames several hash map lemmas (get -> getElem) and uses\nm[k]? instead of get? m k (and also for get! and get).* #7432 adds a consequence of Nat.add_div using a divisibility\nhypothesis.* #7433 makes simp able to simplify basic for loops in monads other\nthan Id.* #7435 reviews the Nat and Int API, making the interfaces more\nconsistent.* #7445 renames Array.mkEmpty to emptyWithCapacity. (Similarly for\nByteArray and FloatArray.)* #7446 prefers using ∅ instead of .empty functions. We may later\nrename .empty functions to avoid the naming clash with\nEmptyCollection, and to better express semantics of functions which\ntake an optional capacity argument.* #7451 renames the member insert_emptyc_eq of the LawfulSingleton\ntypeclass to insert_empty_eq to conform to the recommended spelling of\n∅ as empty.* #7466 further cleans up simp lemmas for Int.* #7516 changes the order of arguments for List.modify and\nList.insertIdx, making them consistent with Array.* #7522 splits off the required theory about Nat, Fin and BitVec\nfrom #7484.* #7529 upstreams bind_congr from Mathlib and proves that the minimum\nof a sorted list is its head and weakens the antisymmetry condition of\nmin?_eq_some_iff. Instead of requiring an Std.Antisymm instance,\nmin?_eq_some_iff now only expects a proof that the relation is\nantisymmetric on the elements of the list. If the new premise is left\nout, an autoparam will try to derive it from Std.Antisymm, so existing\nusages of the theorem will most likely continue to work.* #7541 corrects names of a number of lemmas, where the incorrect name\nwas identified automatically by a\ntool\nwritten by @Rob23oba.* #7554 adds SMT-LIB operators to detect overflow BitVec.negOverflow,\naccording to the SMTLIB\nstandard,\nand the theorem proving equivalence of such definition with the BitVec\nlibrary functions (negOverflow_eq).* #7558 changes the definition of Nat.div and Nat.mod to use a\nstructurally recursive, fuel-based implementation rather than\nwell-founded recursion. This leads to more predicable reduction behavior\nin the kernel.* #7565 adds BitVec.toInt_sdiv plus a lot of related bitvector theory\naround divisions.* #7614 marks Nat.div and Nat.modCore as irreducible, to recover\nthe behavior from from before #7558.* #7672 reviews the implicitness of arguments across List/Array/Vector,\ngenerally trying to make arguments implicit where possible, although\nsometimes correcting propositional arguments which were incorrectly\nimplicit to explicit.* #7687 provides Inhabited, Ord (if missing), TransOrd,\nLawfulEqOrd and LawfulBEqOrd instances for various types, namely\nBool, String, Nat, Int, UIntX, Option, Prod and date/time\ntypes. It also adds a few related theorems, especially about how the\nOrd instance for Int relates to LE and LT.* #7692 upstreams a small number of ordering lemmas for Fin from\nmathlib.* #7700 provides Ord-related instances such as TransOrd for IntX,\nOrdering, BitVec, Array, List and Vector.* #7704 adds lemmas about the modulo operation defined on signed bounded\nintegers.* #7706 performs various cleanup tasks on Init/Data/UInt/* and\nInit/Data/SInt/*.* #7729 replaces assert! with assertBEq to fix issues where asserts\ndidn't trigger the ctest due to being in a separate task. This was\ncaused by panics not being caught in tasks, while IO errors were handled\nby the AsyncTask if we use the block function on them.* #7756 adds lemmas about Nat.gcd (some of which are currently present\nin mathlib).BREAKING CHANGE: While many lemmas were renamed and the lemma with the old signature was simply deprecated, some lemmas were changed without renaming them. They now use the getElem variants instead of get.Async* #6683 introduces TCP socket support using the LibUV library, enabling\nasynchronous I/O operations with it.* #7571 fixes #7478 by modifying number specifiers from atLeast size\nto flexible size for parsing. This change allows:* 1 repetition to accept 1 or more characters* More than 1 repetition to require exactly that many characters* #7574 introduces UDP socket support using the LibUV library, enabling\nasynchronous I/O operations with it.* #7578 introduces a function called interfaceAddresses that retrieves\nan array of system’s network interfaces.* #7584 introduces a structure called FormatConfig, which provides\nadditional configuration options for GenericFormat, such as whether\nleap seconds should be allowed during parsing. By default, this option\nis set to false.* #7751 adds Std.BaseMutex.tryLock and Std.Mutex.tryAtomically as\nwell as unit tests for our locking and condition variable primitives.* #7755 adds Std.RecursiveMutex as a recursive/reentrant equivalent to\nStd.Mutex.* #7771 adds a barrier primitive as Std.Barrier.Finite Types* #7228 adds simprocs to reduce expressions involving IntX.* #7274 adds lemmas about iterated conversions between finite types,\nstarting with something of type IntX.* #7340 adds lemmas for iterated conversions between finite types which\nstart with Nat/Int/Fin/BitVec and then go through UIntX.* #7368 adds lemmas for iterated conversions between finite types,\nstarting with something of type Nat/Int/Fin/BitVec and going\nthrough IntX.* #7414 adds the remaining lemmas about iterated conversions of finite\ntype that go through signed or unsigned bounded integers.* #7484 adds some lemmas about operations defined on UIntX* #7487 adds the instance Neg UInt8.* #7592 adds theory about signed finite integers relating operations and\nconversion functions.* #7598 adds miscellaneous results about Nat and BitVec that will be\nrequired for IntX theory (#7592).* #7685 contains additional material about BitVec and Int spun off\nfrom #7592.* #7694 contains additional material on BitVec, Int and Nat, split\noff from #7592.Tree Map* #7270 provides lemmas about the tree map functions foldlM, foldl,\nfoldrM and foldr and their interactions with other functions for\nwhich lemmas already exist. Additionally, it generalizes the\nfold*/keys lemmas to arbitrary tree maps, which were previously\nstated only for the DTreeMap α Unit case.* #7331 provides lemmas about the tree map function insertMany and its\ninteraction with other functions for which lemmas already exist. Most\nlemmas about ofList, which is related to insertMany, are not\nincluded.* #7360 provides lemmas about the tree map function ofList and\ninteractions with other functions for which lemmas already exist.* #7367 provides lemmas for the tree map functions alter and modify\nand their interactions with other functions for which lemmas already\nexist.BREAKING CHANGE: The signature of size_alter was corrected for all four hash map types. Instead of relying on the boolean operations contains and && in the if statements, we now use the Prop-based operations Membership and And.* #7412 provides lemmas about the tree map that have been introduced to\nthe hash map in #7289.* #7419 provides lemmas about the tree map function modify and its\ninteractions with other functions for which lemmas already exist.* #7437 provides (some but not all) lemmas about the tree map function\nminKey?.* #7556 provides lemmas about the tree map function minKey? and its\ninteraction with other functions for which lemmas already exist.* #7600 provides lemmas about the tree map function minKey! and its\ninteractions with other functions for which lemmas already exist.* #7626 provides lemmas for the tree map function minKeyD and its\ninterations with other functions for which lemmas already exist.* #7657 provides lemmas for the tree map function maxKey? and its\ninterations with other functions for which lemmas already exist.* #7660 provides lemmas for the tree map function minKey and its\ninterations with other functions for which lemmas already exist.* #7664 fixes a bug in the definition of the tree map functions maxKey\nand maxEntry. Moreover, it provides lemmas for this function and its\ninteractions with other function for which lemmas already exist.* #7674 add missing lemmas about the tree map: minKey* variants return\nthe head of keys, keys and toList are ordered and getKey* t.minKey? equals the minimum.* #7675 provides lemmas about the tree map function maxKeyD and its\ninteractions with other functions for which lemmas already exist.* #7686 provides lemmas for the tree map function maxKey! and its\ninteractions with other functions for which lemmas already exist.* #7695 removes simp lemmas about the tree map with a metavariable in\nthe head of the discrimination pattern.* #7697 is a follow-up to #7695, which removed simp attributes from\ntree map lemmas with bad discrimination patterns. In this PR, we\nintroduce some Ord-based lemmas that are more simp-friendly.BitVec API* #7104 adds BitVec.[toNat|toFin|toInt]_[sshiftRight|sshiftRight']\nplus variants with of_msb_*. While at it, we also add\ntoInt_zero_length and toInt_of_zero_length. In support of our main\ntheorem we add toInt_shiftRight_lt and le_toInt_shiftRight, which\nmake the main theorem automatically derivable via omega.* #7225 contains BitVec.(toInt, toFin)_twoPow theorems, completing the\nAPI for BitVec.*_twoPow. It also expands the toNat_twoPow API with\ntoNat_twoPow_of_le, toNat_twoPow_of_lt, as well as\ntoNat_twoPow_eq_if and moves msb_twoPow up, as it is used in the\ntoInt_msb proof.* #7415 adds a few lemmas about the interactions of BitVec with Fin\nand Nat.* #7420 generalizes BitVec.toInt_[lt|le]' to not require 0 < w.* #7465 adds the theorem:theorem lt_allOnes_iff {x : BitVec w} : x < allOnes w ↔ x ≠ allOnes w\nto simplify comparisons against -1#w. This is a corollary of the\nexisting lemma:theorem allOnes_le_iff {x : BitVec w} : allOnes w ≤ x ↔ x = allOnes w\n* #7599 adds SMT-LIB operators to detect overflow BitVec.(usubOverflow, ssubOverflow), according to the SMTLIB\nstandard,\nand the theorems proving equivalence of such definition with the\nBitVec library functions BittVec.(usubOverflow_eq, ssubOverflow_eq).* #7604 adds bitvector theorems that to push negation into other\noperations, following Hacker's Delight: Ch2.1.* #7605 adds theorems BitVec.[(toInt, toFin)_(extractLsb, extractLsb')], completing the API for BitVec.(extractLsb, extractLsb').* #7616 introduces BitVec.(toInt, toFin)_rotate(Left, Right),\ncompleting the API for BitVec.rotate(Left, Right)* #7658 introduces BitVec.(toFin_signExtend_of_le, toFin_signExtend),\ncompleting the API for BitVec.signExtend.* #7661 adds theorems BitVec.[(toFin, toInt)_setWidth', msb_setWidth'_of_lt, toNat_lt_twoPow_of_le, toInt_setWidth'_of_lt],\ncompleting the API for BitVec.setWidth'.* #7699 adds the BitVec.toInt_srem lemma, relating BitVec.srem with\nInt.tmod.Bitwuzla Rewrite Rules* #7424 proves Bitwuzla's rule\nBV_ZERO_EXTEND_ELIM:theorem setWidth_eq_append {v : Nat} {x : BitVec v} {w : Nat} (h : v ≤ w) :\n    x.setWidth w = ((0#(w - v)) ++ x).cast (by omega) := by\n* #7426 adds the Bitwuzla rewrite rule\nBV_EXTRACT_FULL,\nwhich is useful for the bitblaster to simplify extractLsb' based\nexpressions.* #7427 implements the bitwuzla rule\nBV_CONCAT_EXTRACT.\nThis will be used by the bitblaster to simplify adjacent extracts\ninto a single extract.* #7454 implements the bitwuzla rule\nBV_SIGN_EXTEND_ELIM,\nwhich rewrites a signExtend x as an append of the appropriate sign\nbits, followed by the bits of x.* #7461 introduces a bitvector associativity/commutativity normalization\non bitvector terms of the form (a * b) = (c * d) for a, b, c, d\nbitvectors. This mirrors Bitwuzla's PassNormalize::process's\nPassNormalize::normalize_eq_add_mul.* #7481 implements the Bitwuzla rewrites BV_ADD_NEG_MUL, and\nassociated lemmas to make the proof streamlined. bvneg (bvadd a (bvmul a b)) = (bvmul a (bvnot b)), or spelled as lean:theorem neg_add_mul_eq_mul_not {x y : BitVec w} :\n    - (x + x * y) = (x * ~~~ y)\n* #7482 implements the\nBV_EXTRACT_CONCAT\nrule from Bitwuzla, which explains how to extract bits from an append.\nWe first prove a 'master theorem' which has the full case analysis, from\nwhich we rapidly derive the necessary BV_EXTRACT_CONCAT theorems:theorem extractLsb'_append_eq_ite {v w} {xhi : BitVec v} {xlo : BitVec w} {start len : Nat} :\n    extractLsb' start len (xhi ++ xlo) =\n    if hstart : start < w\n    then\n      if hlen : start + len < w\n      then extractLsb' start len xlo\n      else\n        (((extractLsb' (start - w) (len - (w - start)) xhi) ++\n            extractLsb' start (w - start) xlo)).cast (by omega)\n    else\n      extractLsb' (start - w) len xhi\n\n* #7493 implements the Bitwuzla rewrite rule\nNORM_BV_ADD_MUL,\nand the associated lemmas to allow for expedient rewriting:theorem neg_add_mul_eq_mul_not {x y : BitVec w} : - (x + x * y) = x * ~~~ y\n* #7508 shows that negation commutes with left shift, which is the\nBitwuzla rewrite\nNORM_BV_SHL_NEG.* #7594 implements the Bitwuzla rewrites\nBV_EXTRACT_ADD_MUL,\nwhich witness that the high bits at i >= len do not affect the bits of\nthe product upto len.* #7595 implements the addition rewrite from the Bitwuzla rewrite\nBV_EXTRACT_ADD_MUL,\nwhich witness that the high bits at i >= len do not affect the bits of\nthe sum upto len:theorem extractLsb'_add {w len} {x y : BitVec w} (hlen : len ≤ w) :\n    (x + y).extractLsb' 0 len = x.extractLsb' 0 len + y.extractLsb' 0 len\n* #7757 adds the Bitwuzla rewrite NORM_BV_ADD_CONCAT for symbolic\nsimplification of add-of-append.Compiler* #7398 fixes a scoping error in the cce (Common Case Elimination) pass\nof the old code generator. This pass would create a join point for\ncommon minor premises even if some of those premises were in the bodies\nof locally defined functions, which results in an improperly scoped\nreference to a join point. The fix is to save/restore candidates when\nvisiting a lambda.* #7710 improves memory use of Lean, especially for longer-running\nserver processes, by up to 60%Pretty Printing* #7589 changes the structure instance notation pretty printer so that\nfields are omitted if their value is definitionally equal to the default\nvalue for the field (up to reducible transparancy). Setting\npp.structureInstances.defaults to true forces such fields to be pretty\nprinted anyway.Documentation* #7198 makes the docstrings in the Char namespace follow the\ndocumentation conventions.* #7204 adds docstrings for the Id monad.* #7246 updates existing docstrings for Bool and adds the missing ones.* #7288 fixes the doc of List.removeAll* #7365 updates docstrings and adds some that are missing.* #7452 makes the style of all List docstrings that appear in the\nlanguage reference consistent.* #7476 adds missing docstrings for IO and related code and makes the\nstyle of the existing docstrings consistent.* #7492 adds missing Array docstrings and makes their style\nconsistent.* #7506 adds missing String docstrings and makes the existing ones\nconsistent in style.* #7523 adds missing docstrings and makes docstring style consistent for\nSystem and System.FilePath.* #7528 makes the docstrings for Thunk consistent with the style of\nthe others.* #7534 adds missing Syntax-related docstrings and makes the existing\nones consistent in style with the others.* #7535 revises the docstring for funext, making it more concise and\nadding a reference to the manual for more details.* #7548 adds missing monad transformer docstrings and makes their style\nconsistent.* #7552 adds missing Nat docstrings and makes their style consistent.* #7564 updates the docstrings for ULift and PLift, making their\nstyle consistent with the others.* #7568 adds missing Int docstrings and makes the style of all of them\nconsistent.* #7602 adds missing docstrings for fixed-width integer operations and\nmakes their style consistent.* #7607 adds docstrings for String.drop and String.dropRight.* #7613 adds a variety of docstrings for names that appear in the\nmanual.* #7635 adds missing docstrings for Substring and makes the style of\nSubstring docstrings consistent.* #7642 reviews the docstrings for Float and Float32, adding missing\nones and making their format consistent.* #7645 adds missing docstrings and makes docstring style consistent for\nForM, ForIn, ForIn', ForInStep, IntCast, and NatCast.* #7711 adds the last few missing docstrings that appear in the manual.* #7713 makes the BitVec docstrings match each other and the rest of the\nAPI in style.Server* #7178 fixes a race condition in the language server that would\nsometimes cause it to drop requests and never respond to them when\nediting the header of a file. This in turn could cause semantic\nhighlighting to stop functioning in VS Code, as VS Code would stop\nemitting requests when a prior request was dropped, and also cause the\nInfoView to become defective. It would also cause import auto-completion\nto feel a bit wonky, since these requests were sometimes dropped. This\nrace condition has been present in the language server since its first\nversion in 2020.* #7223 implements parallel watchdog request processing so that requests\nthat are processed by the watchdog cannot block the main thread of the\nwatchdog anymore.* #7240 adds a canonical syntax for linking to sections in the language\nreference along with formatting of examples in docstrings according to\nthe docstring style guide.* #7343 mitigates an issue where inserting an inlay hint in VS Code by\ndouble-clicking would insert the inlay hint at the wrong position right\nafter an edit.* #7344 combines the auto-implicit inlay hint tooltips into a single\ntooltip. This works around an issue in VS Code where VS Code fails to\nupdate hovers for tooltips in adjacent inlay hint parts when moving the\nmouse.* #7346 fixes an issue where the language server would run into an inlay\nhint assertion violation when deleting a file that is still open in the\nlanguage server.* #7366 adds server-side support for dedicated 'unsolved goals' and\n'goals accomplished' diagnostics that will have special support in the\nLean 4 VS Code extension. The special 'unsolved goals' diagnostic is\nadapted from the 'unsolved goals' error diagnostic, while the 'goals\naccomplished' diagnostic is issued when a theorem or Prop-typed\nexample has no errors or sorrys. The Lean 4 VS Code extension\ncompanion PR is at leanprover/vscode-lean4#585.* #7376 ensures weak options do not have to be repeated in both Lake\nleanOptions and moreServerOptions.* #7882 fixes a regression where elaboration of a previous document\nversion is not cancelled on changes to the document.Lake* #7185 refactors Lake's build internals to enable the introduction of\ntargets and facets beyond packages, modules, and libraries. Facets,\nbuild keys, build info, and CLI commands have been generalized to\narbitrary target types.* #7393 adds autocompletion support for Lake configuration fields in the\nLean DSL at the indented whitespace after an existing field.\nAutocompletion in the absence of any fields is currently still not\nsupported.Breaking change: The nonstandard braced configuration syntax now uses a semicolon ; rather than a comma , as a separator. Indentation can still be used as an alternative to the separator.* #7399 reverts the new builtin initializers, elaborators, and macros in\nLake back to non-builtin.* #7504 augments the Lake configuration data structures declarations\n(e.g., PackageConfig, LeanLibConfig) to produce additional metadata\nwhich is used to automatically generate the Lean & TOML encoders and\ndecoders via metaprograms.* #7543 unifies the configuration declarations of dynamic targets,\nexternal libraries, Lean libraries, and Lean executables into a single\ndata type stored in a unified map within a package.Breaking change: Users can no longer define multiple targets with the same name but different kinds (e.g., a Lean executable and a Lean library both named foo). This should not effect most users as the Lake DSL already discouraged this.* #7576 changes Lake to produce and use response files on Windows when\nbuilding executables and libraries (static and shared). This is done to\navoid potentially exceeding Windows command line length limits.* #7586 changes the static.export facet for Lean libraries to produce\nthin static libraries.* #7608 removes the use of the Lake plugin in the Lake build and in\nconfiguration files.* #7667 changes Lake to log messages from a Lean configuration the same\nway it logs message from a Lean build. This, for instance, removes\nredundant severity captions.* #7703 adds input_file and input_dir as new target types. It also\nadds the needs configuration option for Lean libraries and\nexecutables. This option generalizes extraDepTargets (which will be\ndeprecated in the future), providing much richer support for declaring\ndependencies across package and target type boundaries.* #7716 adds the moreLinkObjs and moreLinkLibs options for Lean\npackages, libraries, and executables. These serves as functional\nreplacements for extern_lib and provided additional flexibility.Breaking change: precompileModules now only loads modules of the current library individually. Modules of other libraries are loaded together via that library's shared library.* #7732 deprecates extraDepTargets and fixes a bug caused by the\nconfiguration refactor.* #7758 removes the -lstdcpp extra link argument from the FFI example.\nIt is not actually necessary.* #7763 corrects build key fetches to produce jobs with the proper data\nkinds and fixes a failed coercion from key literals to targets.Other* #7326 updates the release notes script to better indent PR\ndescriptions.* #7453 adds \"(kernel)\" to the message for the kernel-level application\ntype mismatch error.* #7769 fixes a number of bugs in the release automation scripts, adds a\nscript to merge tags into remote stable branches, and makes the main\nrelease_checklist.py script give suggestions to call the\nmerge_remote.py and release_steps.py scripts when needed.\n\n"},"/Type-Classes/Deriving-Instances/#deriving-handlers":{"id":"/Type-Classes/Deriving-Instances/#deriving-handlers","header":"11.4.1. Deriving Handlers","context":"Lean Reference\u0009Type Classes\u0009Deriving Instances","contents":"Instance deriving uses a table of deriving handlers that maps type class names to metaprograms that derive instances for them.\nDeriving handlers may be added to the table using registerDerivingHandler, which should be called in an initialize block.\nEach deriving handler should have the type Array Name → CommandElabM Bool.\nWhen a user requests that an instance of a class be derived, its registered handlers are called one at a time.\nThey are provided with all of the names in the mutual block for which the instance is to be derived, and should either correctly derive an instance and return true or have no effect and return false.\nWhen a handler returns true, no further handlers are called.\n\nLean includes deriving handlers for the following classes:\n\n* BEq* DecidableEq* Hashable* Inhabited* Nonempty* Ord* Repr* SizeOf* TypeName\n\nRegisters a deriving handler for a class. This function should be called in an initialize block.A DerivingHandler is called on the fully qualified names of all types it is running for. For\nexample, deriving instance Foo for Bar, Baz invokes fooHandler #[`Bar, `Baz].\n\nDeriving HandlersInstances of the IsEnum class demonstrate that a type is a finite enumeration by providing a bijection between the type and a suitably-sized Fin:class IsEnum (α : Type) where\n  size : Nat\n  toIdx : α → Fin size\n  fromIdx : Fin size → α\n  to_from_id : ∀ (i : Fin size), toIdx (fromIdx i) = i\n  from_to_id : ∀ (x : α), fromIdx (toIdx x) = x\nFor inductive types that are trivial enumerations, where no constructor expects any parameters, instances of this class are quite repetitive.\nThe instance for Bool is typical:instance : IsEnum Bool where\n  size := 2\n  toIdx\n    | false => 0\n    | true => 1\n  fromIdx\n    | 0 => false\n    | 1 => true\n  to_from_id\n    | 0 => rfl\n    | 1 => rfl\n  from_to_id\n    | false => rfl\n    | true => rfl\nThe deriving handler programmatically constructs each pattern case, by analogy to the IsEnum Bool implementation:open Lean Elab Parser Term Command\n\ndef deriveIsEnum (declNames : Array Name) : CommandElabM Bool := do\n  if h : declNames.size = 1 then\n    let env ← getEnv\n    if let some (.inductInfo ind) := env.find? declNames[0] then\n      let mut tos : Array (TSyntax ``matchAlt) := #[]\n      let mut froms := #[]\n      let mut to_froms := #[]\n      let mut from_tos := #[]\n      let mut i := 0\n\n      for ctorName in ind.ctors do\n        let c := mkIdent ctorName\n        let n := Syntax.mkNumLit (toString i)\n\n        tos      := tos.push      (← `(matchAltExpr| | $c => $n))\n        from_tos := from_tos.push (← `(matchAltExpr| | $c => rfl))\n        froms    := froms.push    (← `(matchAltExpr| | $n => $c))\n        to_froms := to_froms.push (← `(matchAltExpr| | $n => rfl))\n\n        i := i + 1\n\n      let cmd ← `(instance : IsEnum $(mkIdent declNames[0]) where\n                    size := $(quote ind.ctors.length)\n                    toIdx $tos:matchAlt*\n                    fromIdx $froms:matchAlt*\n                    to_from_id $to_froms:matchAlt*\n                    from_to_id $from_tos:matchAlt*)\n      elabCommand cmd\n\n      return true\n  return false\n\ninitialize\n  registerDerivingHandler ``IsEnum deriveIsEnum\n\n\n"},"/The-Type-System/Inductive-Types/#inductive-declarations":{"id":"/The-Type-System/Inductive-Types/#inductive-declarations","header":"4.4.1. Inductive Type Declarations","context":"Lean Reference\u0009Type System\u0009Inductive Types","contents":"Inductive Type DeclarationsDeclares a new inductive type.\nThe meaning of the declModifiers is as described in the section on declaration modifiers.\n\nAfter declaring an inductive type, its type constructor, constructors, and recursor are present in the environment.\nNew inductive types extend Lean's core logic—they are not encoded or represented by some other already-present data.\nInductive type declarations must satisfy a number of well-formedness requirements to ensure that the logic remains consistent.\n\nThe first line of the declaration, from inductive to where, specifies the new type constructor's name and type.\nIf a type signature for the type constructor is provided, then its result type must be a universe, but the parameters do not need to be types.\nIf no signature is provided, then Lean will attempt to infer a universe that's just big enough to contain the resulting type.\nIn some situations, this process may fail to find a minimal universe or fail to find one at all, necessitating an annotation.\n\nThe constructor specifications follow where.\nConstructors are not mandatory, as constructorless inductive types such as False and Empty are perfectly sensible.\nEach constructor specification begins with a vertical bar ('|', Unicode 'VERTICAL BAR' (U+007c)), declaration modifiers, and a name.\nThe name is a raw identifier.\nA declaration signature follows the name.\nThe signature may specify any parameters, modulo the well-formedness requirements for inductive type declarations, but the return type in the signature must be a saturated application of the type constructor of the inductive type being specified.\nIf no signature is provided, then the constructor's type is inferred by inserting sufficient implicit parameters to construct a well-formed return type.\n\nThe new inductive type's name is defined in the current namespace.\nEach constructor's name is in the inductive type's namespace.\n\n\n\n\n\n\n\n\n\n"},"/The--grind--tactic/Linear-Integer-Arithmetic/#The-Lean-Language-Reference--The--grind--tactic--Linear-Integer-Arithmetic--Division-and-Modulus":{"id":"/The--grind--tactic/Linear-Integer-Arithmetic/#The-Lean-Language-Reference--The--grind--tactic--Linear-Integer-Arithmetic--Division-and-Modulus","header":"17.7.3. Division and Modulus","context":"Lean Reference\u0009The  grind  tactic\u0009Linear Integer Arithmetic","contents":"The solver supports linear division and modulo operations.\n\nLinear Division and Modulo with cutsatexample (x y : Int) :\n    x = y / 2 →\n    y % 2 = 0 →\n    y - 2 * x = 0 := by\n  grind\n\n\n"},"/Terms/Pattern-Matching/#The-Lean-Language-Reference--Terms--Pattern-Matching--Types":{"id":"/Terms/Pattern-Matching/#The-Lean-Language-Reference--Terms--Pattern-Matching--Types","header":"10.8.1. Types","context":"Lean Reference\u0009Terms\u0009Pattern Matching","contents":"Each discriminant must be well typed.\nBecause patterns are a subset of terms, their types can also be checked.\nEach pattern that matches a given discriminant must have the same type as the corresponding discriminant.\n\nThe right-hand side of each match alternative should have the same type as the overall match term.\nTo support dependent types, matching a discriminant against a pattern refines the types that are expected within the scope of the pattern.\nIn both subsequent patterns in the same match alternative and the right-hand side's type, occurrences of the discriminant are replaced by the pattern that it was matched against.\n\nType RefinementThis indexed family describes mostly-balanced trees, with the depth encoded in the type.inductive BalancedTree (α : Type u) : Nat → Type u where\n  | empty : BalancedTree α 0\n  | branch\n    (left : BalancedTree α n)\n    (val : α)\n    (right : BalancedTree α n) :\n    BalancedTree α (n + 1)\n  | lbranch\n    (left : BalancedTree α (n + 1))\n    (val : α)\n    (right : BalancedTree α n) :\n    BalancedTree α (n + 2)\n  | rbranch\n    (left : BalancedTree α n)\n    (val : α)\n    (right : BalancedTree α (n + 1)) :\n    BalancedTree α (n + 2)\nTo begin the implementation of a function to construct a perfectly balanced tree with some initial element and a given depth, a hole can be used for the definition.def BalancedTree.filledWith (x : α) (depth : Nat) : BalancedTree α depth := _\nThe error message demonstrates that the tree should have the indicated depth.don't know how to synthesize placeholder\ncontext:\nα : Type u\nx : α\ndepth : Nat\n⊢ BalancedTree α depth\nMatching on the expected depth and inserting holes results in an error message for each hole.\nThese messages demonstrate that the expected type has been refined, with depth replaced by the matched values.def BalancedTree.filledWith\n    (x : α) (depth : Nat) :\n    BalancedTree α depth :=\n  match depth with\n  | 0 => _\n  | n + 1 => _\nThe first hole yields the following message:don't know how to synthesize placeholder\ncontext:\nα : Type u\nx : α\ndepth : Nat\n⊢ BalancedTree α 0\nThe second hole yields the following message:don't know how to synthesize placeholder\ncontext:\nα : Type u\nx : α\ndepth n : Nat\n⊢ BalancedTree α (n + 1)\nMatching on the depth of a tree and the tree itself leads to a refinement of the tree's type according to the depth's pattern.\nThis means that certain combinations are not well-typed, such as 0 and branch, because refining the second discriminant's type yields BalancedTree α 0 which does not match the constructor's type.def BalancedTree.isPerfectlyBalanced\n    (n : Nat) (t : BalancedTree α n) : Bool :=\n  match n, t with\n  | 0, .empty => true\n  | 0, .branch left val right =>\n    isPerfectlyBalanced left &&\n    isPerfectlyBalanced right\n  | _, _ => false\nType mismatch\n  left.branch val right\nhas type\n  BalancedTree ?m.54 (?m.51 + 1)\nbut is expected to have type\n  BalancedTree α 0\n\n\n\n\n\n\n\n\n\n\n"},"/Elaboration-and-Compilation/#macro-and-elab":{"id":"/Elaboration-and-Compilation/#macro-and-elab","header":"2.2. Macro Expansion and Elaboration","context":"Lean Reference\u0009Elaboration and Compilation","contents":"Having parsed a command, the next step is to elaborate it.\nThe precise meaning of elaboration depends on what is being elaborated: elaborating a command effects a change in the state of Lean, while elaborating a term results in a term in Lean's core type theory.\nElaboration of both commands and terms may be recursive, both because of command combinators such as in and because terms may contain other terms.\n\nCommand and term elaboration have different capabilities.\nCommand elaboration may have side effects on an environment, and it has access to run arbitrary computations in IO.\nLean environments contain the usual mapping from names to definitions along with additional data defined in environment extensions, which are additional tables associated with an environment; environment extensions are used to track most other information about Lean code, including simp lemmas, custom pretty printers, and internals such as the compiler's intermediate representations.\nCommand elaboration also maintains a message log with the contents of the compiler's informational output, warnings, and errors, a set of info trees that associate metadata with the original syntax (used for interactive features such as displaying proof states, identifier completion, and showing documentation), accumulated debugging traces, the open section scopes, and some internal state related to macro expansion.\nTerm elaboration may modify all of these fields except the open scopes.\nAdditionally, it has access to all the machinery needed to create fully-explicit terms in the core language from Lean's terse, friendly syntax, including unification, type class instance synthesis, and type checking.\n\nThe first step in both term and command elaboration is macro expansion.\nThere is a table that maps syntax kinds to macro implementations; macro implementations are monadic functions that transform the macro syntax into new syntax.\nMacros are saved in the same table and execute in the same monad for terms, commands, tactics, and any other macro-extensible part of Lean.\nIf the syntax returned by the macro is itself a macro, then that syntax is again expanded—this process is repeated until either a syntax whose kind is not a macro is produced, or until a maximum number of iterations is reached, at which point Lean produces an error.\nTypical macros process some outer layer of their syntax, leaving some subterms untouched.\nThis means that even when macro expansion has been completed, there still may be macro invocations remaining in the syntax below the top level.\nNew macros may be added to the macro table.\nDefining new macros is described in detail in the section on macros.\n\nAfter macro expansion, both the term and command elaborators consult tables that map syntax kinds to elaboration procedures.\nTerm elaborators map syntax and an optional expected type to a core language expression using the very powerful monad mentioned above.\nCommand elaborators accept syntax and return no value, but may have monadic side effects on the global command state.\nWhile both term and command elaborators have access to IO, it's unusual that they perform side effects; exceptions include interactions with external tools or solvers.\n\nThe elaborator tables may be extended to enable the use of new syntax for both terms and commands by extending the tables.\nSee the section on elaborators for a description of how to add additional elaborators to Lean.\nWhen commands or terms contain further commands or terms, they recursively invoke the appropriate elaborator on the nested syntax.\nThis elaborator will then expand macros before invoking elaborators from the table.\nWhile macro expansion occurs prior to elaboration for a given “layer” of the syntax, macro expansion and elaboration are interleaved in general.\n\n\n\n"},"/Basic-Types/Strings/#string-api-encoding":{"id":"/Basic-Types/Strings/#string-api-encoding","header":"19.8.4.12. Encodings","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009API Reference","contents":"Accesses the indicated byte in the UTF-8 encoding of a string.At runtime, this function is implemented by efficient, constant-time code.\n\nThe number of bytes used by the string's UTF-8 encoding.At runtime, this function takes constant time because the byte length of strings is cached.\n\nReturns the sequence of bytes in a character's UTF-8 encoding.\n\nDecodes the UTF-8 character sequence that starts at a given index in a byte array, or none if\nindex i is out of bounds or is not the start of a valid UTF-8 character.\n\nDecodes an array of bytes that encode a string as UTF-8 into\nthe corresponding string. Invalid UTF-8 characters in the byte array result in (default : Char),\nor 'A', in the string.\n\nDecodes an array of bytes that encode a string as UTF-8 into\nthe corresponding string, or returns none if the array is not a valid UTF-8 encoding of a string.\n\nDecodes an array of bytes that encode a string as UTF-8 into\nthe corresponding string, or panics if the array is not a valid UTF-8 encoding of a string.\n\nEncodes a string in UTF-8 as an array of bytes.\n\nChecks whether an array of bytes is a valid UTF-8 encoding of a string.\n\nReplaces each \\r\\n with \\n to normalize line endings, but does not validate that there are no\nisolated \\r characters.This is an optimized version of String.replace text \"\\r\\n\" \"\\n\".\n\n"}});