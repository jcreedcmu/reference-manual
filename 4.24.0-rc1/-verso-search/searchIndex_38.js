window.docContents[38].resolve({"/Basic-Types/Bitvectors/#The-Lean-Language-Reference--Basic-Types--Bitvectors--API-Reference--Construction":{"contents":"Fills a bitvector with w copies of the bit b.\n\nReturns a bitvector of size n where all bits are 0.\n\nReturns a bitvector of size n where all bits are 1.\n\ntwoPow w i is the bitvector 2^i if i < w, and 0 otherwise. In other words, it is 2 to the\npower i.From the bitwise point of view, it has the ith bit as 1 and all other bits as 0.\n\n","context":"Lean Reference\u0009Basic Types\u0009Bitvectors\u0009API Reference","header":"19.5.5.2. Construction","id":"/Basic-Types/Bitvectors/#The-Lean-Language-Reference--Basic-Types--Bitvectors--API-Reference--Construction"},"/IO/Processes/#The-Lean-Language-Reference--IO--Processes--Current-Process":{"contents":"Returns the current working directory of the calling process.\n\nSets the current working directory of the calling process.\n\nTerminates the current process with the provided exit code. 0 indicates success, all other values\nindicate failure.\n\nReturns the process ID of the calling process.\n\n","context":"Lean Reference\u0009IO\u0009Processes","header":"15.9.1. Current Process","id":"/IO/Processes/#The-Lean-Language-Reference--IO--Processes--Current-Process"},"/releases/v4.14.0/#release-v4___14___0":{"contents":"Full Changelog: https://github.com/leanprover/lean4/compare/v4.13.0...v4.14.0Language features, tactics, and metaprograms* structure and inductive commands* #5517 improves universe level inference for the resulting type of an inductive or structure. Recall that a Prop-valued inductive type is a syntactic subsingleton if it has at most one constructor and all the arguments to the constructor are in Prop. Such types have large elimination, so they could be defined in Type or Prop without any trouble. The way inference has changed is that if a type is a syntactic subsingleton with exactly one constructor, and the constructor has at least one parameter/field, then the inductive/structure command will prefer creating a Prop instead of a Type. The upshot is that the : Prop in structure S : Prop is often no longer needed. (With @arthur-adjedj).* #5842 and #5783 implement a feature where the structure command can now define recursive inductive types:structure Tree where\n  n : Nat\n  children : Fin n → Tree\n\ndef Tree.size : Tree → Nat\n  | {n, children} => Id.run do\n    let mut s := 0\n    for h : i in [0 : n] do\n      s := s + (children ⟨i, h.2⟩).size\n    pure s\n* #5814 fixes a bug where Mathlib's Type* elaborator could lead to incorrect universe parameters with the inductive command.* #3152 and #5844 fix bugs in default value processing for structure instance notation (with @arthur-adjedj).* #5399 promotes instance synthesis order calculation failure from a soft error to a hard error.* #5542 deprecates := variants of inductive and structure (see breaking changes).* Application elaboration improvements* #5671 makes @[elab_as_elim] require at least one discriminant, since otherwise there is no advantage to this alternative elaborator.* #5528 enables field notation in explicit mode. The syntax @x.f elaborates as @S.f with x supplied to the appropriate parameter.* #5692 modifies the dot notation resolution algorithm so that it can apply CoeFun instances. For example, Mathlib has Multiset.card : Multiset α →+ Nat, and now with m : Multiset α, the notation m.card resolves to ⇑Multiset.card m.* #5658 fixes a bug where 'don't know how to synthesize implicit argument' errors might have the incorrect local context when the eta arguments feature is activated.* #5933 fixes a bug where .. ellipses in patterns made use of optparams and autoparams.* #5770 makes dot notation for structures resolve using all ancestors. Adds a resolution order for generalized field notation. This is the order of namespaces visited during resolution when trying to resolve names. The algorithm to compute a resolution order is the commonly used C3 linearization (used for example by Python), which when successful ensures that immediate parents' namespaces are considered before more distant ancestors' namespaces. By default we use a relaxed version of the algorithm that tolerates inconsistencies, but using set_option structure.strictResolutionOrder true makes inconsistent parent orderings into warnings.* Recursion and induction principles* #5619 fixes functional induction principle generation to avoid over-eta-expanding in the preprocessing step.* #5766 fixes structural nested recursion so that it is not confused when a nested type appears first.* #5803 fixes a bug in functional induction principle generation when there are let bindings.* #5904 improves functional induction principle generation to unfold aux definitions more carefully.* #5850 refactors code for Predefinition.Structural.* Error messages* #5276 fixes a bug in \"type mismatch\" errors that would structurally assign metavariables during the algorithm to expose differences.* #5919 makes \"type mismatch\" errors add type ascriptions to expose differences for numeric literals.* #5922 makes \"type mismatch\" errors expose differences in the bodies of functions and pi types.* #5888 improves the error message for invalid induction alternative names in match expressions (@josojo).* #5719 improves calc error messages.* #5627 and #5663 improve the #eval command and introduce some new features.* Now results can be pretty printed if there is a ToExpr instance, which means hoverable output. If ToExpr fails, it then tries looking for a Repr or ToString instance like before. Setting set_option eval.pp false disables making use of ToExpr instances.* There is now auto-derivation of Repr instances, enabled with the pp.derive.repr option (default to true). For example:inductive Baz\n| a | b\n\n#eval Baz.a\n-- Baz.a\nIt simply does deriving instance Repr for Baz when there's no way to represent Baz.* The option eval.type controls whether or not to include the type in the output. For now the default is false.* Now expressions such as #eval do return 2, where monad is unknown, work. It tries unifying the monad with CommandElabM, TermElabM, or IO.* The classes Lean.Eval and Lean.MetaEval have been removed. These each used to be responsible for adapting monads and printing results. Now the MonadEval class is responsible for adapting monads for evaluation (it is similar to MonadLift, but instances are allowed to use default data when initializing state), and representing results is handled through a separate process.* Error messages about failed instance synthesis are now more precise. Once it detects that a MonadEval class applies, then the error message will be specific about missing ToExpr/Repr/ToString instances.* Fixes bugs where evaluating MetaM and CoreM wouldn't collect log messages.* Fixes a bug where let rec could not be used in #eval.* partial definitions* #5780 improves the error message when partial fails to prove a type is inhabited. Add delta deriving.* #5821 gives partial inhabitation the ability to create local Inhabited instances from parameters.* New tactic configuration syntax. The configuration syntax for all core tactics has been given an upgrade. Rather than simp (config := { contextual := true, maxSteps := 22}), one can now write simp +contextual (maxSteps := 22). Tactic authors can migrate by switching from (config)? to optConfig in tactic syntaxes and potentially deleting mkOptionalNode in elaborators. #5883, #5898,  #5928, and #5932. (Tactic authors, see breaking changes.)* simp tactic* #5632 fixes the simpproc for Fin literals to reduce more consistently.* #5648 fixes a bug in simpa ... using t where metavariables in t were not properly accounted for, and also improves the type mismatch error.* #5838 fixes the docstring of simp! to actually talk about simp!.* #5870 adds support for attribute [simp ←] (note the reverse direction). This adds the reverse of a theorem as a global simp theorem.* decide tactic* #5665 adds decide! tactic for using kernel reduction (warning: this is renamed to decide +kernel in a future release).* bv_decide tactic* #5714 adds inequality regression tests (@alexkeizer).* #5608 adds bv_toNat tag for toNat_ofInt (@bollu).* #5618 adds support for at in ac_nf and uses it in bv_normalize (@tobiasgrosser).* #5628 adds udiv support.* #5635 adds auxiliary bitblasters for negation and subtraction.* #5637 adds more getLsbD bitblaster theory.* #5652 adds umod support.* #5653 adds performance benchmark for modulo.* #5655 reduces error on bv_check to warning.* #5670 adds ~~~(-x) support.* #5673 disables ac_nf by default.* #5675 fixes context tracking in bv_decide counter example.* #5676 adds an error when the LRAT proof is invalid.* #5781 introduces uninterpreted symbols everywhere.* #5823 adds BitVec.sdiv support.* #5852 adds BitVec.ofBool support.* #5855 adds if support.* #5869 adds support for all the SMTLIB BitVec divison/remainder operations.* #5886 adds embedded constraint substitution.* #5918 fixes loose mvars bug in bv_normalize.* Documentation:* #5636 adds remarks about multiplication.* conv mode* #5861 improves the congr conv tactic to handle \"over-applied\" functions.* #5894 improves the arg conv tactic so that it can access more arguments and so that it can handle \"over-applied\" functions (it generates a specialized congruence lemma for the specific argument in question). Makes arg 1 and arg 2 apply to pi types in more situations. Adds negative indexing, for example arg -2 is equivalent to the lhs tactic. Makes the enter [...] tactic show intermediate states like rw.* Other tactics* #4846 fixes a bug where generalize ... at * would apply to implementation details (@ymherklotz).* #5730 upstreams the classical tactic combinator.* #5815 improves the error message when trying to unfold a local hypothesis that is not a local definition.* #5862 and #5863 change how apply and simp elaborate, making them not disable error recovery. This improves hovers and completions when the term has elaboration errors.* deriving clauses* #5899 adds declaration ranges for delta-derived instances.* #5265 removes unused syntax in deriving clauses for providing arguments to deriving handlers (see breaking changes).* #5065 upstreams and updates #where, a command that reports the current scope information.* Linters* #5338 makes the unused variables linter ignore variables defined in tactics by default now, avoiding performance bottlenecks.* #5644 ensures that linters in general do not run on #guard_msgs itself.* Metaprogramming interface* #5720 adds pushGoal/pushGoals and popGoal for manipulating the goal state. These are an alternative to replaceMainGoal and getMainGoal, and with them you don't need to worry about making sure nothing clears assigned metavariables from the goal list between assigning the main goal and using replaceMainGoal. Modifies closeMainGoalUsing, which is like a TacticM version of liftMetaTactic. Now the callback is run in a context where the main goal is removed from the goal list, and the callback is free to modify the goal list. Furthermore, the checkUnassigned argument has been replaced with checkNewUnassigned, which checks whether the value assigned to the goal has any new metavariables, relative to the start of execution of the callback. Modifies withCollectingNewGoalsFrom to take the parentTag argument explicitly rather than indirectly via getMainTag. Modifies elabTermWithHoles to optionally take parentTag?.* #5563 fixes getFunInfo and inferType to use withAtLeastTransparency rather than withTransparency.* #5679 fixes RecursorVal.getInduct to return the name of major argument’s type. This makes \"structure eta\" work for nested inductives.* #5681 removes unused mkRecursorInfoForKernelRec.* #5686 makes discrimination trees index the domains of foralls, for better performance of the simplify and type class search.* #5760 adds Lean.Expr.name? recognizer for Name expressions.* #5800 modifies liftCommandElabM to preserve more state, fixing an issue where using it would drop messages.* #5857 makes it possible to use dot notation in m! strings, for example m!\"{.ofConstName n}\".* #5841 and #5853 record the complete list of structure parents in the StructureInfo environment extension.* Other fixes or improvements* #5566 fixes a bug introduced in #4781 where heartbeat exceptions were no longer being handled properly. Now such exceptions are tagged with runtime.maxHeartbeats (@eric-wieser).* #5708 modifies the proof objects produced by the proof-by-reflection tactics ac_nf0 and simp_arith so that the kernel is less prone to reducing expensive atoms.* #5768 adds a #version command that prints Lean's version information.* #5822 fixes elaborator algorithms to match kernel algorithms for primitive projections (Expr.proj).* #5811 improves the docstring for the rwa tactic.Language server, widgets, and IDE extensions* #5224 fixes WorkspaceClientCapabilities to make applyEdit optional, in accordance with the LSP specification (@pzread).* #5340 fixes a server deadlock when shutting down the language server and a desync between client and language server after a file worker crash.* #5560 makes initialize and builtin_initialize participate in the call hierarchy and other requests.* #5650 makes references in attributes participate in the call hierarchy and other requests.* #5666 add auto-completion in tactic blocks without having to type the first character of the tactic, and adds tactic completion docs to tactic auto-completion items.* #5677 fixes several cases where goal states were not displayed in certain text cursor positions.* #5707 indicates deprecations in auto-completion items.* #5736, #5752, #5763, #5802, and #5805 fix various performance issues in the language server.* #5801 distinguishes theorem auto-completions from non-theorem auto-completions.Pretty printing* #5640 fixes a bug where goal states in messages might print newlines as spaces.* #5643 adds option pp.mvars.delayed (default false), which when false causes delayed assignment metavariables to pretty print with what they are assigned to. Now fun x : Nat => ?a pretty prints as fun x : Nat => ?a rather than fun x ↦ ?m.7 x.* #5711 adds options pp.mvars.anonymous and pp.mvars.levels, which when false respectively cause expression metavariables and level metavariables to pretty print as ?_.* #5710 adjusts the ⋯ elaboration warning to mention pp.maxSteps.* #5759 fixes the app unexpander for sorryAx.* #5827 improves accuracy of binder names in the signature pretty printer (like in output of #check). Also fixes the issue where consecutive hygienic names pretty print without a space separating them, so we now have (x✝ y✝ : Nat) rather than (x✝y✝ : Nat).* #5830 makes sure all the core delaborators respond to pp.explicit when appropriate.* #5639 makes sure name literals use escaping when pretty printing.* #5854 adds delaborators for <|>, <*>, >>, <*, and *>.Library* Array* #5687 deprecates Array.data.* #5705 uses a better default value for Array.swapAt!.* #5748 moves Array.mapIdx lemmas to a new file.* #5749 simplifies signature of Array.mapIdx.* #5758 upstreams Array.reduceOption.* #5786 adds simp lemmas for Array.isEqv and BEq.* #5796 renames Array.shrink to Array.take, and relates it to List.take.* #5798 upstreams List.modify, adds lemmas, relates to Array.modify.* #5799 relates Array.forIn and List.forIn.* #5833 adds Array.forIn', and relates to List.* #5848 fixes deprecations in Init.Data.Array.Basic to not recommend the deprecated constant.* #5895 adds LawfulBEq (Array α) ↔ LawfulBEq α.* #5896 moves @[simp] from back_eq_back? to back_push.* #5897 renames Array.back to back!.* List* #5605 removes List.redLength.* #5696 upstreams List.mapIdx and adds lemmas.* #5697 upstreams List.foldxM_map.* #5701 renames List.join to List.flatten.* #5703 upstreams List.sum.* #5706 marks prefix_append_right_inj as a simp lemma.* #5716 fixes List.drop_drop addition order.* #5731 renames List.bind and Array.concatMap to flatMap.* #5732 renames List.pure to List.singleton.* #5742 upstreams ne_of_mem_of_not_mem.* #5743 upstreams ne_of_apply_ne.* #5816 adds more List.modify lemmas.* #5879 renames List.groupBy to splitBy.* #5913 relates for loops over List with foldlM.* Nat* #5694 removes instBEqNat, which is redundant with instBEqOfDecidableEq but not defeq.* #5746 deprecates Nat.sum.* #5785 adds Nat.forall_lt_succ and variants.* Fixed width integers* #5323 redefine unsigned fixed width integers in terms of BitVec.* #5735 adds UIntX.[val_ofNat, toBitVec_ofNat].* #5790 defines Int8.* #5901 removes native code for UInt8.modn.* BitVec* #5604 completes BitVec.[getMsbD|getLsbD|msb] for shifts (@luisacicolini).* #5609 adds lemmas for division when denominator is zero (@bollu).* #5620 documents Bitblasting (@bollu)* #5623 moves BitVec.udiv/umod/sdiv/smod after add/sub/mul/lt (@tobiasgrosser).* #5645 defines udiv normal form to be /, resp. umod and % (@bollu).* #5646 adds lemmas about arithmetic inequalities (@bollu).* #5680 expands relationship with toFin (@tobiasgrosser).* #5691 adds BitVec.(getMSbD, msb)_(add, sub) and BitVec.getLsbD_sub (@luisacicolini).* #5712 adds BitVec.[udiv|umod]_[zero|one|self] (@tobiasgrosser).* #5718 adds BitVec.sdiv_[zero|one|self] (@tobiasgrosser).* #5721 adds BitVec.(msb, getMsbD, getLsbD)_(neg, abs) (@luisacicolini).* #5772 adds BitVec.toInt_sub, simplifies BitVec.toInt_neg (@tobiasgrosser).* #5778 prove that intMin the smallest signed bitvector (@alexkeizer).* #5851 adds (msb, getMsbD)_twoPow (@luisacicolini).* #5858 adds BitVec.[zero_ushiftRight|zero_sshiftRight|zero_mul] and cleans up BVDecide (@tobiasgrosser).* #5865 adds BitVec.(msb, getMsbD)_concat (@luisacicolini).* #5881 adds Hashable (BitVec n)* String/Char* #5728 upstreams String.dropPrefix?.* #5745 changes String.dropPrefix? signature.* #5747 adds Hashable Char instance* HashMap* #5880 adds interim implementation of HashMap.modify/alter* Other* #5704 removes @[simp] from Option.isSome_eq_isSome.* #5739 upstreams material on Prod.* #5740 moves Antisymm to Std.Antisymm.* #5741 upstreams basic material on Sum.* #5756 adds Nat.log2_two_pow (@spinylobster).* #5892 removes duplicated ForIn instances.* #5900 removes @[simp] from Sum.forall and Sum.exists.* #5812 removes redundant Decidable assumptions (@FR-vdash-bot).Compiler, runtime, and FFI* #5685 fixes help message flags, removes the -f flag and adds the -g flag (@James-Oswald).* #5930 adds --short-version (-V) option to display short version (@juhp).* #5144 switches all 64-bit platforms over to consistently using GMP for bignum arithmetic.* #5753 raises the minimum supported Windows version to Windows 10 1903 (released May 2019).Lake* #5715 changes lake new math to use autoImplicit false (@eric-wieser).* #5688 makes Lake not create core aliases in the Lake namespace.* #5924 adds a text option for buildFile* utilities.* #5789 makes lake init not git init when inside git work tree (@haoxins).* #5684 has Lake update a package's lean-toolchain file on lake update if it finds the package's direct dependencies use a newer compatible toolchain. To skip this step, use the --keep-toolchain CLI option. (See breaking changes.)* #6218 makes Lake no longer automatically fetch GitHub cloud releases if the package build directory is already present (mirroring the behavior of the Reservoir cache). This prevents the cache from clobbering existing prebuilt artifacts. Users can still manually fetch the cache and clobber the build directory by running lake build <pkg>:release.* #6231 improves the errors Lake produces when it fails to fetch a dependency from Reservoir. If the package is not indexed, it will produce a suggestion about how to require it from GitHub.Documentation* #5617 fixes MSYS2 build instructions.* #5725 points out that OfScientific is called with raw literals (@eric-wieser).* #5794 adds a stub for application ellipsis notation (@eric-wieser).Breaking changes* The syntax for providing arguments to deriving handlers has been removed, which was not used by any major Lean projects in the ecosystem. As a result, the  applyDerivingHandlers now takes one fewer argument, registerDerivingHandlerWithArgs is now simply registerDerivingHandler, DerivingHandler no longer includes the unused parameter, and DerivingHandlerNoArgs has been deprecated. To migrate code, delete the unused none argument and use registerDerivingHandler and DerivingHandler. (#5265)* The minimum supported Windows version has been raised to Windows 10 1903, released May 2019. (#5753)* The --lean CLI option for lake was removed. Use the LEAN environment variable instead. (#5684)* The inductive ... :=, structure ... :=, and class ... := syntaxes have been deprecated in favor of the ... where variants. The old syntax produces a warning, controlled by the linter.deprecated option. (#5542)* The generated tactic configuration elaborators now land in TacticM to make use of the current recovery state. Commands that wish to elaborate configurations should now use declare_command_config_elab instead of declare_config_elab to get an elaborator landing in CommandElabM. Syntaxes should migrate to optConfig instead of (config)?, but the elaborators are reverse compatible. (#5883)\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.14.0 (2024-12-02)","id":"/releases/v4.14.0/#release-v4___14___0"},"/releases/v4.23.0/#release-v4___23___0":{"contents":"For this release, 610 changes landed. In addition to the 95 feature additions and 139 fixes listed below there were 61 refactoring changes, 12 documentation improvements, 71 performance improvements, and 232 other changes.HighlightsLean v4.23.0 release brings significant performance improvements, better error messages,\nand a plethora of bug fixes, refinements, and consolidations in grind, the compiler, and other components of Lean.In terms of user experience, noteworthy new features are:* Improved 'Go to Definition' navigation (#9040)* Using 'Go to Definition' on a type class projection now extracts\nthe specific instances that were involved and provides them as locations\nto jump to. For example, using 'Go to Definition' on the toString of\ntoString 0 yields results for ToString.toString and ToString Nat.* Using 'Go to Definition' on a macro that produces syntax with type\nclass projections now also extracts the specific instances that were\ninvolved and provides them as locations to jump to. For example, using\n'Go to Definition' on the + of 1 + 1 yields results for\nHAdd.hAdd, HAdd α α α and Add Nat.* Using 'Go to Declaration' now provides all the results of 'Go to\nDefinition' in addition to the elaborator and the parser that were\ninvolved. For example, using 'Go to Declaration' on the + of 1 + 1\nyields results for HAdd.hAdd, HAdd α α α, Add Nat,\nmacro_rules | `($x + $y) => ... and infixl:65 \" + \" => HAdd.hAdd.* Using 'Go to Type Definition' on a value with a type that contains\nmultiple constants now provides 'Go to Definition' results for each\nconstant. For example, using 'Go to Type Definition' on x for x : Array Nat\nyields results for Array and Nat.* Interactive code-action hints for errors:* for \"invalid named argument\" error, suggest valid argument names (#9315)* for \"invalid case name\" error, suggest valid case names (#9316)* for \"fields missing\" error in structure instances, suggest to insert all the missing fields (#9317)You can try all of these in the Lean playground.Breaking Changes* #9800 improves the delta deriving handler, giving it the ability to\nprocess definitions with binders, as well as the ability to recursively\nunfold definitions. Breaking change: the\nderived instance's name uses the instance command's name generator,\nand the new instance is added to the current namespace.* #9040 improves the 'Go to Definition' UX.\nBreaking change: InfoTree.hoverableInfoAt? has been generalized to\nInfoTree.hoverableInfoAtM? and now takes a general filter argument\ninstead of several boolean flags, as was the case before.* #9594 optimizes Lean.Name.toString, giving a 10% instruction\nbenefit.Crucially this is a breaking change as the old Lean.Name.toString\nmethod used to support a method for identifying tokens. This method is\nnow available as Lean.Name.toStringWithToken in order to allow for\nspecialization of the (highly common) toString code path which sets\nthis function to just return false.* #9729 introduces a canonical way to endow a type with an order\nstructure. Breaking changes:* The requirements of the lt_of_le_of_lt/le_trans lemmas for\nVector, List and Array are simplified. They now require an\nIsLinearOrder instance. The new requirements are logically equivalent\nto the old ones, but the IsLinearOrder instance is not automatically\ninferred from the smaller typeclasses.* Hypotheses of type Std.Total (¬ · < · : α → α → Prop) are replaced\nwith the equivalent class Std.Asymm (· < · : α → α → Prop). Breakage\nshould be limited because there is now an instance that derives the\nlatter from the former.* In Init.Data.List.MinMax, multiple theorem signatures are modified,\nreplacing explicit parameters for antisymmetry, totality, min_ex_or\netc. with corresponding instance parameters.Language* #6732 adds support for the clear tactic in conversion mode.* #8666 adjusts the experimental module system to not import the IR of\nnon-meta declarations. It does this by replacing such IR with opaque\nforeign declarations on export and adjusting the new compiler\naccordingly.* #8842 fixes the bug that collectAxioms didn't collect axioms\nreferenced by other axioms. One of the results of this bug is that\naxioms collected from a theorem proved by native_decide may not\ninclude Lean.trustCompiler.* #9015 makes isDefEq detect more stuck definitional equalities\ninvolving smart unfoldings. Specifically, if t =?= defn ?m and defn\nmatches on its argument, then this equality is stuck on ?m. Prior to\nthis change, we would not see this dependency and simply return false.* #9084 adds binrel% macros for != and ≠ notation defined in\nInit.Core. This allows the elaborator to insert coercions on both\nsides of the relation, instead of committing to the type on the left\nhand side.* #9090 fixes a bug in whnfCore where it would fail to reduce\napplications of recursors/auxiliary defs.* #9097 ensures that mspec uses the configured transparency setting\nand makes mvcgen use default transparency when calling mspec.* #9099 improves the “expected type mismatch” error message by omitting\nthe type's types when they are defeq, and putting them into separate\nlines when not.* #9103 prevents truncation of panic! messages containing null bytes.* #9108 fixes an issue that may have caused inline expressions in\nmessages to be unnecessarily rendered on a separate line.* #9113 improves the grind doc string and tries to make it more\napproachable to new user.* #9130 fixes unexpected occurrences of the Grind.offset gadget in\nground patterns. See new test* #9131 adds a usedLetOnly parameter to LocalContext.mkLambda and\nLocalContext.mkForall, to parallel the MetavarContext versions.* #9133 adds support for a^(m+n) in the grind normalizer.* #9143 removes a rather ugly hack in the module system, exposing the\nbodies of theorems whose type mention WellFounded.* #9146 adds \"safe\" polynomial operations to grind ring. The use the\nusual combinators: withIncRecDepth and checkSystem.* #9149 generalizes the a^(m+n) grind normalizer to any semirings.\nExample:variable [Field R]\n\n* #9150 adds a missing case in the toPoly function used in grind.* #9153 improves the linarith markVars, and ensures it does not\nproduce spurious issue messages.* #9168 resolves a defeq diamond, which caused a problem in Mathlib:import Mathlib\n\n* #9172 fixes a bug at matchEqBwdPat. The type may contain pattern\nvariables.* #9173 fixes an incompatibility in the experimental module system when\ntrying to combine wellfounded recursion with public exposed definitions.* #9176 makes mvcgen split ifs rather than applying specifications.\nDoing so fixes a bug reported by Rish.* #9182 tries to improve the E-matching pattern inference for grind.\nThat said, we still need better tools for annotating and maintaining\ngrind annotations in libraries.* #9184 fixes stealing of ⇓ syntax by the new notation for total\npostconditions by demoting it to non-builtin syntax and scoping it to\nStd.Do.* #9191 lets the equation compiler unfold abstracted proofs again if\nthey would otherwise hide recursive calls.This fixes #8939.* #9193 fixes the unexpected kernel projection issue reported by issue\n#9187* #9194 makes the logic and tactics of Std.Do universe polymorphic, at\nthe cost of a few definitional properties arising from the switch from\nProp to ULift Prop in the base case SPred [].* #9196 implements forall normalization using a simproc instead of\nrewriting rules in grind. This is the first part of the PR, after\nupdate stage0, we must remove the normalization theorems.* #9200 implements exists normalization using a simproc instead of\nrewriting rules in grind. This is the first part of the PR, after update\nstage0, we must remove the normalization theorems.* #9202 extends the Eq simproc used in grind. It covers more cases\nnow. It also adds 3 reducible declarations to the list of declarations\nto unfold.* #9214 implements support for local and scoped grind_pattern\ncommands.* #9225 improves the congr tactic so that it can handle function\napplications with fewer arguments than the arity of the head function.\nThis also fixes a bug where congr could not make progress with\nSet-valued functions in Mathlib, since Set was being unfolded and\nmaking such functions have an apparently higher arity.* #9228 improves the startup time for grind ring by generating the\nrequired type classes on demand. This optimization is particularly\nrelevant for files that make hundreds of calls to grind, such as\ntests/lean/run/grind_bitvec2.lean. For example, before this change,\ngrind spent 6.87 seconds synthesizing type classes, compared to 3.92\nseconds after this PR.* #9241 ensures that the type class instances used to implement the\nToInt adapter (in grind cutsat) are generated on demand.* #9244 improves the instance generation in the grind linarith module.* #9251 demotes the builtin elaborators for Std.Do.PostCond.total and\nStd.Do.Triple into macros, following the DefEq improvements of #9015.* #9267 optimizes support for Decidable instances in grind. Because\nDecidable is a subsingleton, the canonicalizer no longer wastes time\nnormalizing such instances, a significant performance bottleneck in\nbenchmarks like grind_bitvec2.lean. In addition, the\ncongruence-closure module now handles Decidable instances, and can\nsolve examples such as:example (p q : Prop) (h₁ : Decidable p) (h₂ : Decidable (p ∧ q)) : (p ↔ q) → h₁ ≍ h₂ := by\n  grind\n* #9271 improves the performance of the formula normalizer used in\ngrind.* #9287 rewords the \"application type mismatch\" error message so that\nthe argument and its type precede the application expression.* #9293 replaces the reduceCtorEq simproc used in grind by a much\nmore efficient one. The default one use in simp is just overhead\nbecause the grind normalizer is already normalizing arithmetic.\nIn a separate PR, we will push performance improvements to the default\nreduceCtorEq.* #9305 uses the mkCongrSimpForConst? API in simp to reduce the\nnumber of times the same congruence lemma is generated. Before this PR,\ngrind would spend 1.5s creating congruence theorems during\nnormalization in the grind_bitvec2.lean benchmark. It now spends\n0.6s. should make an even bigger difference after we merge\n#9300.* #9315 adds improves the \"invalid named argument\" error message in\nfunction applications and match patterns by providing clickable hints\nwith valid argument names. In so doing, it also fixes an issue where\nthis error message would erroneously flag valid match-pattern argument\nnames.* #9316 adds clickable code-action hints to the \"invalid case name\"\nerror message.* #9317 adds to the \"fields missing\" error message for structure\ninstance notation a code-action hint that inserts all missing fields.* #9324 improves the functions for checking whether two terms are\ndisequal in grind* #9325 optimizes the Boolean disequality propagator used in grind.* #9326 optimizes propagateEqUp used in grind.* #9340 modifies the encoding from Nat to Int used in grind cutsat. It is simpler, more extensible, and similar to the generic\nToInt. After update stage0, we will be able to delete the leftovers.* #9351 optimizes the grind preprocessing steps by skipping steps when\nthe term is already present in the hash-consing table.* #9358 adds support for generating lattice-theoretic (co)induction\nproof principles for predicates defined via mutual blocks using\ninductive_fixpoint/coinductive_fixpoint constructs.* #9367 implements a minor optimization to the grind preprocessor.* #9369 optimizes the grind preprocessor by skipping unnecessary steps\nwhen possible.* #9371 fixes an issue that caused some deriving handlers to fail when\nthe name of the type being declared matched that of a declaration in an\nopen namespace.* #9372 fixes a performance issue that occurs when generating equation\nlemmas for functions that use match-expressions containing several\nliterals. This issue was exposed by #9322 and arises from a combination\nof factors:1. Literal values are compiled into a chain of dependent if-then-else\nexpressions.2. Dependent if-then-else expressions are significantly more expensive\nto simplify than regular ones.3. The split tactic selects a target, splits it, and then invokes\nsimp on the resulting subgoals. Moreover, simp traverses the entire\ngoal bottom-up and does not stop after reaching the target.* #9385 replaces the isDefEq test in the simpEq simproc used in\ngrind. It is too expensive.* #9386 improves a confusing error message that occurred when attempting\nto project from a zero-field structure.* #9387 adds a hint to the \"invalid projection\" message suggesting the\ncorrect nested projection for expressions of the form t.n where t is\na tuple and n > 2.* #9395 fixes a bug at mkCongrSimpCore?. It fixes the issue reported\nby @joehendrix at #9388.\nThe fix is just commit: afc4ba617fe2ca5828e0e252558d893d7791d56b. The\nrest of the PR is just cleaning up the file.* #9398 avoids the expensive inferType call in simpArith. It also\ncleans up some of the code and removes anti-patterns.* #9408 implements a simple optimization: dependent implications are no\nlonger treated as E-matching theorems in grind. In\ngrind_bitvec2.lean, this change saves around 3 seconds, as many\ndependent implications are generated. Example: ∀ (h : i + 1 ≤ w), x.abs.getLsbD i = x.abs[i]\n* #9414 increases the number of cases where isArrowProposition returns\na result other than .undef. This function is used to implement the\nisProof predicate, which is invoked on every subterm visited by\nsimp.* #9421 fixes a bug that caused error explanations to \"steal\" the\nInfoview's container in the Lean web editor.* #9423 updates the formatting of, and adds explanations for, \"unknown\nidentifier\" errors as well as \"failed to infer type\" errors for binders\nand definitions.* #9424 improves the error messages produced by the split tactic,\nincluding suggesting syntax fixes and related tactics with which it\nmight be confused.* #9443 makes cdot function expansion take hygiene information into\naccount, fixing \"parenthesis capturing\" errors that can make erroneous\ncdots trigger cdot expansion in conjunction with macros. For example,\ngivenmacro \"baz% \" t:term : term => `(1 + ($t))\nit used to be that baz% · would expand to 1 + fun x => x, but now\nthe parentheses in ($t) do not capture the cdot. We also fix an\noversight where cdot function expansion ignored the fact that type\nascriptions and tuples were supposed to delimit expansion, and also now\nthe quotation prechecker ignores the identifier in hygieneInfo. (#9491\nadded the hygiene information to the parenthesis and cdot syntaxes.)* #9447 ensures that mvcgen not only tries to close stateful subgoals\nby assumption, but also pure Lean goals.* #9448 addresses the lean crash (stack overflow) with nested induction\nand the generation of the SizeOf spec lemmas, reported at #9018.* #9451 adds support in the mintro tactic for introducing let/have\nbinders in stateful targets, akin to intro. This is useful when\nspecifications introduce such let bindings.* #9454 introduces tactic mleave that leaves the SPred proof mode by\neta expanding through its abstractions and applying some mild\nsimplifications. This is useful to apply automation such as grind\nafterwards.* #9464 makes PProdN.reduceProjs also look for projection functions.\nPreviously, all redexes were created by the functions in PProdN, which\nused primitive projections. But with mkAdmProj the projection\nfunctions creep in via the types of the admissible_pprod_fst theorem.\nSo let's just reduce both of them.* #9472 fixes another issue at the congr_simp theorems that was\naffecting Mathlib. Many thanks to Johan Commelin for creating the mwe.* #9476 fixes the bridge between Nat and Int in grind cutsat.* #9479 improves the evalInt? function, which is used to evaluate\nconfiguration parameters from the ToInt type class. also adds\na new evalNat? function for handling the IsCharP type class, and\nintroduces a configuration option:grind (exp := <num>)\nThis option controls the maximum exponent size considered during\nexpression evaluation. Previously, evalInt? used whnf, which could\nrun out of stack space when reducing terms such as 2^1024.* #9480 adds a feature where structure constructors can override the\ninferred binder kinds of the type's parameters. In the following, the\n(p) binder on toLp causes p to be an explicit parameter to\nWithLp.toLp:structure WithLp (p : Nat) (V : Type) where toLp (p) ::\n  ofLp : V\nThis reflects the syntax of the feature added in #7742 for overriding\nbinder kinds of structure projections. Similarly, only those parameters\nin the header of the structure may be updated; it is an error to try\nto update binder kinds of parameters included via variable.* #9481 fixes a kernel type mismatch that occurs when using grind on\ngoals containing non-standard OfNat.ofNat terms. For example, in issue\n#9477, the 0 in the theorem range_lower has the form:(@OfNat.ofNat\n  (Std.PRange.Bound (Std.PRange.RangeShape.lower (Std.PRange.RangeShape.mk Std.PRange.BoundShape.closed Std.PRange.BoundShape.open)) Nat)\n  (nat_lit 0)\n  (instOfNatNat (nat_lit 0)))\ninstead of the more standard form:(@OfNat.ofNat\n  Nat\n  (nat_lit 0)\n  (instOfNatNat (nat_lit 0)))\n* #9487 fixes an incorrect proof term constructed by grind linarith,\nas reported in #9485.* #9491 adds hygiene info to paren/tuple/typeAscription syntaxes, which\nwill be used to implement hygienic cdot function expansion in #9443.* #9496 improves the error messages produced by the set_option\ncommand.* #9500 adds a HPow \\a Int \\a field to Lean.Grind.Field, and\nsufficient axioms to connect it to the operations, so that in future we\ncan reason about exponents in grind. To avoid collisions, we also move\nthe HPow \\a Nat \\a field in Semiring from the extends clause to a\nfield. Finally, we add some failing tests about normalizing exponents.* #9505 removes vestigial syntax definitions in\nLean.Elab.Tactic.Do.VCGen that when imported undefine the mvcgen\ntactic. Now it should be possible to import Mathlib and still use\nmvcgen.* #9506 adds a few missing simp lemmas to mleave.* #9507 makes mvcgen mintro let/have bindings.* #9509 surfaces kernel diagnostics even in example.* #9512 makes mframe, mspec and mvcgen respect hygiene.\nInaccessible stateful hypotheses can now be named with a new tactic\nmrename_i that works analogously to rename_i.* #9516 ensures that private declarations made inaccessible by the\nmodule system are noted in the relevant error messages* #9518 ensures previous \"is marked as private\" messages are still\ntriggered under the module system* #9520 corrects the changes to Lean.Grind.Field made in #9500.* #9522 uses withAbstractAtoms to prevent the kernel from accidentally\nreducing the atoms in the arith normlizer while typechecking. This PR\nalso sets implicitDefEqProofs := false in the grind normalizer* #9532 generalizes Process.output and Process.run with an optional\nString argument that can be piped to stdin.* #9551 fixes the error position for the \"dependent elimination failed\"\nerror for the cases tactic.* #9553 fixes a bug introduced in #7830 where if the cursor is at the\nindicated positionexample (as bs : List Nat) : (as.append bs).length = as.length + bs.length := by\n  induction as with\n  | nil => -- cursor\n  | cons b bs ih =>\nthen the Infoview would show \"no goals\" rather than the nil goal. The\nPR also fixes a separate bug where placing the cursor on the next line\nafter the induction/cases tactics like in  induction as with\n  | nil => sorry\n  | cons b bs ih => sorry\n  I -- < cursor\nwould report the original goal in the goal list. Furthermore, there are\nnumerous improvements to error recovery (including allGoals-type logic\nfor pre-tactics) and the visible tactic states when there are errors.\nAdds Tactic.throwOrLogErrorAt/Tactic.throwOrLogError for throwing or\nlogging errors depending on the recovery state.* #9571 restores the feature where in induction/cases for Nat, the\nzero and succ labels are hoverable. This was added in #1660, but\nbroken in #3629 and #3655 when custom eliminators were added. In\ngeneral, if a custom eliminator T.elim for an inductive type T has\nan alternative foo, and T.foo is a constant, then the foo label\nwill have T.foo hover information.* #9574 adds the option abstractProof to control whether grind\nautomatically creates an auxiliary theorem for the generated proof or\nnot.* #9575 optimizes the proof terms generated by grind ring. For\nexample, before this PR, the kernel took 2.22 seconds (on a M4 Max) to\ntype-check the proof in the benchmark grind_ring_5.lean; it now takes\nonly 0.63 seconds.* #9578 fixes an issue in grind's disequality proof construction. The\nissue occurs when an equality is merged with the False equivalence\nclass, but it is not the root of its congruence class, and its\ncongruence root has not yet been merged into the False equivalence\nclass yet.* #9579 ensures ite and dite are to selected as E-matching patterns.\nThey are bad patterns because the then/else branches are only\ninternalized after grind decided whether the condition is\nTrue/False.* #9592 updates the styling and wording of error messages produced in\ninductive type declarations and anonymous constructor notation,\nincluding hints for inferable constructor visibility updates.* #9595 improves the error message displayed when writing an invalid\nprojection on a free variable of function type.* #9606 adds notes to the deprecation warning when the replacement\nconstant has a different type, visibility, and/or namespace.* #9625 improves trace messages around wf_preprocess.* #9628 introduces a mutual_induct variant of the generated\n(co)induction proof principle for mutually defined (co)inductive\npredicates. Unlike the standard (co)induction principle (which projects\nconclusions separately for each predicate), mutual_induct produces a\nconjunction of all conclusions.* #9633 updates various error messages produced by or associated with\nbuilt-in tactics and adapts their formatting to current conventions.* #9634 modifies dot identifier notation so that (.a : T) resolves\nT.a with respect to the root namespace, like for generalized field\nnotation. This lets the notation refer to private names, follow aliases,\nand also use open namespaces. The LSP completions are improved to follow\nhow dot ident notation is resolved, but it doesn't yet take into account\naliases or open namespaces.* #9637 improves the readability of the \"maximum universe level offset\nexceeded\" error message.* #9646 uses a more simple approach to proving the unfolding theorem for\na function defined by well-founded recursion. Instead of looping a bunch\nof tactics, it uses simp in single-pass mode to (try to) exactly undo\nthe changes done in WF.Fix, using a dedicated theorem that pushes the\nextra argument in for each matcher (or casesOn).* #9649 fixes an issue where a macro unfolding to multiple commands\nwould not be accepted inside mutual* #9653 adds error explanations for two common errors caused by large\nelimination from Prop. To support this functionality, \"nested\" named\nerrors thrown by sub-tactics are now able to display their error code\nand explanation.* #9666 addresses an outstanding feature in the module system to\nautomatically mark let rec and where helper declarations as private\nunless they are defined in a public context such as under @[expose].* #9670 add constructors .intCast k and .natCast k to\nCommRing.Expr. We need them because terms such as Nat.cast (R := α) 1 and (1 : α) are not definitionally equal. This is pervaise in\nMathlib for the numerals 0 and 1.* #9671 fixes support for SMul.smul in grind ring. SMul.smul\napplications are now normalized. Example:example (x : BitVec 2) : x - 2 • x + x = 0 := by\n  grind\n* #9675 adds support for Fin.val in grind cutsat. Examples:example (a b : Fin 2) (n : Nat) : n = 1 → ↑(a + b) ≠ n → a ≠ 0 → b = 0 → False := by\n  grind\n\n* #9676 adds normalizers for nonstandard arithmetic instances. The types\nNat and Int have built-in support in grind, which uses the\nstandard instances for these types and assumes they are the ones in use.\nHowever, users may define their own alternative instances that are\ndefinitionally equal to the standard ones. normalizes such\ninstances using simprocs. This situation actually occurs in Mathlib.\nExample:class Distrib (R : Type _) extends Mul R where\n\n* #9679 produces a warning for redundant grind arguments.* #9682 fixes a regression introduced by an optimization in the\nunfoldReducible step used by the grind normalizer. It also ensures\nthat projection functions are not reduced, as they are folded in a later\nstep.* #9686 applies clear to implementation detail local declarations\nduring the grind preprocessing steps.* #9699 adds propagation rules for functions that take singleton types.\nThis feature is useful for discharging verification conditions produced\nby mvcgen. For example:example (h : (fun (_ : Unit) => x + 1) = (fun _ => 1 + y)) : x = y := by\n  grind\n* #9700 fixes assertion violations when checkInvariants is enabled in\ngrind* #9701 switches to a non-verloading local Std.Do.Triple notation in\nSpecLemmas.lean to work around a stage2 build failure.* #9702 fixes an issue in the match elaborator where pattern variables\nlike __x would not have the kind implDetail in the local context.\nNow kindOfBinderName is LocalDeclKind.ofBinderName.* #9704 optimizes the proof terms produced by grind cutsat. Additional\nperformance improvements will be merged later.* #9706 combines Poly.combine_k and Poly.mul_k steps used in the\ngrind cutsat proof terms.* #9710 improves some of the proof terms produced by grind ring and\ngrind cutsat.* #9714 adds a version of CommRing.Expr.toPoly optimized for kernel\nreduction. We use this function not only to implement grind ring, but\nalso to interface the ring module with grind cutsat.* #9716 moves the validation of cross-package import all to Lake and\nthe syntax validation of import keywords (public, meta, and all)\nto the two import parsers.* #9728 fixes #9724* #9735 extends the propagation rule implemented in #9699 to constant\nfunctions.* #9736 implements the option mvcgen +jp to employ a slightly lossy VC\nencoding for join points that prevents exponential VC blowup incurred by\nnaïve splitting on control flow.* #9754 make mleave apply at * and improve its simp set in order to\ndischarge some more trivialities (#9581).* #9755 implements a mrevert ∀n tactic that \"eta-reduces\" the stateful\ngoal and is adjoint to mintro ∀x1 ... ∀xn.* #9767 fixes equality congruence proof terms contructed by grind.* #9772 fixes a bug in the projection over constructor propagator used\nin grind. It may construct type incorrect terms when a equivalence\nclass contains heterogeneous equalities.* #9776 combines the simplification and unfold-reducible-constants steps\nin grind to ensure that no potential normalization steps are missed.* #9780 extends the test suite for grind working category theory, to\nhelp debug outstanding problems in Mathlib.* #9781 ensures that mvcgen is hygienic. The goals it generates should\nnow introduce all locals inaccessibly.* #9785 splits out an implementation detail of\nMVarId.getMVarDependencies into a top-level function. Aesop was relying\non the function defined in the where clause, which is no longer possible\nafter #9759.* #9798 introduces Lean.realizeValue, a new metaprogramming API for\nparallelism-aware caching of MetaM computations* #9800 improves the delta deriving handler, giving it the ability to\nprocess definitions with binders, as well as the ability to recursively\nunfold definitions. Furthermore, delta deriving now tries all explicit\nnon-out-param arguments to a class, and it can handle \"mixin\" instance\narguments. The deriving syntax has been changed to accept general\nterms, which makes it possible to derive specific instances with for\nexample deriving OfNat _ 1 or deriving Module R. The class is\nallowed to be a pi type, to add additional hypotheses; here is a Mathlib\nexample:def Sym (α : Type*) (n : ℕ) :=\n  { s : Multiset α // Multiset.card s = n }\nderiving [DecidableEq α] → DecidableEq _\nThis underscore stands for where Sym α n may be inserted, which is\nnecessary when → is used. The deriving instance command can refer to\nscoped variables when delta deriving as well. Breaking change: the\nderived instance's name uses the instance command's name generator,\nand the new instance is added to the current namespace.* #9804 allows trailing comma in the argument list of simp?, dsimp?,\nsimpa, etc... Previously, it was only allowed in the non ? variants\nof simp, dsimp, simp_all.* #9807 adds Std.List.Zipper.pref to the simp set of mleave.* #9809 adds a script for analyzing grind E-matching annotations. The\nscript is useful for detecting matching loops. We plan to add\nuser-facing commands for running the script in the future.* #9813 fixes an unexpected bound variable panic in unfoldReducible\nused in grind.* #9814 skips the normalizeLevels preprocessing step in grind when\nit is not needed.* #9818 fixes a bug where the DecidableEq deriving handler did not\ntake universe levels into account for enumerations (inductive types\nwhose constructors all have no fields). Closes #9541.* #9819 makes the unsafe t term create an auxiliary opaque\ndeclaration, rather than an auxiliary definition with opaque\nreducibility hints.* #9831 adds a delaborator for Std.Range notation.* #9832 adds simp lemmas SPred.entails_<n> to replace\nSPred.entails_cons which was disfunctional as a simp lemma due to\n#8074.* #9833 works around a DefEq bug in mspec involving delayed\nassignments.* #9834 fixes a bug in mvcgen triggered by excess state arguments to\nthe wp application, a situation which arises when working with\nStateT primitives.* #9841 migrates the ⌜p⌝ notation for embedding pure p : Prop into SPred\nσs to expand into a simple, first-order expression SPred.pure p that can\nbe supported by e-matching in grind.* #9843 makes mvcgen produce deterministic case labels for the\ngenerated VCs. Invariants will be named inv<n> and every other VC will\nbe named vc<n>.*, where the * part serves as a loose indication of\nprovenance.* #9852 removes the inShareCommon quick filter used in grind\npreprocessing steps. shareCommon is no longer used only for fully\npreprocessed terms.* #9853 adds Nat and Int numeral normalizers in grind.* #9857 ensures grind can E-match patterns containing universe\npolymorphic ground sub-patterns. For example, givenset_option pp.universes true in\nattribute [grind?] Id.run_pure\nthe patternId.run_pure.{u_1}: [@Id.run.{u_1} #1 (@pure.{u_1, u_1} `[Id.{u_1}] `[Applicative.toPure.{u_1, u_1}] _ #0)]\ncontains two nested universe polymorphic ground patterns* Id.{u_1}* Applicative.toPure.{u_1, u_1}* #9860 fixes E-matching theorem activation in grind.* #9865 adds improved support for proof-by-reflection to the kernel type\nchecker. It addresses the performance issue exposed by #9854. With this\nPR, whenever the kernel type-checks an argument of the form eagerReduce _, it enters \"eager-reduction\" mode. In this mode, the kernel is more\neager to reduce terms. The new eagerReduce _ hint is often used to\nwrap Eq.refl true. The new hint should not negatively impact any\nexisting Lean package.* #9867 fixes a nondeterministic behavior in grind ring.* #9880 ensures a local forall is activated at most once per pattern in\ngrind.* #9883 refines the warning message for redundant grind arguments. It\nis not based on the actual inferred pattern instead provided kind.* #9885 is initially motivated by noticing Lean.Grind.Preorder.toLE\nappearing in long Mathlib typeclass searches; this change will prevent\nthese searches. These changes are also helpful preparation for\npotentially dropping the custom Lean.Grind.* typeclasses, and unifying\nwith the new typeclasses introduced in #9729.\n\nLibrary* #7450 implements Nat.dfold, a dependent analogue of Nat.fold.* #9096 removes some unnecessary Decidable* instance arguments by\nusing lemmas in the Classical namespace instead of the Decidable\nnamespace.* #9121 allows grind to case on the universe variants of Prod.* #9129 fixes simp lemmas about boolean equalities to say (!x) = y\ninstead of (!decide (x = y)) = true* #9135 allows the result type of forIn, foldM and fold on pure\niterators (Iter) to be in a different universe than the iterators.* #9142 changes Fin.reverseInduction from using well-founded recursion\nto using let rec, which makes it have better definitional equality.\nCo-authored by @digama0. See the test below:namespace Fin\n\n* #9145 fixes two typos.* #9176 makes mvcgen split ifs rather than applying specifications.\nDoing so fixes a bug reported by Rish.* #9194 makes the logic and tactics of Std.Do universe polymorphic, at\nthe cost of a few definitional properties arising from the switch from\nProp to ULift Prop in the base case SPred [].* #9249 adds theorem BitVec.clzAuxRec_eq_clzAuxRec_of_getLsbD_false as\na more general statement than BitVec.clzAuxRec_eq_clzAuxRec_of_le,\nreplacing the latter in the bitblaster too.* #9260 removes uses of Lean.RBMap in Lean itself.* #9263 fixes toISO8601String to produce a string that conforms to the\nISO 8601 format specification. The previous implementation separated the\nminutes and seconds fragments with a . instead of a : and included\ntimezone offsets without the hour and minute fragments separated by a\n:.* #9285 removes the unnecessary requirement of BEq α for\nArray.any_push, Array.any_push', Array.all_push, Array.all_push'\nas well as Vector.any_push and Vector.all_push.* #9301 adds a simp and a grind annotation on Zipper-related\ntheorems to improve reasoning about Std.Do invariants.* #9391 replaces the proof of the simplification lemma Nat.zero_mod\nwith\nrfl since it is, by design, a definitional equality. This solves an\nissue\nwhereby the lemma could not be used by the simplifier when in 'dsimp'\nmode.* #9441 fixes the behavior of String.prev, aligning the runtime\nimplementation with the reference implementation. In particular, the\nfollowing statements hold now:* (s.prev p).byteIdx is at least p.byteIdx - 4 and at most\np.byteIdx - 1* s.prev 0 = 0* s.prev is monotone* #9449 fix the behavior of String.next on the scalar boundary (2 ^ 63 - 1 on 64-bit platforms).* #9451 adds support in the mintro tactic for introducing let/have\nbinders in stateful targets, akin to intro. This is useful when\nspecifications introduce such let bindings.* #9454 introduces tactic mleave that leaves the SPred proof mode by\neta expanding through its abstractions and applying some mild\nsimplifications. This is useful to apply automation such as grind\nafterwards.* #9504 adds a few more *.by_wp \"adequacy theorems\" that allows to\nprove facts about programs in ReaderM and ExceptM using the Std.Do\nframework.* #9528 adds List.zipWithM and Array.zipWithM.* #9529 upstreams some helper instances for NameSet from Batteries.* #9538 adds two lemmas related to Iter.toArray.* #9577 adds lemmas about UIntX.toBitVec and UIntX.ofBitVec and ^.* #9586 adds componentwise algebraic operations on Vector α n, and\nrelevant instances.* #9594 optimizes Lean.Name.toString, giving a 10% instruction\nbenefit.* #9609 adds @[grind =] to Prod.lex_def. Note that omega has\nspecial handling for Prod.Lex, and this is needed for grind's cutsat\nmodule to achieve parity.* #9616 introduces checks to make sure that the IO functions produce\nerrors when inputs contain NUL bytes (instead of ignoring everything\nafter the first NUL byte).* #9620 adds the separate directions of\nList.pairwise_iff_forall_sublist as named lemmas.* #9621 renames Xor to XorOp, to match AndOp, etc.* #9622 adds a missing lemma about List.sum, and a grind annotation.* #9701 switches to a non-verloading local Std.Do.Triple notation in\nSpecLemmas.lean to work around a stage2 build failure.* #9721 tags more SInt and UInt lemmas with int_toBitVec so\nbv_decide\ncan handle casts between them and negation.* #9729 introduces a canonical way to endow a type with an order\nstructure. The basic operations (LE, LT, Min, Max, and in later\nPRs BEq, Ord, ...) and any higher-level property (a preorder, a\npartial order, a linear order etc.) are then put in relation to LE as\nnecessary. The PR provides IsLinearOrder instances for many core types\nand updates the signatures of some lemmas.* #9732 re-implements IO.waitAny using Lean instead of C++. This is to\nreduce the size and\ncomplexity of task_manager in order to ease future refactorings.* #9736 implements the option mvcgen +jp to employ a slightly lossy VC\nencoding for join points that prevents exponential VC blowup incurred by\nnaïve splitting on control flow.* #9739 removes the instance attribute from lexOrd that was\naccidentally applied in Std.Classes.Ord.Basic.* #9757 adds grind annotations for key Std.Do.SPred lemmas.* #9782 corrects the Inhabited instance of StdGen to use a valid\ninitial state for the pseudorandom number generator. Previously, the\ndefault generator had the property that Prod.snd (stdNext default) = default, so it would produce only constant sequences.* #9787 adds a simp lemma PostCond.const_apply.* #9792 adds @[expose] to two definitions with where clauses that\nBatteries proves theorems about.* #9799 fixes the #9410 issue.* #9805 improves the API for invariants and postconditions and as such\nintroduces a few breaking changes to the existing pre-release API around\nStd.Do. It also adds Markus Himmel's pairsSumToZero example as a\ntest case.* #9832 adds simp lemmas SPred.entails_<n> to replace\nSPred.entails_cons which was disfunctional as a simp lemma due to\n#8074.* #9841 migrates the ⌜p⌝ notation for embedding pure p : Prop into SPred\nσs to expand into a simple, first-order expression SPred.pure p that can\nbe supported by e-matching in grind.* #9848 adds @[spec] lemmas for forIn and forIn' at Std.PRange.* #9850 add a delaborator for Std.PRange notation.Compiler* #8691 ensures that the state is reverted when compilation using the\nnew compiler fails. This is especially important for noncomputable\nsections where the compiler might generate half-compiled functions which\nmay then be erroneously used while compiling other functions.* #9134 changes ToIR to call lowerEnumToScalarType? with\nConstructorVal.induct rather than the name of the constructor itself.\nThis was an oversight in some refactoring of code in the new compiler\nbefore landing it. It should not affect runtime of compiled code (due to\nthe extra tagging/untagging being optimized by LLVM), but it does make\nIR for the interpreter slightly more efficient.* #9144 adds support for representing more inductive as enums,\nsummarized up as extending support to those that fail to be enums\nbecause of parameters or irrelevant fields. While this is nice to have,\nit is actually motivated by correctness of a future desired\noptimization. The existing type representation is unsound if we\nimplement object/tobject distinction between values guaranteed to be\nan object pointer and those that may also be a tagged scalar. In\nparticular, types like the ones added in this PR's tests would have all\nof their constructors encoded via tagged values, but under the natural\nextension of the existing rules of type representation they would be\nconsidered object rather than tobject.* #9154 tightens the IR typing rules around applications of closures.\nWhen re-reading some code, I realized that the code in mkPartialApp\nhas a clear typo—.object and type should be swapped. However, it\ndoesn't matter, because later IR passes smooth out the mismatch here. It\nmakes more sense to be strict up-front and require applications of\nclosures to always return an .object.* #9159 enforces the non-inlining of _override impls in the base phase\nof LCNF compilation. The current situation allows for constructor/cases\nmismatches to be exposed to the simplifier, which triggers an assertion\nfailure. The reason this didn't show up sooner for Expr is that Expr has\na custom extern implementation of its computed field getter.* #9177 makes the pullInstances pass avoid pulling any instance\nexpressions containing erased propositions, because we don't correctly\nrepresent the dependencies that remain after erasure.* #9198 changes the compiler's specialization analysis to consider\nhigher-order params that are rebundled in a way that only changes their\nProp arguments to be fixed. This means that they get specialized with\na mere @[specialize], rather than the compiler having to opt-in to\nmore aggressive parameter-specific specialization.* #9207 makes the offending declaration clickable in the error message\nproduced when something should be marked noncomputable.* #9209 changes the getLiteral helper function of elimDeadBranches\nto correctly handle inductives with constructors. This function is not\nused as often as it could be, which makes this issue rare to hit outside\nof targeted test cases.* #9218 makes the LCNF elimDeadBranches pass handle unsafe decls a bit\nmore carefully. Now the result of an unsafe decl will only become ⊤ if\nthere is value flow from a recursive call.* #9221 removes code that has the false assumption that LCNF local vars\ncan occur in types. There are other comments in ElimDead.lean\nasserting that this is not possible, so this must have been a change\nearly in the development of the new compiler.* #9224 changes the toMono pass to consider the type of an application\nand erase all arguments corresponding to erased params. This enables a\nlightweight form of relevance analysis by changing the mono type of a\ndecl. I would have liked to unify this with the behavior for\nconstructors, but my attempt to give constructors the same behavior in\n#9222 (which was in preparation for this PR) had a minor performance\nregression that is really incidental to the change. Still, I decided to\nhold off on it for the time being. In the future, we can hopefully\nextend this to constructors, extern decls, etc.* #9266 adds support for .mdata in LCNF mono types (and then drops it\nat the IR type level instead). This better matches the behavior of\nextern decls in the C++ code of the old compiler, which is still being\nused to create extern decls at the moment and will soon be replaced.* #9268 moves the implementation of lean_add_extern/addExtern from\nC++ into Lean. I believe is the last C++ helper function from the\nlibrary/compiler directory being relied upon by the new compiler. I put\nit into its own file and duplicated some code because this function\nneeds to execute in CoreM, whereas the other IR functions live in their\nown monad stack. After the C++ compiler is removed, we can move the IR\nfunctions into CoreM.* #9275 removes the old compiler written in C++.* #9279 fixes the compiler.extract_closed option after migrating it to\nLean (and adds a test so it would be caught in the future).* #9310 fixes IR constructor argument lowering to correctly handle an\nirrelevant argument being passed for a relevant parameter in all cases.\nThis happened because constructor argument lowering (incompletely)\nreimplemented general LCNF-to-IR argument lowering, and the fix is to\njust adopt the generic helper functions. This is probably due to an\nincomplete refactoring when the new compiler was still on a branch.* #9336 changes the implementation of trace.Compiler.result to use the\ndecls as they are provided rather than looking them up in the LCNF mono\nenvironment extension, which was seemingly done to save the trouble of\nre-normalizing fvar IDs before printing the decl. This means that the\n._closed decls created by the extractClosed pass will now be\nincluded in the output, which was definitely confusing before if you\ndidn't know what was happening.* #9344 correctly populates the xType field of the IR.FnBody.case\nconstructor. It turns out that there is no obvious consequence for this\nbeing incorrect, because it is conservatively recomputed by the Boxing\npass.* #9393 fixes an unsafe trick where a sentinel for a hash table of Exprs\n(keyed by pointer) is created by constructing a value whose runtime\nrepresentation can never be a valid Expr. The value chosen for this\npurpose was Unit.unit, which violates the inference that Expr has no\nscalar constructors. Instead, we change this to a freshly allocated Unit\n× Unit value.* #9411 adds support for compilation of casesOn for subsingletons. We\nrely on the elaborator's type checking to restrict this to inductives in\nProp that can actually eliminate into Type n. This does not yet\ncover other recursors of these types (or of inductives not in Prop for\nthat matter).* #9703 changes the LCNF elimDeadBranches pass so that it considers\nall non-Nat literal types to be ⊤. It turns out that fixing this to\ncorrectly handle all of these types with the current abstract value\nrepresentation is surprisingly nontrivial, and it's better to just land\nthe fix first.* #9720 removes an error which implicitly assumes that the sort of type\ndependency between erased types present in the test being added can not\noccur. It would be difficult to refine the error using only the\ninformation present in LCNF types, and it is of very little ongoing\nvalue (I don't recall it ever finding an actual problem), so it makes\nmore sense to delete it.* #9827 changes the lowering of Quot.lcInv (the compiler-internal form\nof Quot.lift) in toMono to support overapplication.* #9847 adds a check for reursive decls in this bespoke inlining path,\nwhich fixes a regression from the old compiler.* #9864 adds new variants of Array.getInternal and\nArray.get!Internal that return their argument borrowed, i.e. without a\nreference count increment. These are intended for use by the compiler in\ncases where it can determine that the array will continue to hold a\nvalid reference to the element for the returned value's lifetime.Pretty Printing* #8391 adds an unexpander for Vector.mk that unexpands Vector.mk #[...] _ to #v[...].-- previously:\n#check #v[1, 2, 3] -- { toArray := #[1, 2, 3], size_toArray := ⋯ } : Vector Nat 3\n-- now:\n#check #v[1, 2, 3] -- #v[1, 2, 3] : Vector Nat 3\n* #9475 fixes the way some syntaxes are pretty printed due to missing\nwhitespace advice.* #9494 fixes an issue that caused some error messages to attempt to\ndisplay hovers for nonexistent identifiers.* #9555 allows hints in message data to specify custom preview spans\nthat extend beyond the edit region specified by the code action.* #9778 modifies the pretty printing of anonymous metavariables to use\nthe index rather than the internal name. This leads to smaller numerical\nsuffixes in ?m.123 since the indices are numbered within a given\nmetavariable context rather than across an entire file, hence each\ncommand gets its own numbering. This does not yet affect pretty printing\nof universe level metavariables.Documentation* #9093 adds a missing docstring for ToFormat.toFormat.* #9152 fixes an obsolete docstring for registerDerivingHandler* #9593 simplifies the docstring for propext significantly.Server* #9040 improves the 'Go to Definition' UX, specifically:* Using 'Go to Definition' on a type class projection will now extract\nthe specific instances that were involved and provide them as locations\nto jump to. For example, using 'Go to Definition' on the toString of\ntoString 0 will yield results for ToString.toString and ToString Nat.* Using 'Go to Definition' on a macro that produces syntax with type\nclass projections will now also extract the specific instances that were\ninvolved and provide them as locations to jump to. For example, using\n'Go to Definition' on the + of 1 + 1 will yield results for\nHAdd.hAdd, HAdd α α α and Add Nat.* Using 'Go to Declaration' will now provide all the results of 'Go to\nDefinition' in addition to the elaborator and the parser that were\ninvolved. For example, using 'Go to Declaration' on the + of 1 + 1\nwill yield results for HAdd.hAdd, HAdd α α α, Add Nat,\nmacro_rules | `($x + $y) => ... and infixl:65 \" + \" => HAdd.hAdd.* Using 'Go to Type Definition' on a value with a type that contains\nmultiple constants will now provide 'Go to Definition' results for each\nconstant. For example, using 'Go to Type Definition' on x for x : Array Nat will yield results for Array and Nat.* #9163 disables the use of the header produced by lake setup-file in\nthe server for now. It will be re-enabled once Lake takes into account\nthe header given by the server when processing workspace modules.\nWithout that, setup-file header can produce odd behavior when the file\non disk and in an editor disagree on whether the file participates in\nthe module system.* #9563 performs some micro optimizations on fuzzy matching for a ~20%\ninstructions win.* #9784 ensures the editor progress bar better reflects the actual\nprogress of parallel elaboration.Lake* #9053 updates Lake to resolve the .olean files for transitive\nimports for Lean through the modules field of lean --setup. This\nenables means the Lean can now directly use the .olean files from the\nLake cache without needed to locate them at a specific hierarchical\npath.* #9101 fixes a bug introduce by #9081 where the source file was dropped\nfrom the module input trace and some entries were dropped from the\nmodule job log.* #9162 changes the key Lake uses for the ,ir artifact in the content\nhash data structure to r, maintaining the convention of single\ncharacter key names.* #9165 fixes two issues with Lake's process of creating static\narchives.* #9332 changes the dependency cloning mechanism in lake so the log\nmessage that lake is cloning a\ndependency occurs before it is finished doing so (and instead before it\nstarts). This has been a\nhuge source of confusion for users that don't understand why lake seems\nto be just stuck for no\nreason when setting up a new project, the output now is:λ lake +lean4 new math math\ninfo: downloading mathlib `lean-toolchain` file\ninfo: math: no previous manifest, creating one from scratch\ninfo: leanprover-community/mathlib: cloning https://github.com/leanprover-community/mathlib4\n<hang>\ninfo: leanprover-community/mathlib: checking out revision 'cd11c28c6a0d514a41dd7be9a862a9c8815f8599'\n* #9434 changes the Lake local cache infrastructure to restore\nexecutables and shared and static libraries from the cache. This means\nthey keep their expected names, which some use cases still rely on.* #9435 adds the libPrefixOnWindows package and library configuration\noption. When enabled, Lake will prefix static and shared libraries with\nlib on Windows (i.e., the same way it does on Unix).* #9436 adds the number of jobs run to the final message Lake produces\non a successfully run of lake build.* #9478 adds proper Lake support for meta import. Module IR is now\ntracked in traces and in the pre-resolved modules Lake passes to lean --setup.* #9525 fixes Lake's handling of a module system import all.\nPreviously, Lake treated import all the same a non-module import,\nimporting all private data in the transitive import tree. Lake now\ndistinguishes the two, with import all M just importing the private\ndata of M. The direct private imports of M are followed, but they\nare not promoted.* #9559 changes lake setup-file to use the server-provided header for\nworkspace modules.* #9604 restricts Lake's production of thin archives to only the Windows\ncore build (i.e., bootstrap = true). The unbundled ar usually used\nfor core builds on macOS does not support --thin, so we avoid using it\nunless necessary.* #9677 adds build times to each build step of the build monitor (under\n-v or in CI) and delays exiting on a --no-build until after the\nbuild monitor finishes. Thus, a --no-build failure will now report\nwhich targets blocked Lake by needing a rebuild.* #9697 fixes the handling in lake lean and lake setup-file of a\nlibrary source file with multiple dots (e.g., src/Foo.Bar.lean).* #9698 adjusts the formatting type classes for lake query to no\nlonger require both a text and JSON form and instead work with any\ncombination of the two. The classes have also been renamed. In addition,\nthe query formatting of a text module header has been improved to only\nproduce valid headers.Other* #9106 fixes undefined symbol: lean::mpz::divexact(lean::mpz const&, lean::mpz const&) when building without LEAN_USE_GMP* #9114 further improves release automation, automatically incorporating\nmaterial from nightly-testing and bump/v4.X.0 branches in the bump\nPRs to downstream repositories.* #9659 fixes compatibility of the trace.profiler.output option with\nnewer versions of Firefox Profiler\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.23.0 (2025-09-15)","id":"/releases/v4.23.0/#release-v4___23___0"}});