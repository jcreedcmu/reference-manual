window.docContents[82].resolve({"/Basic-Types/Characters/#Char":{"contents":"Characters are represented by the type Char, which may be any Unicode scalar value.\nWhile strings are UTF-8-encoded arrays of bytes, characters are represented by full 32-bit values.\nLean provides special syntax for character literals.\n\n\n\n\n\n\n\n\n\n","context":"Lean Reference\u0009Basic Types","header":"19.7. Characters","id":"/Basic-Types/Characters/#Char"},"/Basic-Types/Floating-Point-Numbers/#The-Lean-Language-Reference--Basic-Types--Floating-Point-Numbers--API-Reference--Conversions":{"contents":"Bit-for-bit conversion to UInt64. Interprets a Float as a UInt64, ignoring the numeric value\nand treating the Float's bit pattern as a UInt64.Floats and UInt64s have the same endianness on all supported platforms. IEEE 754 very precisely\nspecifies the bit layout of floats.This function is distinct from Float.toUInt64, which attempts to preserve the numeric value rather\nthan reinterpreting the bit pattern.\n\nBit-for-bit conversion to UInt32. Interprets a Float32 as a UInt32, ignoring the numeric value\nand treating the Float32's bit pattern as a UInt32.Float32s and UInt32s have the same endianness on all supported platforms. IEEE 754 very\nprecisely specifies the bit layout of floats.This function is distinct from Float.toUInt32, which attempts to preserve the numeric value rather\nthan reinterpreting the bit pattern.This function does not reduce in the kernel.\n\nBit-for-bit conversion from UInt64. Interprets a UInt64 as a Float, ignoring the numeric value\nand treating the UInt64's bit pattern as a Float.Floats and UInt64s have the same endianness on all supported platforms. IEEE 754 very precisely\nspecifies the bit layout of floats.This function does not reduce in the kernel.\n\nBit-for-bit conversion from UInt32. Interprets a UInt32 as a Float32, ignoring the numeric\nvalue and treating the UInt32's bit pattern as a Float32.Float32s and UInt32s have the same endianness on all supported platforms. IEEE 754 very\nprecisely specifies the bit layout of floats.This function does not reduce in the kernel.\n\nConverts a 64-bit floating-point number to a 32-bit floating-point number.\nThis may lose precision.This function does not reduce in the kernel.\n\nConverts a 32-bit floating-point number to a 64-bit floating-point number.This function does not reduce in the kernel.\n\nConverts a floating-point number to a string.This function does not reduce in the kernel.\n\nConverts a floating-point number to a string.This function does not reduce in the kernel.\n\nConverts a floating-point number to an 8-bit unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt8. Returns 0 if the Float is negative or NaN, and returns the\nlargest UInt8 value (i.e. UInt8.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 8-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int8 (including Inf), returns the maximum value of\nInt8 (i.e. Int8.maxValue). If it is smaller than the minimum value for Int8 (including -Inf),\nreturns the minimum value of Int8 (i.e. Int8.minValue). If it is NaN, returns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to an 8-bit unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt8. Returns 0 if the Float32 is negative or NaN, and returns the\nlargest UInt8 value (i.e. UInt8.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 8-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int8 (including Inf), returns the maximum value of\nInt8 (i.e. Int8.maxValue). If it is smaller than the minimum value for Int8 (including -Inf),\nreturns the minimum value of Int8 (i.e. Int8.minValue). If it is NaN, returns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 16-bit unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt16. Returns 0 if the Float is negative or NaN, and returns the\nlargest UInt16 value (i.e. UInt16.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 16-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int16 (including Inf), returns the maximum\nvalue of Int16 (i.e. Int16.maxValue). If it is smaller than the minimum value for Int16\n(including -Inf), returns the minimum value of Int16 (i.e. Int16.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 16-bit unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt16. Returns 0 if the Float32 is negative or NaN, and returns\nthe largest UInt16 value (i.e. UInt16.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 16-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int16 (including Inf), returns the maximum\nvalue of Int16 (i.e. Int16.maxValue). If it is smaller than the minimum value for Int16\n(including -Inf), returns the minimum value of Int16 (i.e. Int16.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 32-bit unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt32. Returns 0 if the Float is negative or NaN, and returns the\nlargest UInt32 value (i.e. UInt32.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 32-bit unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt32. Returns 0 if the Float32 is negative or NaN, and returns\nthe largest UInt32 value (i.e. UInt32.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 32-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int32 (including Inf), returns the maximum\nvalue of Int32 (i.e. Int32.maxValue). If it is smaller than the minimum value for Int32\n(including -Inf), returns the minimum value of Int32 (i.e. Int32.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 32-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int32 (including Inf), returns the maximum\nvalue of Int32 (i.e. Int32.maxValue). If it is smaller than the minimum value for Int32\n(including -Inf), returns the minimum value of Int32 (i.e. Int32.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 64-bit unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt64. Returns 0 if the Float is negative or NaN, and returns the\nlargest UInt64 value (i.e. UInt64.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 64-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int64 (including Inf), returns the maximum\nvalue of Int64 (i.e. Int64.maxValue). If it is smaller than the minimum value for Int64\n(including -Inf), returns the minimum value of Int64 (i.e. Int64.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 64-bit unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt64. Returns 0 if the Float32 is negative or NaN, and returns\nthe largest UInt64 value (i.e. UInt64.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 64-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int64 (including Inf), returns the maximum\nvalue of Int64 (i.e. Int64.maxValue). If it is smaller than the minimum value for Int64\n(including -Inf), returns the minimum value of Int64 (i.e. Int64.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a word-sized unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of USize. Returns 0 if the Float is negative or NaN, and returns the\nlargest USize value (i.e. USize.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nConverts a floating-point number to a word-sized unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of USize. Returns 0 if the Float32 is negative or NaN, and returns the\nlargest USize value (i.e. USize.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest word-sized signed integer, rounding towards zero.If the Float is larger than the maximum value for ISize (including Inf), returns the maximum\nvalue of ISize (i.e. ISize.maxValue). If it is smaller than the minimum value for ISize\n(including -Inf), returns the minimum value of ISize (i.e. ISize.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest word-sized signed integer, rounding towards zero.If the Float is larger than the maximum value for ISize (including Inf), returns the maximum\nvalue of ISize (i.e. ISize.maxValue). If it is smaller than the minimum value for ISize\n(including -Inf), returns the minimum value of ISize (i.e. ISize.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts an integer into the closest-possible 64-bit floating-point number, or positive or negative\ninfinite floating-point value if the range of Float is exceeded.\n\nConverts an integer into the closest-possible 32-bit floating-point number, or positive or negative\ninfinite floating-point value if the range of Float32 is exceeded.\n\nConverts a natural number into the closest-possible 64-bit floating-point number, or an infinite\nfloating-point value if the range of Float is exceeded.\n\nConverts a natural number into the closest-possible 32-bit floating-point number, or an infinite\nfloating-point value if the range of Float32 is exceeded.\n\nComputes m * 2^e.\n\nComputes m * 2^e.\n\nSplits the given float x into a significand/exponent pair (s, i) such that x = s * 2^i where\ns ∈ (-1;-0.5] ∪ [0.5; 1). Returns an undefined value if x is not finite.This function does not reduce in the kernel. It is implemented in compiled code by the C function\nfrexp.\n\nSplits the given float x into a significand/exponent pair (s, i) such that x = s * 2^i where\ns ∈ (-1;-0.5] ∪ [0.5; 1). Returns an undefined value if x is not finite.This function does not reduce in the kernel. It is implemented in compiled code by the C function\nfrexp.\n\n","context":"Lean Reference\u0009Basic Types\u0009Floating-Point Numbers\u0009API Reference","header":"19.6.2.3. Conversions","id":"/Basic-Types/Floating-Point-Numbers/#The-Lean-Language-Reference--Basic-Types--Floating-Point-Numbers--API-Reference--Conversions"},"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Sets--Creation":{"contents":"Creates a new empty tree set. It is also possible and recommended to\nuse the empty collection notations ∅ and {} to create an empty tree set. simp replaces\nempty with ∅.\n\n","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Tree-Based Sets","header":"19.17.10.1. Creation","id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Sets--Creation"},"/Coercions/Implementation-Details/#coercion-impl-details":{"contents":"Only ordinary coercion insertion uses chaining.\nInserting coercions to a sort or a function uses ordinary instance synthesis.\nSimilarly, dependent coercions are not chained.\n\n\n\n\n\n","context":"Lean Reference\u0009Coercions","header":"12.5. Implementation Details","id":"/Coercions/Implementation-Details/#coercion-impl-details"},"/Error-Explanations/lean___redundantMatchAlt/#The-Lean-Language-Reference--Error-Explanations--lean___redundantMatchAlt--Examples":{"contents":"Incorrect ordering of pattern matchesdef seconds : List (List α) → List α\n  | [] => []\n  | _ :: xss => seconds xss\n  | (_ :: x :: _) :: xss => x :: seconds xss\nRedundant alternative: Any expression matching\n  (head✝ :: x :: tail✝) :: xss\nwill match one of the preceding alternatives\ndef seconds : List (List α) → List α\n  | [] => []\n  | (_ :: x :: _) :: xss => x :: seconds xss\n  | _ :: xss => seconds xss\nSince any expression matching (_ :: x :: _) :: xss will also match _ :: xss, the last\nalternative in the broken implementation is never reached. We resolve this by moving the more\nspecific alternative before the more general one.\n\nUnnecessary fallback clauseexample (p : Nat × Nat) : IO Nat := do\n  let (m, n) := p\n    | return 0\n  return m + n\nRedundant alternative: Any expression matching\n  x✝\nwill match one of the preceding alternatives\nexample (p : Nat × Nat) : IO Nat := do\n  let (m, n) := p\n  return m + n\nHere, the fallback clause serves as a catch-all for all values of p that do not match (m, n).\nHowever, no such values exist, so the fallback clause is unnecessary and can be removed. A similar\nerror arises when using if let pat := e when e will always match pat.\n\nPattern treated as variable, not constructorexample (xs : List Nat) : Bool :=\n  match xs with\n  | nil => false\n  | _ => true\nRedundant alternative: Any expression matching\n  x✝\nwill match one of the preceding alternatives\nexample (xs : List Nat) : Bool :=\n  match xs with\n  | .nil => false\n  | _ => true\nIn the original example, nil is treated as a variable, not as a constructor name, since this\ndefinition is not within the List namespace. Thus, all values of xs will match the first\npattern, rendering the second unused. Notice that the constructor-name-as-variable linter displays a\nwarning at nil, indicating its similarity to a valid constructor name. Using dot-prefix notation,\nas shown in the fixed example, or specifying the full constructor name List.nil achieves the\nintended behavior.\n\n","context":"Lean Reference\u0009Error Explanations\u0009lean.redundantMatchAlt","header":"Examples","id":"/Error-Explanations/lean___redundantMatchAlt/#The-Lean-Language-Reference--Error-Explanations--lean___redundantMatchAlt--Examples"},"/releases/v4.0.0-m1/#release-v4___0___0-m1":{"contents":"The Lean development team is proud to announce the first milestone release of Lean 4. This release is aimed at experimentation with the new features of Lean 4, eventually leading to a full release of 4.0.0 ready for general use.This release is the result of almost three years of work since the release of Lean 3.4.0, reworking, extending, and improving almost all aspects of Lean. More information about Lean 4 can be found in the official documentation as well as in the introductory talk \"An overview of Lean 4\" at Lean Together 2021.Leonardo de Moura & Sebastian UllrichAcknowledgements* Daniel Selsam - type class resolution, feedback, design discussions* Marc Huisinga and Wojciech Nawrocki - Lean Server* Joe Hendrix, Andrew Kent, Rob Dockins, Simon Winwood (Galois Inc) - early adopters, suggestions, feedback* Daan Leijen, Simon Peyton Jones, Nikhil Swamy, Sebastian Graf, Max Wagner - design discussions, feedback, suggestions\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.0.0-m1 (2021-01-04)","id":"/releases/v4.0.0-m1/#release-v4___0___0-m1"}});