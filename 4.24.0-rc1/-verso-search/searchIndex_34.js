window.docContents[34].resolve({"/Basic-Types/Fixed-Precision-Integers/#The-Lean-Language-Reference--Basic-Types--Fixed-Precision-Integers--API-Reference--Conversions--To-Characters":{"contents":"The Char type is a wrapper around UInt32 that requires a proof that the wrapped integer represents a Unicode code point.\nThis predicate is part of the UInt32 API.\n\nA UInt32 denotes a valid Unicode code point if it is less than 0x110000 and it is also not a\nsurrogate code point (the range 0xd800 to 0xdfff inclusive).\n\n","context":"Lean Reference\u0009Basic Types\u0009Fixed-Precision Integers\u0009API Reference\u0009Conversions","header":"19.4.4.3.7. To Characters","id":"/Basic-Types/Fixed-Precision-Integers/#The-Lean-Language-Reference--Basic-Types--Fixed-Precision-Integers--API-Reference--Conversions--To-Characters"},"/Basic-Types/Natural-Numbers/#nat-api-gcd-lcm":{"contents":"Computes the greatest common divisor of two natural numbers. The GCD of two natural numbers is the\nlargest natural number that evenly divides both.In particular, the GCD of a number and 0 is the number itself.This reference implementation via the Euclidean algorithm is overridden in both the kernel and the\ncompiler to efficiently evaluate using arbitrary-precision arithmetic. The definition provided here\nis the logical model.Examples:* Nat.gcd 10 15 = 5* Nat.gcd 0 5 = 5* Nat.gcd 7 0 = 7\n\nThe least common multiple of m and n is the smallest natural number that's evenly divisible by\nboth m and n. Returns 0 if either m or n is 0.Examples:* Nat.lcm 9 6 = 18* Nat.lcm 9 3 = 9* Nat.lcm 0 3 = 0* Nat.lcm 3 0 = 0\n\n","context":"Lean Reference\u0009Basic Types\u0009Natural Numbers\u0009API Reference","header":"19.1.4.3. GCD and LCM","id":"/Basic-Types/Natural-Numbers/#nat-api-gcd-lcm"},"/Tactic-Proofs/Tactic-Reference/#tactic-ref-ext":{"contents":"Applies extensionality lemmas that are registered with the @[ext] attribute.* ext pat* applies extensionality theorems as much as possible,\nusing the patterns pat* to introduce the variables in extensionality theorems using rintro.\nFor example, the patterns are used to name the variables introduced by lemmas such as funext.* Without patterns,ext applies extensionality lemmas as much\nas possible but introduces anonymous hypotheses whenever needed.* ext pat* : n applies ext theorems only up to depth n.The ext1 pat* tactic is like ext pat* except that it only applies a single extensionality theorem.Unused patterns will generate warning.\nPatterns that don't match the variables will typically result in the introduction of anonymous hypotheses.\n\next1 pat* is like ext pat* except that it only applies a single extensionality theorem rather\nthan recursively applying as many extensionality theorems as possible.The pat* patterns are processed using the rintro tactic.\nIf no patterns are supplied, then variables are introduced anonymously using the intros tactic.\n\nApply a single extensionality theorem to the current goal.\n\nApply function extensionality and introduce new hypotheses.\nThe tactic funext will keep applying the funext lemma until the goal target is not reducible to  |-  ((fun x => ...) = (fun x => ...))\nThe variant funext h₁ ... hₙ applies funext n times, and uses the given identifiers to name the new hypotheses.\nPatterns can be used like in the intro tactic. Example, given a goal  |-  ((fun x : Nat × Bool => ...) = (fun x => ...))\nfunext (a, b) applies funext once and performs pattern matching on the newly introduced pair.\n\n","context":"Lean Reference\u0009Tactic Proofs\u0009Tactic Reference","header":"13.5.10. Extensionality","id":"/Tactic-Proofs/Tactic-Reference/#tactic-ref-ext"},"/The-Type-System/Inductive-Types/#subsingleton-elimination":{"contents":"Proofs in Lean are computationally irrelevant.\nIn other words, having been provided with some proof of a proposition, it should be impossible for a program to check which proof it has received.\nThis is reflected in the types of recursors for inductively defined propositions or predicates.\nFor these types, if there's more than one potential proof of the theorem then the motive may only return another Prop.\nIf the type is structured such that there's only at most one proof anyway, then the motive may return a type in any universe.\nA proposition that has at most one inhabitant is called a subsingleton.\nRather than obligating users to prove that there's only one possible proof, a conservative syntactic approximation is used to check whether a proposition is a subsingleton.\nPropositions that fulfill both of the following requirements are considered to be subsingletons:\n\n* There is at most one constructor.* Each of the constructor's parameter types is either a Prop, a parameter, or an index.\n\nTrue is a subsingletonTrue is a subsingleton because it has one constructor, and this constructor has no parameters.\nIts recursor has the following signature:True.rec.{u} {motive : True → Sort u}\n  (intro : motive True.intro)\n  (t : True) : motive t\n\n\nFalse is a subsingletonFalse is a subsingleton because it has no constructors.\nIts recursor has the following signature:False.rec.{u} (motive : False → Sort u) (t : False) : motive t\nNote that the motive is an explicit parameter.\nThis is because it is not mentioned in any further parameters' types, so it could not be solved by unification.\n\nAnd is a subsingletonAnd is a subsingleton because it has one constructor, and both of the constructor's parameters' types are propositions.\nIts recursor has the following signature:And.rec.{u} {a b : Prop} {motive : a ∧ b → Sort u}\n  (intro : (left : a) → (right : b) → motive (And.intro left right))\n  (t : a ∧ b) : motive t\n\n\nOr is not a subsingletonOr is not a subsingleton because it has more than one constructor.\nIts recursor has the following signature:Or.rec {a b : Prop} {motive : a ∨ b → Prop}\n  (inl : ∀ (h : a), motive (.inl h))\n  (inr : ∀ (h : b), motive (.inr h))\n  (t : a ∨ b) : motive t\nThe motive's type indicates that Or.rec can only be used to produce proofs.\nA proof of a disjunction can be used to prove something else, but there's no way for a program to inspect which of the two disjuncts was true and used for the proof.\n\nEq is a subsingletonEq is a subsingleton because it has just one constructor, Eq.refl.\nThis constructor instantiates Eq's index with a parameter value, so all arguments are parameters:Eq.refl.{u} {α : Sort u} (x : α) : Eq x x\nIts recursor has the following signature:Eq.rec.{u, v} {α : Sort v} {x : α}\n  {motive : (y : α) → x = y → Sort u}\n  (refl : motive x (.refl x))\n  {y : α} (t : x = y) : motive y t\nThis means that proofs of equality can be used to rewrite the types of non-propositions.\n\n","context":"Lean Reference\u0009Type System\u0009Inductive Types\u0009Logical Model\u0009Recursors\u0009Recursor Types","header":"4.4.3.1.1.1. Subsingleton Elimination","id":"/The-Type-System/Inductive-Types/#subsingleton-elimination"},"/releases/v4.12.0/#release-v4___12___0":{"contents":"Language features, tactics, and metaprograms* bv_decide tactic. This release introduces a new tactic for proving goals involving BitVec and Bool. It reduces the goal to a SAT instance that is refuted by an external solver, and the resulting LRAT proof is checked in Lean. This is used to synthesize a proof of the goal by reflection. As this process uses verified algorithms, proofs generated by this tactic use Lean.ofReduceBool, so this tactic includes the Lean compiler as part of the trusted code base. The external solver CaDiCaL is included with Lean and does not need to be installed separately to make use of bv_decide.For example, we can use bv_decide to verify that a bit twiddling formula leaves at most one bit set:def popcount (x : BitVec 64) : BitVec 64 :=\n  let rec go (x pop : BitVec 64) : Nat → BitVec 64\n    | 0 => pop\n    | n + 1 => go (x >>> 2) (pop + (x &&& 1)) n\n  go x 0 64\n\nexample (x : BitVec 64) : popcount ((x &&& (x - 1)) ^^^ x) ≤ 1 := by\n  simp only [popcount, popcount.go]\n  bv_decide\nWhen the external solver fails to refute the SAT instance generated by bv_decide, it can report a counterexample:/--\nerror: The prover found a counterexample, consider the following assignment:\nx = 0xffffffffffffffff#64\n-/\n#guard_msgs in\nexample (x : BitVec 64) : x < x + 1 := by\n  bv_decide\nSee Lean.Elab.Tactic.BVDecide for a more detailed overview, and look in tests/lean/run/bv_* for examples.#5013, #5074, #5100, #5113, #5137, #5203, #5212, #5220.* simp tactic* #4988 fixes a panic in the reducePow simproc.* #5071 exposes the index option to the dsimp tactic, introduced to simp in #4202.* #5159 fixes a panic at Fin.isValue simproc.* #5167 and #5175 rename the simpCtorEq simproc to reduceCtorEq and makes it optional. (See breaking changes.)* #5187 ensures reduceCtorEq is enabled in the norm_cast tactic.* #5073 modifies the simp debug trace messages to tag with \"dpre\" and \"dpost\" instead of \"pre\" and \"post\" when in definitional rewrite mode. #5054 explains the reduce steps for trace.Debug.Meta.Tactic.simp trace messages.* ext tactic* #4996 reduces default maximum iteration depth from 1000000 to 100.* induction tactic* #5117 fixes a bug where let bindings in minor premises wouldn't be counted correctly.* omega tactic* #5157 fixes a panic.* conv tactic* #5149 improves arg n to handle subsingleton instance arguments.* #5044 upstreams the #time command.* #5079 makes #check and #reduce typecheck the elaborated terms.* Incrementality* #4974 fixes regression where we would not interrupt elaboration of previous document versions.* #5004 fixes a performance regression.* #5001 disables incremental body elaboration in presence of where clauses in declarations.* #5018 enables infotrees on the command line for ilean generation.* #5040 and #5056 improve performance of info trees.* #5090 disables incrementality in the case .. | .. tactic.* #5312 fixes a bug where changing whitespace after the module header could break subsequent commands.* Definitions* #5016 and #5066 add clean_wf tactic to clean up tactic state in decreasing_by. This can be disabled with set_option debug.rawDecreasingByGoal false.* #5055 unifies equational theorems between structural and well-founded recursion.* #5041 allows mutually recursive functions to use different parameter names among the “fixed parameter prefix”* #4154 and #5109 add fine-grained equational lemmas for non-recursive functions. See breaking changes.* #5129 unifies equation lemmas for recursive and non-recursive definitions. The backward.eqns.deepRecursiveSplit option can be set to false to get the old behavior. See breaking changes.* #5141 adds f.eq_unfold lemmas. Now Lean produces the following zoo of rewrite rules:Option.map.eq_1      : Option.map f none = none\nOption.map.eq_2      : Option.map f (some x) = some (f x)\nOption.map.eq_def    : Option.map f p = match o with | none => none | (some x) => some (f x)\nOption.map.eq_unfold : Option.map = fun f p => match o with | none => none | (some x) => some (f x)\nThe f.eq_unfold variant is especially useful to rewrite with rw under binders.* #5136 fixes bugs in recursion over predicates.* Variable inclusion* #5206 documents that include currently only applies to theorems.* Elaboration* #4926 fixes a bug where autoparam errors were associated to an incorrect source position.* #4833 fixes an issue where cdot anonymous functions (e.g. (· + ·)) would not handle ambiguous notation correctly. Numbers the parameters, making this example expand as fun x1 x2 => x1 + x2 rather than fun x x_1 => x + x_1.* #5037 improves strength of the tactic that proves array indexing is in bounds.* #5119 fixes a bug in the tactic that proves indexing is in bounds where it could loop in the presence of mvars.* #5072 makes the structure type clickable in \"not a field of structure\" errors for structure instance notation.* #4717 fixes a bug where mutual inductive commands could create terms that the kernel rejects.* #5142 fixes a bug where variable could fail when mixing binder updates and declarations.* Other fixes or improvements* #5118 changes the definition of the syntheticHole parser so that hovering over _ in ?_ gives the docstring for synthetic holes.* #5173 uses the emoji variant selector for ✅️,❌️,💥️ in messages, improving fonts selection.* #5183 fixes a bug in rename_i where implementation detail hypotheses could be renamed.Language server, widgets, and IDE extensions* #4821 resolves two language server bugs that especially affect Windows users. (1) Editing the header could result in the watchdog not correctly restarting the file worker, which would lead to the file seemingly being processed forever. (2) On an especially slow Windows machine, we found that starting the language server would sometimes not succeed at all. This PR also resolves an issue where we would not correctly emit messages that we received while the file worker is being restarted to the corresponding file worker after the restart.* #5006 updates the user widget manual.* #5193 updates the quickstart guide with the new display name for the Lean 4 extension (\"Lean 4\").* #5185 fixes a bug where over time \"import out of date\" messages would accumulate.* #4900 improves ilean loading performance by about a factor of two. Optimizes the JSON parser and the conversion from JSON to Lean data structures; see PR description for details.* Other fixes or improvements* #5031 localizes an instance in Lsp.Diagnostics.Pretty printing* #4976 introduces @[app_delab], a macro for creating delaborators for particular constants. The @[app_delab ident] syntax resolves ident to its constant name name and then expands to @[delab app.name].* #4982 fixes a bug where the pretty printer assumed structure projections were type correct (such terms can appear in type mismatch errors). Improves hoverability of #print output for structures.* #5218 and #5239 add pp.exprSizes debugging option. When true, each pretty printed expression is prefixed with [size a/b/c], where a is the size without sharing, b is the actual size, and c is the size with the maximum possible sharing.Library* #5020 swaps the parameters to Membership.mem. A purpose of this change is to make set-like CoeSort coercions to refer to the eta-expanded function fun x => Membership.mem s x, which can reduce in many computations. Another is that having the s argument first leads to better discrimination tree keys. (See breaking changes.)* Array* #4970 adds @[ext] attribute to Array.ext.* #4957 deprecates Array.get_modify.* List* #4995 upstreams List.findIdx lemmas.* #5029, #5048 and #5132 add List.Sublist lemmas, some upstreamed. #5077 fixes implicitness in refl/rfl lemma binders.  add List.Sublist theorems.* #5047 upstreams List.Pairwise lemmas.* #5053, #5124, and #5161 add List.find?/findSome?/findIdx? theorems.* #5039 adds List.foldlRecOn and List.foldrRecOn recursion principles to prove things about List.foldl and List.foldr.* #5069 upstreams List.Perm.* #5092 and #5107 add List.mergeSort and a fast @[csimp] implementation.* #5103 makes the simp lemmas for List.subset more aggressive.* #5106 changes the statement of List.getLast?_cons.* #5123 and #5158 add List.range and List.iota lemmas.* #5130 adds List.join lemmas.* #5131 adds List.append lemmas.* #5152 adds List.erase(|P|Idx) lemmas.* #5127 makes miscellaneous lemma updates.* #5153 and #5160 add lemmas about List.attach and List.pmap.* #5164, #5177, and #5215 add List.find? and List.range'/range/iota lemmas.* #5196 adds List.Pairwise_erase and related lemmas.* #5151 and #5163 improve confluence of List simp lemmas. #5105 and #5102 adjust List simp lemmas.* #5178 removes List.getLast_eq_iff_getLast_eq_some as a simp lemma.* #5210 reverses the meaning of List.getElem_drop and List.getElem_drop'.* #5214 moves @[csimp] lemmas earlier where possible.* Nat and Int* #5104 adds Nat.add_left_eq_self and relatives.* #5146 adds missing Nat.and_xor_distrib_(left|right).* #5148 and #5190 improve Nat and Int simp lemma confluence.* #5165 adjusts Int simp lemmas.* #5166 adds Int lemmas relating neg and emod/mod.* #5208 reverses the direction of the Int.toNat_sub simp lemma.* #5209 adds Nat.bitwise lemmas.* #5230 corrects the docstrings for integer division and modulus.* Option* #5128 and #5154 add Option lemmas.* BitVec* #4889 adds sshiftRight bitblasting.* #4981 adds Std.Associative and Std.Commutative instances for BitVec.[and|or|xor].* #4913 enables missingDocs error for BitVec modules.* #4930 makes parameter names for BitVec more consistent.* #5098 adds BitVec.intMin. Introduces boolToPropSimps simp set for converting from boolean to propositional expressions.* #5200 and #5217 rename BitVec.getLsb to BitVec.getLsbD, etc., to bring naming in line with List/Array/etc.* Theorems: #4977, #4951, #4667, #5007, #4997, #5083, #5081, #4392* UInt* #4514 fixes naming convention for UInt lemmas.* Std.HashMap and Std.HashSet* #4943 deprecates variants of hash map query methods. (See breaking changes.)* #4917 switches the library and Lean to Std.HashMap and Std.HashSet almost everywhere.* #4954 deprecates Lean.HashMap and Lean.HashSet.* #5023 cleans up lemma parameters.* Std.Sat (for bv_decide)* #4933 adds definitions of SAT and CNF.* #4953 defines \"and-inverter graphs\" (AIGs) as described in section 3 of Davis-Swords 2013.* Parsec* #4774 generalizes the Parsec library, allowing parsing of iterable data beyond String such as ByteArray. (See breaking changes.)* #5115 moves Lean.Data.Parsec to Std.Internal.Parsec for bootstrappng reasons.* Thunk* #4969 upstreams Thunk.ext.* IO* #4973 modifies IO.FS.lines to handle \\r\\n on all operating systems instead of just on Windows.* #5125 adds createTempFile and withTempFile for creating temporary files that can only be read and written by the current user.* Other fixes or improvements* #4945 adds Array, Bool and Prod utilities from LeanSAT.* #4960 adds Relation.TransGen.trans.* #5012 states WellFoundedRelation Nat using <, not Nat.lt.* #5011 uses ≠ instead of Not (Eq ...) in Fin.ne_of_val_ne.* #5197 upstreams Fin.le_antisymm.* #5042 reduces usage of refine'.* #5101 adds about if-then-else and Option.* #5112 adds basic instances for ULift and PLift.* #5133 and #5168 make fixes from running the simpNF linter over Lean.* #5156 removes a bad simp lemma in omega theory.* #5155 improves confluence of Bool simp lemmas.* #5162 improves confluence of Function.comp simp lemmas.* #5191 improves confluence of if-then-else simp lemmas.* #5147 adds @[elab_as_elim] to Quot.rec, Nat.strongInductionOn and Nat.casesStrongInductionOn, and also renames the latter two to Nat.strongRecOn and Nat.casesStrongRecOn (deprecated in #5179).* #5180 disables some simp lemmas with bad discrimination tree keys.* #5189 cleans up internal simp lemmas that had leaked.* #5198 cleans up allowUnsafeReducibility.* #5229 removes unused lemmas from some simp tactics.* #5199 removes >6 month deprecations.Lean internals* Performance* Some core algorithms have been rewritten in C++ for performance.* #4910 and #4912 reimplement instantiateLevelMVars.* #4915, #4922, and #4931 reimplement instantiateExprMVars, 30% faster on a benchmark.* #4934 has optimizations for the kernel's Expr equality test.* #4990 fixes bug in hashing for the kernel's Expr equality test.* #4935 and #4936 skip some PreDefinition transformations if they are not needed.* #5225 adds caching for visited exprs at CheckAssignmentQuick in ExprDefEq.* #5226 maximizes term sharing at instantiateMVarDeclMVars, used by runTactic.* Diagnostics and profiling* #4923 adds profiling for instantiateMVars in Lean.Elab.MutualDef, which can be a bottleneck there.* #4924 adds diagnostics for large theorems, controlled by the diagnostics.threshold.proofSize option.* #4897 improves display of diagnostic results.* Other fixes or improvements* #4921 cleans up Expr.betaRev.* #4940 fixes tests by not writing directly to stdout, which is unreliable now that elaboration and reporting are executed in separate threads.* #4955 documents that stderrAsMessages is now the default on the command line as well.* #4647 adjusts documentation for building on macOS.* #4987 makes regular mvar assignments take precedence over delayed ones in instantiateMVars. Normally delayed assignment metavariables are never directly assigned, but on errors Lean assigns sorry to unassigned metavariables.* #4967 adds linter name to errors when a linter crashes.* #5043 cleans up command line snapshots logic.* #5067 minimizes some imports.* #5068 generalizes the monad for addMatcherInfo.* f71a1f adds missing test for #5126.* #5201 restores a test.* #3698 fixes a bug where label attributes did not pass on the attribute kind.* Typos: #5080, #5150, #5202Compiler, runtime, and FFI* #3106 moves frontend to new snapshot architecture. Note that Frontend.processCommand and FrontendM are no longer used by Lean core, but they will be preserved.* #4919 adds missing include in runtime for AUTO_THREAD_FINALIZATION feature on Windows.* #4941 adds more LEAN_EXPORTs for Windows.* #4911 improves formatting of CLI help text for the frontend.* #4950 improves file reading and writing.* readBinFile and readFile now only require two system calls (stat + read) instead of one read per 1024 byte chunk.* Handle.getLine and Handle.putStr no longer get tripped up by NUL characters.* #4971 handles the SIGBUS signal when detecting stack overflows.* #5062 avoids overwriting existing signal handlers, like in rust-lang/rust#69685.* #4860 improves workarounds for building on Windows. Splits libleanshared on Windows to avoid symbol limit, removes the LEAN_EXPORT denylist workaround, adds missing LEAN_EXPORTs.* #4952 output panics into Lean's redirected stderr, ensuring panics ARE visible as regular messages in the language server and properly ordered in relation to other messages on the command line.* #4963 links LibUV.Lake* #5030 removes dead code.* #4770 adds additional fields to the package configuration which will be used by Reservoir. See the PR description for details.DevOps/CI* #4914 and #4937 improve the release checklist.* #4925 ignores stale leanpkg tests.* #5003 upgrades actions/cache in CI.* #5010 sets save-always in cache actions in CI.* #5008 adds more libuv search patterns for the speedcenter.* #5009 reduce number of runs in the speedcenter for \"fast\" benchmarks from 10 to 3.* #5014 adjusts lakefile editing to use new git syntax in pr-release workflow.* #5025 has pr-release workflow pass --retry to curl.* #5022 builds MacOS Aarch64 release for PRs by default.* #5045 adds libuv to the required packages heading in macos docs.* #5034 fixes the install name of libleanshared_1 on macOS.* #5051 fixes Windows stage 0.* #5052 fixes 32bit stage 0 builds in CI.* #5057 avoids rebuilding leanmanifest in each build.* #5099 makes restart-on-label workflow also filter by commit SHA.* #4325 adds CaDiCaL.Breaking changes* LibUV is now required to build Lean. This change only affects developers who compile Lean themselves instead of obtaining toolchains via elan. We have updated the official build instructions with information on how to obtain LibUV on our supported platforms. (#4963)* Recursive definitions with a decreasing_by clause that begins with simp_wf may break. Try removing simp_wf or replacing it with simp. (#5016)* The behavior of rw [f] where f is a non-recursive function defined by pattern matching changed.For example, preciously, rw [Option.map] would rewrite Option.map f o to match o with … . Now this rewrite fails because it will use the equational lemmas, and these require constructors – just like for List.map.Remedies:* Split on o before rewriting.* Use rw [Option.map.eq_def], which rewrites any (saturated) application of Option.map.* Use set_option backward.eqns.nonrecursive false when defining the function in question.\n(#4154)* The unified handling of equation lemmas for recursive and non-recursive functions can break existing code, as there now can be extra equational lemmas:* Explicit uses of f.eq_2 might have to be adjusted if the numbering changed.* Uses of rw [f] or simp [f] may no longer apply if they previously matched (and introduced a match statement), when the equational lemmas got more fine-grained.In this case either case analysis on the parameters before rewriting helps, or setting the option backward.eqns.deepRecursiveSplit false while defining the function.(#5129, #5207)* The reduceCtorEq simproc is now optional, and it might need to be included in lists of simp lemmas, like simp only [reduceCtorEq]. This simproc is responsible for reducing equalities of constructors. (#5167)* Nat.strongInductionOn is now Nat.strongRecOn and Nat.caseStrongInductionOn to Nat.caseStrongRecOn. (#5147)* The parameters to Membership.mem have been swapped, which affects all Membership instances. (#5020)* The meanings of List.getElem_drop and List.getElem_drop' have been reversed and the first is now a simp lemma. (#5210)* The Parsec library has moved from Lean.Data.Parsec to Std.Internal.Parsec. The Parsec type is now more general with a parameter for an iterable. Users parsing strings can migrate to Parser in the Std.Internal.Parsec.String namespace, which also includes string-focused parsing combinators. (#4774)* The Lean module has switched from Lean.HashMap and Lean.HashSet to Std.HashMap and Std.HashSet (#4943). Lean.HashMap and Lean.HashSet are now deprecated (#4954) and will be removed in a future release. Users of Lean APIs that interact with hash maps, for example Lean.Environment.const2ModIdx, might encounter minor breakage due to the following changes from Lean.HashMap to Std.HashMap:* query functions use the term get instead of find, (#4943)* the notation map[key] no longer returns an optional value but instead expects a proof that the key is present in the map. The previous behavior is available via the map[key]? notation.\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.12.0 (2024-10-01)","id":"/releases/v4.12.0/#release-v4___12___0"},"/releases/v4.21.0/#release-v4___21___0":{"contents":"For this release, 295 changes landed. In addition to the 100 feature additions and 83 fixes listed below there were 2 refactoring changes, 4 documentation improvements, 6 performance improvements, 2 improvements to the test suite and 98 other changes.Highlights'Unknown identifier' code actions* #7665 and #8180 add\nsupport for code actions that resolve 'Unknown identifier' errors by either importing the missing declaration or by\nchanging the identifier to one from the environment.New Language Features* #8449 and #8516\nupstream and extend the Mathlib clear_value tactic. Given a\nlocal definition x : T := v, the tactic clear_value x replaces it\nwith a hypothesis x : T, or throws an error if the goal does not\ndepend on the value v. The syntax clear_value (h : x = _) creates a\nhypothesis h : x = _ before clearing the value of x. Any expression definitionally equal to x\ncan be used in place of the underscore.\nFurthermore, clear_value * clears all values that can be cleared, or throws an\nerror if none can be cleared.* #8512 adds a value_of% ident term that elaborates to the value of\nthe local or global constant ident. This is useful for creating\ndefinition hypotheses:let x := ... complicated expression ...\nhave hx : x = value_of% x := rfl\n* #8450 adds a feature to the subst tactic so that when x : X := v\nis a local definition, subst x substitutes v for x in the goal and\nremoves x. Previously the tactic would throw an error.* #8037 introduces a noConfusionType construction that’s sub-quadratic\nin size, and reduces faster. The previous noConfusion construction with\ntwo nested match statements is quadratic in size and reduction behavior.\nUsing some helper definitions, a linear size construction is possible.* #8104 makes fun_induction and fun_cases (try to) unfold the\nfunction application of interest in the goal. The old behavior can be\nenabled with set_option tactic.fun_induction.unfolding false. For\nfun_cases this does not work yet when the function’s result type\ndepends on one of the arguments, see issue #8296.* #8171 omits cases from functional induction/cases principles that are\nimplemented by contradiction (or, more generally, False.elim,\nabsurd or `noConfusion). Breaking change in the sense that there are\nfewer goals to prove after using functional induction.* #8106 adds a register_linter_set command for declaring linter sets.\nThe getLinterValue function now checks if the present linter is\ncontained in a set that has been enabled (using the set_option command\nor on the command line).* #8267 makes #guard_msgs to treat trace messages separate from\ninfo, warning and error. It also introduces the ability to say\n#guard_msgs (pass info), like (drop info) so far, and also adds\n(check info) as the explicit form of (info), for completeness.Library Highlights* #8358 introduces a very minimal version of the new iterator library.\nIt comes with list iterators and various consumers, namely toArray,\ntoList, toListRev, ForIn, fold, foldM and drain. All\nconsumers also come in a partial variant that can be used without any\nproofs. This limited version of the iterator library generates decent\ncode, even with the old code generator.* #7352 reworks the simp set around the Id monad, to not elide or\nunfold pure and Id.run* #8313 changes the definition of Vector so it no longer extends\nArray. This prevents Array API from \"leaking through\".Other Highlights* Performance optimizations in dsimp:* #6973 stops dsimp from visiting proof terms, which should make\nsimp and dsimp more efficient.* #7428 adds a dsimp cache to simp. Previously each dsimp call from\nsimp started with a fresh cache. As a result, time spent in simp while\ncompiling Mathlib is reduced by over 45%, giving an overall 8% speedup to\nMathlib compilation.* #8221 adjusts the experimental module system to not export the bodies\nof defs unless opted out by the new attribute @[expose] on the def\nor on a surrounding section.* #8559 and #8560 fix an adversarial\nsoundness attack described  in #8554. The\nattack exploits the fact that assert! no longer aborts execution, and\nthat users can redirect error messages.Language* #6973 stops dsimp from visiting proof terms, which should make\nsimp and dsimp more efficient.* #7428 adds a dsimp cache to simp. Previously each dsimp call from simp started with a fresh cache. As a result, time spent in simp while compiling Mathlib is reduced by over 45%, giving an overall 8% speedup to Mathlib compilation.* #7631 fixes Lean.Level.mkIMaxAux (mk_imax in the kernel) such that\nimax 1 u reduces to u.* #7977 adds basic support for eta-reduction to grind.* #8002 fixes an issue where \"go to definition\" for variables\ngeneralized by the induction and cases tactic did not work. Closes\n#2873.* #8024 adds the --setup option to the lean CLI. It takes a path to\na JSON file containing information about a module's imports and\nconfiguration, superseding that in the module's own file header. This\nwill be used by Lake to specify paths to module artifacts (e.g., oleans\nand ileans) separate from the LEAN_PATH schema.* #8037 introduces a noConfusionType construction that’s sub-quadratic\nin size, and reduces faster.* #8104 makes fun_induction and fun_cases (try to) unfold the\nfunction application of interest in the goal. The old behavior can be\nenabled with set_option tactic.fun_induction.unfolding false. For\nfun_cases this does not work yet when the function’s result type\ndepends on one of the arguments, see issue #8296.* #8106 adds a register_linter_set command for declaring linter sets.\nThe getLinterValue function now checks if the present linter is\ncontained in a set that has been enabled (using the set_option command\nor on the command line).* #8169 makes the whitespace handling in the syntax of omit and\ninclude consistent with variable.* #8171 omits cases from functional induction/cases principles that are\nimplemented by contradiction (or, more generally, False.elim,\nabsurd or `noConfusion). Breaking change in the sense that there are\nfewer goals to prove after using functional induction.* #8196 improves the E-matching pattern inference procedure in grind.\nConsider the following theorem:@[grind →]\ntheorem eq_empty_of_append_eq_empty {xs ys : Array α} (h : xs ++ ys = #[]) : xs = #[] ∧ ys = #[] :=\n  append_eq_empty_iff.mp h\nBefore this PR, grind inferred the following pattern:@HAppend.hAppend _ _ _ _ #2 #1\nNote that this pattern would match any ++ application, even if it had\nnothing to do with arrays. With this PR, the inferred pattern becomes:@HAppend.hAppend (Array #3) (Array _) (Array _) _ #2 #1\nWith the new pattern, the theorem will not be considered by grind for\ngoals that do not involve Arrays.* #8198 fixes an issue in the theory propagation used in grind. When\ntwo equivalence classes are merged, the core may need to push additional\nequalities or disequalities down to the satellite theory solvers (e.g.,\ncutsat, comm ring, etc). Some solvers (e.g. cutsat) assume that\nall of the core’s invariants hold before they receive those facts.\nPropagating immediately therefore risks violating a solver’s\npre-conditions midway through the merge. To decouple the merge operation\nfrom propagation and to keep the core solver-agnostic, this PR adds the\nhelper type PendingTheoryPropagation.* #8208 reduces the need for defeq in frequently used bv_decide rewrite\nby turning them into simprocs that work on structural equality instead.\nAs the intended meaning of these rewrites is to simply work with\nstructural equality anyways this should not change the proving power of\nbv_decide's rewriter but just make it faster on certain very large\nproblems.* #8209 fixes a nondeterminism issue in the grind tactic. It was a bug\nin the model-based theory combination module.* #8221 adjusts the experimental module system to not export the bodies\nof defs unless opted out by the new attribute @[expose] on the def\nor on a surrounding section.* #8224 adds diagnostic information for the commutative ring procedure\nin grind.* #8226 fixes the simplifyBasis procedure in the commutative ring\nprocedure in grind.* #8231 changes the behaviour of apply? so that the sorry it uses to\nclose the goal is non-synthetic. (Recall that correct use of synthetic\nsorries requires that the tactic also generates an error message, which\nwe don't want to do in this situation.) This change defends against the problem reported in #8212.* #8232 fixes elaboration of constants in the rewrite tactic.\npreviously, rw [eq_self] would elaborate eq_self twice, and add it\nto the infotree twice. This would lead to the \"Expected type\" being\ndelaborated with an unknown universe metavariable.* #8241 changes the behavior of the rename tactic to skip over\nimplementation detail hypotheses when finding a hypothesis to rename.* #8254 fixes unintended inlining of ToJson, FromJson, and Repr\ninstances, which was causing exponential compilation times in deriving\nclauses for large structures.* #8259 clarifies the invalid field notation error when projected value\ntype is a metavariable.* #8260 clarifies the invalid dotted identifier notation error when the\ntype is a sort.* #8261 adjusts the error message when apply fails to unify. It is\nclearer about distinguishing the term being applied and the goal, as\nwell as distinguishing the \"conclusion\" of the given term and the term\nitself.* #8262 improves the type-as-hole error message. Type-as-hole error for\ntheorem declarations should not admit the possibility of omitting the\ntype entirely.* #8264 rewords the application type mismatch error message by more\nspecifically mentioning that the problem is with the final argument.\nThis is useful when the same argument is passed to the function multiple\ntimes.* #8267 makes #guard_msgs to treat trace messages separate from\ninfo, warning and error. It also introduce the ability to say\n#guard_msgs (pass info, like (drop info) so far, and also adds\n(check info) as the explicit form of (info), for completeness.* #8270 makes the enum pass of bv_decide handle enum types that are\nuniverse polymorphic.* #8271 changes addPPExplicitToExposeDiff to show universe differences\nand to visit into projections, e.g.:error: tactic 'rfl' failed, the left-hand side\n  (Test.mk (∀ (x : PUnit.{1}), True)).1\nis not definitionally equal to the right-hand side\n  (Test.mk (∀ (x : PUnit.{2}), True)).1\nforinductive Test where\n  | mk (x : Prop)\n\n* #8275 ensures the congruence closure in grind and find non-dependent\narrow congruences. That is, it can apply the implies_congr theorem.* #8276 adds the instances Grind.CommRing (Fin n) and Grind.IsCharP (Fin n) n. New tests:example (x y z : Fin 13) :\n    (x + y + z) ^ 2 = x ^ 2 + y ^ 2 + z ^ 2 + 2 * (x * y + y * z + z * x) := by\n  grind +ring\n\n* #8277 improves the generation of .induct_unfolding by rewriting\nmatch statements more reliably, using the new “congruence equations”\nintroduced in #8284. Fixes #8195.* #8280 the support for arrows in the congruence closure procedure used\nin grind.* #8281 improves the module used to prove auxiliary type cast equalities\nin grind.* #8284 adds a new variant of equations for matchers, namely “congruence\nequations” that generalize the normal matcher equations. They have\nunrestricted left-hand-sides, extra equality assumptions relating the\ndiscriminiants with the patterns and thus prove heterogenous equalities.\nIn that sense they combine congruence with rewriting. They can be used\nto rewrite matcher applications where, due to dependencies, simp would\nfail to rewrite the discriminants, and will be used when producing the\nunfolding induction theorems.* #8285 fixes “declaration has free variables” errors when generating a\nsplitter for a match statement with named patterns. Fixes #8274.* #8299 implements a missing preprocessing step in grind: abstract\nmetavariables in the goal* #8301 unfolds functions in the unfolding induction principle properly\nwhen they use bif (a.k.a. Bool.cond).* #8302 lets cases fail gracefully when the motive has an complex\nargument whose type is dependent type on the targets. While the\ninduction tactic can handle this well, cases does not. This change\nat least gracefully degrades to not instantiating that motive parameter.\nSee issue #8296 for more details on this issue.* #8303 fixes missing occurrences of foldProjs in grind.* #8306 makes it possible for bv_decide to tackle situations for its\nenum type preprocessing where the enums themselves are use in a\ndependently type context (for example inside of a GetElem body) and\nthus not trivially accessible to simp for rewriting. To do this we\ndropGetElem on BitVec as well as dite as early as possible in the\npipeline.* #8321 lets the termination argument inference consider negations of\nNat comparisons. Fixes #8257.* #8323 adds support for bv_decide to understand BitVec.reverse in\nbitblasting.* #8330 improves support for structure extensionality in grind. It now\nuses eta expansion for structures instead of the extensionality theorems\ngenerated by [ext]. Examples:opaque f (a : Nat) : Nat × Bool\n\n* #8338 improves the error messages displayed in inductive\ndeclarations when type parameters are invalid or absent.* #8341 fixes the propagateCtor constraint propagator used in grind.* #8343 splits Lean.Grind.CommRing into 4 typeclasses, for semirings\nand noncommutative rings. This does not yet change the behaviour of\ngrind, which expects to find all 4 typeclasses. Later we will make\nsome generalizations.* #8344 fixes term normalization issues in grind, and the new option\ngrind +etaStruct.* #8347 adds draft typeclasses for grind to process facts about\nordered modules. These interfaces will evolve as the implementation\ndevelops.* #8354 makes sure that when generating the unfolding functional\ninduction theorem, mdata does not get in the way.* #8356 tries harder to clean internals of the argument packing of n-ary\nfunctions from the functional induction theorem, in particular the\nunfolding variant* #8359 improves the functional cases principles, by making a more\neducated guess which function parameters should be targets and which\nshould remain parameters (or be dropped). This simplifies the\nprinciples, and increases the chance that fun_cases can unfold the\nfunction call.* #8361 fixes a bug in the cases tacic introduced in #3188 that arises\nwhen cases (not induction) is used with a non-atomic expression in using\nand the argument indexing gets confused.* #8363 unifies various ways of naming auxiliary declarations in a\nconflict-free way and ensures the method is compatible with diverging\nbranches of elaboration such as parallelism or Aesop-like\nbacktracking+replaying search.* #8365 fixes the transparency mode for ground patterns. This is\nimportant for implicit instances. Here is a mwe for an issue detected\nwhile testing grind in Mathlib.example (a : Nat) : max a a = a := by\n  grind\n\n* #8368 improves the error messages produced by invalid pattern-match\nalternatives and improves parity in error placement between\npattern-matching tactics and elaborators.* #8369 fixes a type error at instantiateTheorem function used in\ngrind. It was failing to instantiate theorems such astheorem getElem_reverse {xs : Array α} {i : Nat} (hi : i < xs.reverse.size)\n    : (xs.reverse)[i] = xs[xs.size - 1 - i]'(by simp at hi; omega)\nin examples such asexample (xs : Array Nat) (w : xs.reverse = xs) (j : Nat) (hj : 0 ≤ j) (hj' : j < xs.size / 2)\n    : xs[j] = xs[xs.size - 1 - j]\ngenerating the issue  [issue] type error constructing proof for Array.getElem_reverse\n      when assigning metavariable ?hi with\n        ‹j < xs.toList.length›\n      has type\n        j < xs.toList.length : Prop\n      but is expected to have type\n        j < xs.reverse.size : Prop\n* #8375 ensures that using mapError to expand an error message uses\naddMessageContext to include the current context, so that expressions\nare rendered correctly. Also adds a preprendError variant with a more\nconvenient argument order for the common cases of\nprepending-and-indenting.* #8403 adds missing monotonicity lemmas for universal quantifiers, that\nare used in defining (co)inductive predicates.* #8410 fixes a case-splitting heuristic in grind and simplifies the\nproof for test grind_palindrome2.lean.* #8412 fixes the markNestedProofs preprocessor used in grind. There\nwas a missing case (e.g., Expr.mdata)* #8413 implements normalization rules that pull universal quantifiers\nacross disjunctions. This is a common normalization step performed by\nfirst-order theorem provers.* #8417 introduces Lean.Grind.Field, proves that a IsCharP 0 field\nsatisfies NoNatZeroDivisors, and sets up some basic (currently\nfailing) tests for grind.* #8426 adds the attribute [grind?]. It is like [grind] but displays\ninferred E-matching patterns. It is a more convinient than writing.\nThanks @kim-em for suggesting this feature.set_option trace.grind.ematch.pattern true\nalso improves some tests, and adds helper function\nENode.isRoot.* #8429 adds Lean.Grind.Ring.IsOrdered, and cleans up the ring/module\ngrind API. These typeclasses are at present unused, but will support\nfuture algorithmic improvements in grind.* #8437 fixes split in the presence of metavariables in the target.* #8438 ensures that grind diagnostics are obtained even when\nmaxHeartbeats is reached.\nalso removes some dead code.* #8440 implements non-chronological backtracking for the grind\ntactic. This feature ensures that grind does not need to process\nirrelevant branches after performing a case-split that is not relevant.\nIt is not just about performance, but also the size of the final proof\nterm. The new test demonstrates this feature in practice.-- In the following test, the first 8 case-splits are irrelevant,\n-- and non-choronological backtracking is used to avoid searching\n-- (2^8 - 1) irrelevant branches\n/--\ntrace:\n[grind.split] p8 ∨ q8, generation: 0\n[grind.split] p7 ∨ q7, generation: 0\n[grind.split] p6 ∨ q6, generation: 0\n[grind.split] p5 ∨ q5, generation: 0\n[grind.split] p4 ∨ q4, generation: 0\n[grind.split] p3 ∨ q3, generation: 0\n[grind.split] p2 ∨ q2, generation: 0\n[grind.split] p1 ∨ q1, generation: 0\n[grind.split] ¬p ∨ ¬q, generation: 0\n-/\n#guard_msgs (trace) in\nset_option trace.grind.split true in\ntheorem ex\n    : p ∨ q →\n      ¬ p ∨ q →\n      p ∨ ¬ q →\n      ¬ p ∨ ¬ q →\n      p1 ∨ q1 →\n      p2 ∨ q2 →\n      p3 ∨ q3 →\n      p4 ∨ q4 →\n      p5 ∨ q5 →\n      p6 ∨ q6 →\n      p7 ∨ q7 →\n      p8 ∨ q8 →\n      False := by\n  grind (splits := 10)\n* #8443 adds the lemmas about ordered rings and ordered fields which\nwill be needed by the new algebraic normalization components of grind.* #8449 upstreams and extends the Mathlib clear_value tactic. Given a\nlocal definition x : T := v, the tactic clear_value x replaces it\nwith a hypothesis x : T, or throws an error if the goal does not\ndepend on the value v. The syntax clear_value x with h creates a\nhypothesis h : x = v before clearing the value of x. Furthermore,\nclear_value * clears all values that can be cleared, or throws an\nerror if none can be cleared.* #8450 adds a feature to the subst tactic so that when x : X := v\nis a local definition, subst x substitutes v for x in the goal and\nremoves x. Previously the tactic would throw an error.* #8466 fixes another instance of the grind issue \"unexpected kernel\nprojection term during internalization\".* #8472 avoids name resolution blocking on the elaboration of a\ntheorem's proof when looking up the theorem name.* #8479 implements hash-consing for grind that takes alpha equivalence\ninto account.* #8483 ensures grind reuses the simp cache between different calls.\nRecall that grind uses simp to normalize terms during\ninternalization.* #8491 fixes the behavior of simp_all? and simp_all?!, aligning\nthem with simp_all and simp_all! respectively.* #8506 implements match-expressions in grind using match\ncongruence equations. The goal is to minimize the number of cast\noperations that need to be inserted, and avoid cast over functions.\nThe new approach support match-expressions of the form match h : ... with ....* #8512 adds a value_of% ident term that elaborates to the value of\nthe local or global constant ident. This is useful for creating\ndefinition hypotheses:let x := ... complicated expression ...\nhave hx : x = value_of% x := rfl\n* #8516 is a followup to #8449 to refine the syntax of clear_value.\nThe syntax for adding equality hypotheses before clearing values is now\nclear_value (h : x = _). Any expression definitionally equal to x\ncan be used in place of the underscore.* #8536 fixes the support for LawfulBEq and BEq in grind.* #8541 ensures that for any nested proof h : p in a goal, we\npropagate that p is true in the grind tactic.* #8542 fixes two inappropriate uses of whnfD in grind. They were\npotential performance foot guns, and were producing unexpected errors\nsince whnfD is not consistently used (and it should not be) in all\nmodules.* #8544 implements support for over-applied ite and dite\napplications in the grind tactic. It adds support for propagation and\ncase-split.* #8549 fixes the hash function used to implement congruence closure in\ngrind. The hash of an Expr must not depend on whether the expression\nhas been internalized or not.* #8564 simplifies the interface between the grind core and the cutsat\nprocedure. Before this PR, core would try to minimize the number of\nnumeric literals that have to be internalized in cutsat. This\noptimization was buggy (see grind_cutsat_zero.lean test), and produced\ncounterintuitive counterexamples.* #8569 adds support for generalized E-match patterns to arbitrary\ntheorems.* #8570 fixes some issues in the E-matching generalized pattern support\nafter the update stage0.* #8572 adds some generalized Option theorems for grind . The avoid\ncasts operations during E-matching.* #8576 sets ring := true by default in grind. It also fixes a bug\nin the reification procedure, and improves the term internalization in\nthe ring and cutsat modules.Library* #7352 reworks the simp set around the Id monad, to not elide or\nunfold pure and Id.run* #7995 adds a verification of Array.qsort properties, trying to use\ngrind and fun_induction where possible.\nCurrently this is in the tests/ folder, but once grind is ready for\nproduction use we will move it out into the library.* #8182 adds ofList_eq_insertMany_empty lemmas for all the hash/tree\nmap types, with the exception of\nStd.HashSet.Raw.ofList_eq_insertMany_empty.* #8188 takes the existing getElem_map statements for HashMap\nvariants (also getElem?, getElem!, and getD statements), adds a\nprime to their name and an explanatory comment, and replaces the\nunprimed statement with a simpler statement that is only true with\nLawfulBEq present. The original statements which were simp lemmas are\nnow low priority simp lemmas, so the nicer statements should fire when\nLawfulBEq is available.* #8202 adds an inference that was repeatedly needed when proving\nBitVec.msb_sdiv, and is the symmetric version of\nBitVec.one_eq_zero_iff* #8206 shows that negating a bitvector created from a natural number\nequals creating a bitvector from the the negative of that number (as an\ninteger).* #8216 completes adding @[grind] annotations for Option lemmas, and\nincidentally fills in some Option API gaps/defects.* #8218 continues adding @[grind] attributes for List/Array/Vector,\nparticularly to the lemmas involving the toList/toArray functions.* #8246 add @[grind] annotations for HashMap and variants.* #8272 adds lemmas about the length and use of []? on results of\nList.intersperse.* #8291 changes the statements of Fin lemmas to use [NeZero n] (i : Fin n) rather than (i : Fin (n+1)) where possible.* #8298 adds various Option lemmas and defines Option.filterM for\napplicative functors.* #8313 changes the definition of Vector so it no longer extends\nArray. This prevents Array API from \"leaking through\".* #8315 splits Std.Classes.Ord into Std.Classes.Ord.Basic (with few\nimports) and Std.Classes.Ord.SInt and Std.Classes.Ord.Vector. These\nchanges avoid importing Init.Data.BitVec.Lemmas unnecessarily into\nvarious basic files.\nAs the new import-only file Std.Classes.Ord imports all three of\nthese, end-users are not affected.* #8318 is follow-up to #8272, combining the conditional lemmas for\ngetElem_intersperse into a single lemma with an if on the RHS.* #8327 adds @[grind] annotations to the generic\ngetElem?_eq_none_iff, isSome_getElem?, and get_getElem?.* #8328 adds the @[grind =] attribute to all contains_iff_mem\nlemmas.* #8331 improves the docstring for PlainDateTime.now and its variants.* #8346 adds some missing lemmas about consequences of\npositivity/non-negativity of a * b : Int.* #8349 fixes the signature of the intended Inhabited instance for\nExtDHashMap.* #8357 adds variants of dite_eq_left_iff that will be useful in a\nfuture PR.* #8358 introduces a very minimal version of the new iterator library.\nIt comes with list iterators and various consumers, namely toArray,\ntoList, toListRev, ForIn, fold, foldM and drain. All\nconsumers also come in a partial variant that can be used without any\nproofs. This limited version of the iterator library generates decent\ncode, even with the old code generator.* #8378 improves and extends the api around Ord and Ordering.* #8379 adds missing Option lemmas.* #8380 provides simple lemmas about toArray, toList and toListRev\nfor the iterator library.* #8384 provides lemmas about the behavior of step, toArray,\ntoList and toListRev on list iterators created with List.iter and\nList.iterM.* #8389 adds the List/Array/Vector.ofFnM, the monadic analogues of\nofFn, along with basic theory.* #8392 corrects some Array lemmas to be about Array not List.* #8397 cleans up many duplicate instances (or, in some cases,\nneedlessly duplicated def X := ...; instance Y := X).* #8399 adds variants of HashMap.getElem?_filter that assume\nLawfulBEq and have a simpler right-hand-side. simp can already\nachieve these, via rewriting with getKey_eq under the lambda. However\ngrind can not, and these lemmas help grind work with HashMap\ngoals. There are variants for all variants of HashMap,\ngetElem?/getElem/getElem!/getD, and for filter and filterMap.* #8405 provides lemmas about the loop constructs ForIn, fold,\nfoldM and drain and their relation to each other in the context of\niterators.* #8418 provides the take iterator combinator that transforms any\niterator into an iterator that stops after a given number of steps. The\nchange contains the implementation and lemmas.* #8422 adds LT and Decidable LT instances for\nStd.Time.Timestamp and Std.Time.Duration.* #8434 adds the equivalent of List.take_cons about List.drop.* #8435 upstreams the LawfulMonadLift(T) classes, lemmas and instances\nfrom Batteries into Core because the iterator library needs them in\norder to prove lemmas about the mapM operator, which relies on\nMonadLiftT.* #8445 adds a @[simp] lemma, and comments explaining that there is\nintentionally no verification API for Vector.take, Vector.drop, or\nVector.tail, which should all be rewritten in terms of\nVector.extract.* #8446 adds basic @[grind] annotations for TreeMap and its\nvariants. Likely more annotations will be added after we've explored\nsome examples.* #8451 provides the iterator combinator filterMap in a pure and\nmonadic version and specializations map and filter. This new\ncombinator allows to apply a function to the emitted values of a stream\nwhile filtering out certain elements.* #8460 adds further @[grind] annotations for Option, as follow-up\nto the recent additions to the Option API in #8379 and #8298.* #8465 adds further lemmas about LawfulGetElem, including marking\nsome with @[grind].* #8470 adds @[simp] to getElem_pos/neg (similarly for getElem!).\nThese are often already simp lemmas for concrete types.* #8482 adds preliminary @[grind] annotations for List.Pairwise and\nList.Nodup.* #8484 provides the iterator combinator zip in a pure and monadic\nversion.* #8492 adds simp lemmas for toInt_* and toNat_* with arithmetic\noperation given the hypothesis of no-overflow\n(toNat_add_of_not_uaddOverflow, toInt_add_of_not_saddOverflow,\ntoNat_sub_of_not_usubOverflow, toInt_sub_of_not_ssubOverflow,\ntoInt_neg_of_not_negOverflow, toNat_mul_of_not_umulOverflow,\ntoInt_mul_of_not_smulOverflow). In particular, these are simp since\n(1) the rhs is strictly simpler than the lhs and (2) this version is\nalso simpler than the standard operation when the hypothesis is\navailable.* #8493 provides the iterator combinators takeWhile (forwarding all\nemitted values of another iterator until a predicate becomes false)\ndropWhile (dropping values until some predicate on these values\nbecomes false, then forwarding all the others).* #8497 adds preliminary grind annotations for\nList.Sublist/IsInfix/IsPrefix/IsSuffix, along with test cases.* #8499 changes the definition of Array.ofFn.go to use recursion on\nNat (rather than well-founded recursion). This resolves a problem\nreported on zulip).* #8513 removes the @[reducible] annotation on Array.size. This is\nprobably best gone anyway in order to keep separation between the List\nand Array APIs, but it also helps avoid uselessly instantiating\nArray theorems when grind is working on List problems.* #8515 removes the prime from Fin.ofNat': the old Fin.ofNat has\ncompleted its 6 month deprecation cycle and is being removed.* #8527 adds grind annotations for theorems about List.countP and\nList.count.* #8552 provides array iterators (Array.iter(M),\nArray.iterFromIdx(M)), infinite iterators produced by a step function\n(Iter.repeat), and a ForM instance for finite iterators that is\nimplemented in terms of ForIn.* #8620 removes the NatCast (Fin n) global instance (both the direct\ninstance, and the indirect one via Lean.Grind.Semiring), as that\ninstance causes causes x < n (for x : Fin k, n : Nat) to be\nelaborated as x < ↑n rather than ↑x < n, which is undesirable. Note\nhowever that in Mathlib this happens anyway!Compiler* #8211 adds support for generating IR from the LCNF representation of\nthe new compiler.* #8236 fixes an issue where the combination of extern_lib and\nprecompileModules would lead to \"symbol not found\" errors.* #8268 optimizes lean_nat_shiftr for scalar operands. The new compiler\nconverts Nat divisions into right shifts, so this now shows up as hot in\nsome profiles.* #8308 makes the new compiler's specialization pass compute closures\nthe same way as the old compiler, in particular when it comes to\nvariables captured by lambdas.* #8367 adds a new structProjCases pass to the new compiler, analogous\nto the struct_cases_on pass in the old compiler, which converts all\nprojections from structs into cases expressions. When lowered to IR,\nthis causes all of the projections from a single structure to be grouped\ntogether, which is an invariant relied upon by the IR RC passes (at\nleast for linearity, if not general correctness).* #8409 adds support to LCNF for native UInt8/UInt16/UInt32/UInt64\nliterals.* #8456 adds support for primitive USize literals in LCNF.* #8458 adds closed term extraction to the new compiler, closely\nfollowing the approach in the old compiler. In the future, we will\nexplore some ideas to improve upon this approach.* #8462 enables the LCNF extractClosed pass by default.* #8468 switches the LCNF baseExt/monoExt environment extensions to use\na custom environment extension that uses a PersistentHashMap. The\noptimizer relies upon the ability to update a decl multiple times, which\ndoes not work with SimplePersistentEnvExtension.* #8502 changes the new compiler to use the kernel environment to find\ndefinitions, which causes compilation to be skipped when the decl had a\nkernel error (e.g. due to an unresolved metavariable). This matches the\nbehavior of the old compiler.* #8521 makes LCNF.toMono recursively process jmp args.* #8523 moves the new compiler's noncomputable check into toMono,\nmatching the recent change in the old compiler. This is mildly more\ncomplicated because we can't throw an error at the mere use of a\nconstant, we need to check for a later relevant use. This is still a bit\nmore conservative than it could theoretically be around join points and\nlocal functions, but it's hard to imagine that mattering in practice\n(and we can easily enable it if it does).* #8535 extracts more Nats (and their downstream users) in extractClosed\nby fixing a silly oversight in the logic.* #8540 changes the LCNF specialize pass to allow ground variables to\ndepend on local fun decls (with no non-ground free variables). This\nenables specialization of Monad instances that depend on local lambdas.* #8559 fixes an adversarial soundness attack described in #8554. The\nattack exploits the fact that assert! no longer aborts execution, and\nthat users can redirect error messages.\nAnother PR will implement the same fix for Expr.Data.* #8560 is similar to #8559 but for Expr.mkData. This vulnerability\nhas not been exploited yet, but adversarial users may find a way.* #8561 increases maxHeartbeats in the isDefEqProjIssue test, because\nwhen running under the new compiler the run_meta call includes the\nallocations of the compiler itself. With the old compiler, many of the\ncorresponding allocations were internal to C++ code and would not\nincrease the heartbeat count.* #8565 makes the LCNF specialization pass only treat type/instance\nparams as ground vars. The current policy was too liberal and would\nresult on computations being floated into specialized loops.* #8566 changes the LCNF constant folding pass to not convert Nat\nmultiplication to a left shift by a power of 2. The fast path test for\nthis is sufficiently complex that it's simpler to just use the fast path\nfor multiplication.* #8575 makes LCNF's simpAppApp? bail out on trivial aliases as\nintended. It seems that there was a typo in the original logic, and this\nPR also extends it to include aliases of global constants rather than\njust local vars.* #8582 fixes an accidental dropping of state in Param.toMono. When this\ncode was originally written, there was no other state besides\ntypeParams.Pretty Printing* #8041 changes the behavior of pp.showLetValues to use a hoverable\n⋯ to hide let values. This is now false by default, and there is a new\noption pp.showLetValues.threshold for allowing small expressions to be\nshown anyway. For tactic metavariables, there is an additional option\npp.showLetValues.tactic.threshold, which by default is set to the\nmaximal value, since in tactic states local values are usually\nsignificant.* #8372 modifies the pretty printer to use have syntax instead of\nlet_fun syntax.* #8457 fixes an issue when including a hard line break in a Format\nthat caused subsequent (ordinary) line breaks to be erroneously\nflattened to spaces.* #8504 modifies the pretty printer so that dot notation is used for\nclass parent projections. Previously, dot notation was never used for\nclasses.Documentation* #8199 adds a style guide for documentation, including both general\nprinciples and docstring-specific concerns.Server* #7665 and #8180 add\nsupport for code actions that resolve 'Unknown identifier' errors by either importing the missing declaration or by\nchanging the identifier to one from the environment.* #8091 improves the performance of the workspace symbol request.* #8242 fixes the 'goals accomplished' diagnostics. They were\naccidentally broken in #7902.* #8350 changes namespace completion to use the same algorithm as\ndeclaration identifier completion, which makes it use the short name\n(last name component) for completions instead of the full name, avoiding\nnamespace duplications.* #8362 fixes a bug where the Unknown identifier code actions wouldn't\nwork correctly for some Unknown identifier error spans and adjusts\nseveral Unknown identifier spans to actually end on the identifier in\nquestion.Lake* #8383 fixes the use of import Lake with precompiled modules, which\nwas previously broken on MacOS.* #8411 fixes a doc bug in the Resolve.lean; in reverse order, B comes\nbefore A* #8528 fixes the heuristic Lake uses to determine whether a lean_lib\ncan be loaded via lean --plugin rather than lean --load-dynlib.\nPreviously, a mismatch between the single root's name and the library's\nname would not be caught and cause loading to fail.* #8529 changes lake lean and lake setup-file to precompile the\nimports of non-workspace files using the the import's whole library.\nThis ensures that additional link objects are linked and available\nduring elaboration.* #8539 changes Lake to use relative path for the Lean messages produced\nby a module build. This makes the message portable across different\nmachines, which is useful for Mathlib's cache.Other* #8192 includes upgrades to the release_checklist.py script prepared\nwhile releasing v4.20.0-rc1.* #8366 adds the expose attribute to Ordering.then. This is required\nfor building with the new compiler, but works fine with the old compiler\nbecause it silently ignores the missing definition.\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.21.0 (2025-06-30)","id":"/releases/v4.21.0/#release-v4___21___0"}});