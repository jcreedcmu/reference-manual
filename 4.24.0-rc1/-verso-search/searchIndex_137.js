window.docContents[137].resolve({"/Terms/Pattern-Matching/#The-Lean-Language-Reference--Terms--Pattern-Matching--Types--Pattern-Equality-Proofs":{"contents":"When a discriminant is named, match generates a proof that the pattern and discriminant are equal, binding it to the provided name in the right-hand side.\nThis is useful to bridge the gap between dependent pattern matching on indexed families and APIs that expect explicit propositional arguments, and it can help tactics that make use of assumptions to succeed.\n\nPattern Equality ProofsThe function last?, which either throws an exception or returns the last element of its argument, uses the standard library function List.getLast.\nThis function expects a proof that the list in question is nonempty.\nNaming the match on xs ensures that there's an assumption in scope that states that xs is equal to _ :: _, which simp_all uses to discharge the goal.def last? (xs : List α) : Except String α :=\n  match h : xs with\n  | [] =>\n    .error \"Can't take first element of empty list\"\n  | _ :: _ =>\n    .ok <| xs.getLast (show xs ≠ [] by intro h'; simp_all)\nWithout the name, simp_all is unable to find the contradiction.def last?' (xs : List α) : Except String α :=\n  match xs with\n  | [] =>\n    .error \"Can't take first element of empty list\"\n  | _ :: _ =>\n    .ok <| xs.getLast (show xs ≠ [] by intro h'; simp_all)\nsimp_all made no progress\n\n\n","context":"Lean Reference\u0009Terms\u0009Pattern Matching\u0009Types","header":"10.8.1.1. Pattern Equality Proofs","id":"/Terms/Pattern-Matching/#The-Lean-Language-Reference--Terms--Pattern-Matching--Types--Pattern-Equality-Proofs"}});