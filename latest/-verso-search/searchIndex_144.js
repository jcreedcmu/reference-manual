window.docContents[144].resolve({"/IO/System-and-Platform-Information/#platform-info":{"id":"/IO/System-and-Platform-Information/#platform-info","header":"15.6. System and Platform Information","context":"Lean Reference\u0009IO","contents":"The word size of the current platform, which may be 64 or 32 bits.\n\nThe LLVM target triple of the current platform. Empty if missing when Lean was compiled.\n\nIs the current platform Windows?\n\nIs the current platform macOS?\n\nIs the current platform Emscripten?\n\n"},"/Error-Explanations/lean___inductiveParamMismatch/#The-Lean-Language-Reference--Error-Explanations--lean___inductiveParamMismatch--Examples":{"id":"/Error-Explanations/lean___inductiveParamMismatch/#The-Lean-Language-Reference--Error-Explanations--lean___inductiveParamMismatch--Examples","header":"Examples","context":"Lean Reference\u0009Error Explanations\u0009lean.inductiveParamMismatch","contents":"Vector length index as a parameterinductive Vec (α : Type) (n : Nat) : Type where\n  | nil  : Vec α 0\n  | cons : α → Vec α n → Vec α (n + 1)\nMismatched inductive type parameter in\n  Vec α 0\nThe provided argument\n  0\nis not definitionally equal to the expected parameter\n  n\n\nNote: The value of parameter 'n' must be fixed throughout the inductive declaration. Consider making this parameter an index if it must vary.\ninductive Vec (α : Type) : Nat → Type where\n  | nil  : Vec α 0\n  | cons : α → Vec α n → Vec α (n + 1)\nThe length argument n of the Vec type constructor is declared as a parameter, but other values\nfor this argument appear in the nil and cons constructors (namely, 0 and n + 1). An error\ntherefore appears at the first occurrence of such an argument. To correct this, n cannot be a\nparameter of the inductive declaration and must instead be an index, as in the corrected example. On\nthe other hand, α remains unchanged throughout all occurrences of Vec in the declaration and so\nis a valid parameter.\n\n"},"/Basic-Types/Strings/#string-api-meta":{"id":"/Basic-Types/Strings/#string-api-meta","header":"19.8.4.11. Metaprogramming","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009API Reference","contents":"Converts a string to the Lean compiler's representation of names. The resulting name is\nhierarchical, and the string is split at the dots ('.').\"a.b\".toName is the name a.b, not «a.b». For the latter, use Name.mkSimple.\n\nConverts a string to its corresponding Lean string literal syntax. Double quotes are added to each\nend, and internal characters are escaped as needed.Examples:* \"abc\".quote = \"\\\"abc\\\"\"* \"\\\"\".quote = \"\\\"\\\\\\\"\\\"\"\n\n"},"/Basic-Types/Linked-Lists/#The-Lean-Language-Reference--Basic-Types--Linked-Lists--API-Reference--Conversions":{"id":"/Basic-Types/Linked-Lists/#The-Lean-Language-Reference--Basic-Types--Linked-Lists--API-Reference--Conversions","header":"19.15.3.7. Conversions","context":"Lean Reference\u0009Basic Types\u0009Linked Lists\u0009API Reference","contents":"Creates a string that contains the characters in a list, in order.Examples:* ['L', '∃', '∀', 'N'].asString = \"L∃∀N\"* [].asString = \"\"* ['a', 'a', 'a'].asString = \"aaa\"\n\nConverts a List α into an Array α.O(|xs|). At runtime, this operation is implemented by List.toArrayImpl and takes time linear in\nthe length of the list. List.toArray should be used instead of Array.mk.Examples:* [1, 2, 3].toArray = #[1, 2, 3]* [\"monday\", \"wednesday\", friday\"].toArray = #[\"monday\", \"wednesday\", friday\"].\n\nConverts a List α into an Array α by repeatedly pushing elements from the list onto an empty\narray. O(|xs|).Use List.toArray instead of calling this function directly. At runtime, this operation implements\nboth List.toArray and Array.mk.\n\nConverts a list of bytes into a ByteArray.\n\nConverts a list of floats into a FloatArray.\n\nConverts a list into a string, using ToString.toString to convert its elements.The resulting string resembles list literal syntax, with the elements separated by \", \" and\nenclosed in square brackets.The resulting string may not be valid Lean syntax, because there's no such expectation for\nToString instances.Examples:* [1, 2, 3].toString = \"[1, 2, 3]\"* [\"cat\", \"dog\"].toString = \"[cat, dog]\"* [\"cat\", \"dog\", \"\"].toString = \"[cat, dog, ]\"\n\n"}});