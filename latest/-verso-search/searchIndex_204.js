window.docContents[204].resolve({"/releases/v4.8.0/#release-v4___8___0":{"id":"/releases/v4.8.0/#release-v4___8___0","header":"Lean 4.8.0 (2024-06-05)","context":"Lean Reference\u0009Release Notes","contents":"Language features, tactics, and metaprograms* Functional induction principles.\n#3432, #3620,\n#3754, #3762,\n#3738, #3776,\n#3898.Derived from the definition of a (possibly mutually) recursive function,\na functional induction principle is created that is tailored to proofs about that function.For example from:def ackermann : Nat → Nat → Nat\n  | 0, m => m + 1\n  | n+1, 0 => ackermann n 1\n  | n+1, m+1 => ackermann n (ackermann (n + 1) m)\nwe getackermann.induct (motive : Nat → Nat → Prop) (case1 : ∀ (m : Nat), motive 0 m)\n  (case2 : ∀ (n : Nat), motive n 1 → motive (Nat.succ n) 0)\n  (case3 : ∀ (n m : Nat), motive (n + 1) m → motive n (ackermann (n + 1) m) → motive (Nat.succ n) (Nat.succ m))\n  (x x : Nat) : motive x x\nIt can be used in the induction tactic using the using syntax:induction n, m using ackermann.induct\n* The termination checker now recognizes more recursion patterns without an\nexplicit termination_by. In particular the idiom of counting up to an upper\nbound, as indef Array.sum (arr : Array Nat) (i acc : Nat) : Nat :=\n  if _ : i < arr.size then\n    Array.sum arr (i+1) (acc + arr[i])\n  else\n    acc\nis recognized without having to say termination_by arr.size - i.* #3630 makes termination_by? not use sizeOf when not needed* #3652 improves the termination_by syntax.* #3658 changes how termination arguments are elaborated.* #3665 refactors GuessLex to allow inferring more complex termination arguments* #3666 infers termination arguments such as xs.size - i* #3629,\n#3655,\n#3747:\nAdds @[induction_eliminator] and @[cases_eliminator] attributes to be able to define custom eliminators\nfor the induction and cases tactics, replacing the @[eliminator] attribute.\nGives custom eliminators for Nat so that induction and cases put goal states into terms of 0 and n + 1\nrather than Nat.zero and Nat.succ n.\nAdded option tactic.customEliminators to control whether to use custom eliminators.\nAdded a hack for rcases/rintro/obtain to use the custom eliminator for Nat.* Shorter instances names. There is a new algorithm for generating names for anonymous instances.\nAcross Std and Mathlib, the median ratio between lengths of new names and of old names is about 72%.\nWith the old algorithm, the longest name was 1660 characters, and now the longest name is 202 characters.\nThe new algorithm's 95th percentile name length is 67 characters, versus 278 for the old algorithm.\nWhile the new algorithm produces names that are 1.2% less unique,\nit avoids cross-project collisions by adding a module-based suffix\nwhen it does not refer to declarations from the same \"project\" (modules that share the same root).\n#3089\nand #3934.* 8d2adf\nImporting two different files containing proofs of the same theorem is no longer considered an error.\nThis feature is particularly useful for theorems that are automatically generated on demand (e.g., equational theorems).* 84b091\nLean now generates an error if the type of a theorem is not a proposition.* Definition transparency. 47a343. @[reducible], @[semireducible], and @[irreducible] are now scoped and able to be set for imported declarations.* simp/dsimp* #3607 enables kernel projection reduction in dsimp* b24fbf\nand acdb00:\ndsimproc command\nto define defeq-preserving simplification procedures.* #3624 makes dsimp normalize raw nat literals as OfNat.ofNat applications.* #3628 makes simp correctly handle OfScientific.ofScientific literals.* #3654 makes dsimp? report used simprocs.* dee074 fixes equation theorem\nhandling in simp for non-recursive definitions.* #3819 improved performance when simp encounters a loop.* #3821 fixes discharger/cache interaction.* #3824 keeps simp from breaking Char literals.* #3838 allows Nat instances matching to be more lenient.* #3870 documentation for simp configuration options.* #3972 fixes simp caching.* #4044 improves cache behavior for \"well-behaved\" dischargers.* omega* #3639, #3766,\n#3853, #3875:\nintroduces a term canonicalizer.* #3736 improves handling of positivity for the modulo operator for Int.* #3828 makes it work as a simp discharger.* #3847 adds helpful error messages.* rfl* #3671, #3708: upstreams the @[refl] attribute and the rfl tactic.* #3751 makes apply_rfl not operate on Eq itself.* #4067 improves error message when there are no goals.* #3719 upstreams the rw? tactic, with fixes and improvements in\n#3783, #3794,\n#3911.* conv* #3659 adds a conv version of the calc tactic.* #3763 makes conv clean up using try with_reducible rfl instead of try rfl.* #guard_msgs* #3617 introduces whitespace protection using the ⏎ character.* #3883:\nThe #guard_msgs command now has options to change whitespace normalization and sensitivity to message ordering.\nFor example, #guard_msgs (whitespace := lax) in cmd collapses whitespace before checking messages,\nand #guard_msgs (ordering := sorted) in cmd sorts the messages in lexicographic order before checking.* #3931 adds an unused variables ignore function for #guard_msgs.* #3912 adds a diff between the expected and actual outputs. This feature is currently\ndisabled by default, but can be enabled with set_option guard_msgs.diff true.\nDepending on user feedback, this option may default to true in a future version of Lean.* do notation* #3820 makes it an error to lift (<- ...) out of a pure if ... then ... else ...* Lazy discrimination trees* #3610 fixes a name collision for LazyDiscrTree that could lead to cache poisoning.* #3677 simplifies and fixes LazyDiscrTree handling for exact?/apply?.* #3685 moves general exact?/apply? functionality into LazyDiscrTree.* #3769 has lemma selection improvements for rw? and LazyDiscrTree.* #3818 improves ordering of matches.* #3590 adds inductive.autoPromoteIndices option to be able to disable auto promotion of indices in the inductive command.* Miscellaneous bug fixes and improvements* #3606 preserves cache and dischargeDepth fields in Lean.Meta.Simp.Result.mkEqSymm.* #3633 makes elabTermEnsuringType respect errToSorry, improving error recovery of the have tactic.* #3647 enables noncomputable unsafe definitions, for deferring implementations until later.* #3672 adjust namespaces of tactics.* #3725 fixes Ord derive handler for indexed inductive types with unused alternatives.* #3893 improves performance of derived Ord instances.* #3771 changes error reporting for failing tactic macros. Improves rfl error message.* #3745 fixes elaboration of generalized field notation if the object of the notation is an optional parameter.* #3799 makes commands such as universe, variable, namespace, etc. require that their argument appear in a later column.\nCommands that can optionally parse an ident or parse any number of idents generally should require\nthat the ident use colGt. This keeps typos in commands from being interpreted as identifiers.* #3815 lets the split tactic be used for writing code.* #3822 adds missing info in induction tactic for with clauses of the form | cstr a b c => ?_.* #3806 fixes withSetOptionIn combinator.* #3844 removes unused trace.Elab.syntax option.* #3896 improves hover and go-to-def for attribute command.* #3989 makes linter options more discoverable.* #3916 fixes go-to-def for syntax defined with @[builtin_term_parser].* #3962 fixes how solveByElim handles symm lemmas, making exact?/apply? usable again.* #3968 improves the @[deprecated] attribute, adding (since := \"<date>\") field.* #3768 makes #print command show structure fields.* #3974 makes exact?% behave like by exact? rather than by apply?.* #3994 makes elaboration of he ▸ h notation more predictable.* #3991 adjusts transparency for decreasing_trivial macros.* #4092 improves performance of binop% and binrel% expression tree elaborators.* Docs: #3748, #3796,\n#3800, #3874,\n#3863, #3862,\n#3891, #3873,\n#3908, #3872.Language server and IDE extensions* #3602 enables import auto-completions.* #3608 fixes issue leanprover/vscode-lean4#392.\nDiagnostic ranges had an off-by-one error that would misplace goal states for example.* #3014 introduces snapshot trees, foundational work for incremental tactics and parallelism.\n#3849 adds basic incrementality API.* #3271 adds support for server-to-client requests.* #3656 fixes jump to definition when there are conflicting names from different files.\nFixes issue #1170.* #3691, #3925,\n#3932 keep semantic tokens synchronized (used for semantic highlighting), with performance improvements.* #3247 and #3730\nadd diagnostics to run \"Restart File\" when a file dependency is saved.* #3722 uses the correct module names when displaying references.* #3728 makes errors in header reliably appear and makes the \"Import out of date\" warning be at \"hint\" severity.\n#3739 simplifies the text of this warning.* #3778 fixes #3462,\nwhere info nodes from before the cursor would be used for computing completions.* #3985 makes trace timings appear in Infoview.Pretty printing* #3797 fixes the hovers over binders so that they show their types.* #3640 and #3735: Adds attribute @[pp_using_anonymous_constructor] to make structures pretty print as ⟨x, y, z⟩\nrather than as {a := x, b := y, c := z}.\nThis attribute is applied to Sigma, PSigma, PProd, Subtype, And, and Fin.* #3749\nNow structure instances pretty print with parent structures' fields inlined.\nThat is, if B extends A, then { toA := { x := 1 }, y := 2 } now pretty prints as { x := 1, y := 2 }.\nSetting option pp.structureInstances.flatten to false turns this off.* #3737, #3744\nand #3750:\nOption pp.structureProjections is renamed to pp.fieldNotation, and there is now a suboption pp.fieldNotation.generalized\nto enable pretty printing function applications using generalized field notation (defaults to true).\nField notation can be disabled on a function-by-function basis using the @[pp_nodot] attribute.\nThe notation is not used for theorems.* #4071 fixes interaction between app unexpanders and pp.fieldNotation.generalized* #3625 makes delabConstWithSignature (used by #check) have the ability to put arguments \"after the colon\"\nto avoid printing inaccessible names.* #3798,\n#3978,\n#3798:\nAdds options pp.mvars (default: true) and pp.mvars.withType (default: false).\nWhen pp.mvars is false, expression metavariables pretty print as ?_ and universe metavariables pretty print as _.\nWhen pp.mvars.withType is true, expression metavariables pretty print with a type ascription.\nThese can be set when using #guard_msgs to make tests not depend on the particular names of metavariables.* #3917 makes binders hoverable and gives them docstrings.* #4034 makes hovers for RHS terms in match expressions in the Infoview reliably show the correct term.Library* Bool/Prop* #3508 improves simp confluence for Bool and Prop terms.* Theorems: #3604* Nat* #3579 makes Nat.succ_eq_add_one be a simp lemma, now that induction/cases uses n + 1 instead of Nat.succ n.* #3808 replaces Nat.succ simp rules with simprocs.* #3876 adds faster Nat.repr implementation in C.* Int* Theorems: #3890* UInts* #3960 improves performance of upcasting.* Array and Subarray* #3676 removes Array.eraseIdxAux, Array.eraseIdxSzAux, and Array.eraseIdx'.* #3648 simplifies Array.findIdx?.* #3851 renames fields of Subarray.* List* #3785 upstreams tail-recursive List operations and @[csimp] lemmas.* BitVec* Theorems: #3593,\n#3593, #3597,\n#3598, #3721,\n#3729, #3880,\n#4039.* #3884 protects Std.BitVec.* String* #3832 fixes String.splitOn.* #3959 adds String.Pos.isValid.* #3959 UTF-8 string validation.* #3961 adds a model implementation for UTF-8 encoding and decoding.* IO* #4097 adds IO.getTaskState which returns whether a task is finished, actively running, or waiting on other Tasks to finish.* Refactors* #3605 reduces imports for Init.Data.Nat and Init.Data.Int.* #3613 reduces imports for Init.Omega.Int.* #3634 upstreams Std.Data.Nat\nand #3635 upstreams Std.Data.Int.* #3790 reduces more imports for omega.* #3694 extends GetElem interface with getElem! and getElem? to simplify containers like RBMap.* #3865 renames Option.toMonad (see breaking changes below).* #3882 unifies lexOrd with compareLex.* Other fixes or improvements* #3765 makes Quotient.sound be a theorem.* #3645 fixes System.FilePath.parent in the case of absolute paths.* #3660 ByteArray.toUInt64LE! and ByteArray.toUInt64BE! were swapped.* #3881, #3887 fix linearity issues in HashMap.insertIfNew, HashSet.erase, and HashMap.erase.\nThe HashMap.insertIfNew fix improves import performance.* #3830 ensures linearity in Parsec.many*Core.* #3930 adds FS.Stream.isTty field.* #3866 deprecates Option.toBool in favor of Option.isSome.* #3975 upstreams Data.List.Init and Data.Array.Init material from Std.* #3942 adds instances that make ac_rfl work without Mathlib.* #4010 changes Fin.induction to use structural induction.* 02753f\nfixes bug in reduceLeDiff simproc.* #4097\nadds IO.TaskState and IO.getTaskState to get the task from the Lean runtime's task manager.* Docs: #3615, #3664,\n#3707, #3734,\n#3868, #3861,\n#3869, #3858,\n#3856, #3857,\n#3867, #3864,\n#3860, #3859,\n#3871, #3919.Lean internals* Defeq and WHNF algorithms* #3616 gives better support for reducing Nat.rec expressions.* #3774 add tracing for \"non-easy\" WHNF cases.* #3807 fixes an isDefEq performance issue, now trying structure eta after lazy delta reduction.* #3816 fixes .yesWithDeltaI behavior to prevent increasing transparency level when reducing projections.* #3837 improves heuristic at isDefEq.* #3965 improves isDefEq for constraints of the form t.i =?= s.i.* #3977 improves isDefEqProj.* #3981 adds universe constraint approximations to be able to solve u =?= max u ?v using ?v = u.\nThese approximations are only applied when universe constraints cannot be postponed anymore.* #4004 improves isDefEqProj during typeclass resolution.* #4012 adds backward.isDefEq.lazyProjDelta and backward.isDefEq.lazyWhnfCore backwards compatibility flags.* Kernel* #3966 removes dead code.* #4035 fixes mismatch for TheoremVal between Lean and C++.* Discrimination trees* 423fed\nand 3218b2:\nsimplify handling of dependent/non-dependent pi types.* Typeclass instance synthesis* #3638 eta-reduces synthesized instances* ce350f fixes a linearity issue* 917a31\nimproves performance by considering at most one answer for subgoals not containing metavariables.\n#4008 adds backward.synthInstance.canonInstances backward compatibility flag.* Definition processing* #3661, #3767 changes automatically generated equational theorems to be named\nusing suffix .eq_<idx> instead of ._eq_<idx>, and .eq_def instead of ._unfold. (See breaking changes below.)\n#3675 adds a mechanism to reserve names.\n#3803 fixes reserved name resolution inside namespaces and fixes handling of matcher declarations and equation lemmas.* #3662 causes auxiliary definitions nested inside theorems to become defs if they are not proofs.* #4006 makes proposition fields of structures be theorems.* #4018 makes it an error for a theorem to be extern.* #4047 improves performance making equations for well-founded recursive definitions.* Refactors* #3614 avoids unfolding in Lean.Meta.evalNat.* #3621 centralizes functionality for Fix/GuessLex/FunInd in the ArgsPacker module.* #3186 rewrites the UnusedVariable linter to be more performant.* #3589 removes coercion from String to Name (see breaking changes below).* #3237 removes the lines field from FileMap.* #3951 makes msg parameter to throwTacticEx optional.* Diagnostics* #4016, #4019,\n#4020, #4030,\n#4031,\nc3714b,\n#4049 adds set_option diagnostics true for diagnostic counters.\nTracks number of unfolded declarations, instances, reducible declarations, used instances, recursor reductions,\nisDefEq heuristic applications, among others.\nThis option is suggested in exceptional situations, such as at deterministic timeout and maximum recursion depth.* 283587\nadds diagnostic information for simp.* #4043 adds diagnostic information for congruence theorems.* #4048 display diagnostic information\nfor set_option diagnostics true in <tactic> and set_option diagnostics true in <term>.* Other features* #3800 adds environment extension to record which definitions use structural or well-founded recursion.* #3801 trace.profiler can now export to Firefox Profiler.* #3918, #3953 adds @[builtin_doc] attribute to make docs and location of a declaration available as a builtin.* #3939 adds the lean --json CLI option to print messages as JSON.* #3075 improves test_extern command.* #3970 gives monadic generalization of FindExpr.* Docs: #3743, #3921,\n#3954.* Other fixes: #3622,\n#3726, #3823,\n#3897, #3964,\n#3946, #4007,\n#4026.Compiler, runtime, and FFI* #3632 makes it possible to allocate and free thread-local runtime resources for threads not started by Lean itself.* #3627 improves error message about compacting closures.* #3692 fixes deadlock in IO.Promise.resolve.* #3753 catches error code from MoveFileEx on Windows.* #4028 fixes a double reset bug in ResetReuse transformation.* 6e731b\nremoves interpreter copy constructor to avoid potential memory safety issues.Lake* TOML Lake configurations. #3298, #4104.Lake packages can now use TOML as a alternative configuration file format instead of Lean. If the default lakefile.lean is missing, Lake will also look for a lakefile.toml. The TOML version of the configuration supports a restricted set of the Lake configuration options, only including those which can easily mapped to a TOML data structure. The TOML syntax itself fully compiles with the TOML v1.0.0 specification.As part of the introduction of this new feature, we have been helping maintainers of some major packages within the ecosystem switch to this format. For example, the following is Aesop's new lakefile.toml:leanprover-community/aesop/lakefile.tomlname = \"aesop\"\ndefaultTargets = [\"Aesop\"]\ntestRunner = \"test\"\nprecompileModules = false\n\n[[require]]\nname = \"batteries\"\ngit = \"https://github.com/leanprover-community/batteries\"\nrev = \"main\"\n\n[[lean_lib]]\nname = \"Aesop\"\n\n[[lean_lib]]\nname = \"AesopTest\"\nglobs = [\"AesopTest.+\"]\nleanOptions = {linter.unusedVariables = false}\n\n[[lean_exe]]\nname = \"test\"\nsrcDir = \"scripts\"\nTo assist users who wish to transition their packages between configuration file formats, there is also a new lake translate-config command for migrating to/from TOML.Running lake translate-config toml will produce a lakefile.toml version of a package's lakefile.lean. Any configuration options unsupported by the TOML format will be discarded during translation, but the original lakefile.lean will remain so that you can verify the translation looks good before deleting it.* Build progress overhaul. #3835, #4115, #4127, #4220, #4232, #4236.Builds are now managed by a top-level Lake build monitor, this makes the output of Lake builds more standardized and enables producing prettier and more configurable progress reports.As part of this change, job isolation has improved. Stray I/O and other build related errors in custom targets are now properly isolated and caught as part of their job. Import errors no longer cause Lake to abort the entire build and are instead localized to the build jobs of the modules in question.Lake also now uses ANSI escape sequences to add color and produce progress lines that update in-place; this can be toggled on and off using --ansi / --no-ansi.--wfail and --iofail options have been added that causes a build to fail if any of the jobs log a warning (--wfail) or produce any output or log information messages (--iofail). Unlike some other build systems, these options do NOT convert these logs into errors, and Lake does not abort jobs on such a log (i.e., dependent jobs will still continue unimpeded).* lake test. #3779.Lake now has a built-in test command which will run a script or executable labelled @[test_runner] (in Lean) or defined as the testRunner (in TOML) in the root package.Lake also provides a lake check-test command which will exit with code 0 if the package has a properly configured test runner or error with 1 otherwise.* lake lean. #3793.The new command lake lean <file> [-- <args...>] functions like lake env lean <file> <args...>, except that it builds the imports of file before running lean. This makes it very useful for running test or example code that imports modules that are not guaranteed to have been built beforehand.* Miscellaneous bug fixes and improvements* #3609 LEAN_GITHASH environment variable to override the detected Git hash for Lean when computing traces, useful for testing custom builds of Lean.* #3795 improves relative package directory path normalization in the pre-rename check.* #3957 fixes handling of packages that appear multiple times in a dependency tree.* #3999 makes it an error for there to be a mismatch between a package name and what it is required as. Also adds a special message for the std-to-batteries rename.* #4033 fixes quiet mode.* Docs: #3704.DevOps* #3536 and #3833\nadd a checklist for the release process.* #3600 runs nix-ci more uniformly.* #3612 avoids argument limits when building on Windows.* #3682 builds Lean's .o files in parallel to rest of core.* #3601\nchanges the way Lean is built on Windows (see breaking changes below).\nAs a result, Lake now dynamically links executables with supportInterpreter := true on Windows\nto libleanshared.dll and libInit_shared.dll. Therefore, such executables will not run\nunless those shared libraries are co-located with the executables or part of PATH.\nRunning the executable via lake exe will ensure these libraries are part of PATH.In a related change, the signature of the nativeFacets Lake configuration options has changed\nfrom a static Array to a function (shouldExport : Bool) → Array.\nSee its docstring or Lake's README for further details on the changed option.* #3690 marks \"Build matrix complete\" as canceled if the build is canceled.* #3700, #3702,\n#3701, #3834,\n#3923: fixes and improvements for std and mathlib CI.* #3712 fixes nix build . on macOS.* #3717 replaces shell.nix in devShell with flake.nix.* #3715 and #3790 add test result summaries.* #3971 prevents stage0 changes via the merge queue.* #3979 adds handling for changes-stage0 label.* #3952 adds a script to summarize GitHub issues.* 18a699\nfixes asan linkingBreaking changes* Due to the major Lake build refactor, code using the affected parts of the Lake API or relying on the previous output format of Lake builds is likely to have been broken. We have tried to minimize the breakages and, where possible, old definitions have been marked @[deprecated] with a reference to the new alternative.* Executables configured with supportInterpreter := true on Windows should now be run via lake exe to function properly.* Automatically generated equational theorems are now named using suffix .eq_<idx> instead of ._eq_<idx>, and .eq_def instead of ._unfold. Example:def fact : Nat → Nat\n  | 0 => 1\n  | n+1 => (n+1) * fact n\n\ntheorem ex : fact 0 = 1 := by unfold fact; decide\n\n#check fact.eq_1\n-- fact.eq_1 : fact 0 = 1\n\n#check fact.eq_2\n-- fact.eq_2 (n : Nat) : fact (Nat.succ n) = (n + 1) * fact n\n\n#check fact.eq_def\n/-\nfact.eq_def :\n  ∀ (x : Nat),\n    fact x =\n      match x with\n      | 0 => 1\n      | Nat.succ n => (n + 1) * fact n\n-/\n* The coercion from String to Name was removed. Previously, it was Name.mkSimple, which does not separate strings at dots, but experience showed that this is not always the desired coercion. For the previous behavior, manually insert a call to Name.mkSimple.* The Subarray fields as, h₁ and h₂ have been renamed to array, start_le_stop, and stop_le_array_size, respectively. This more closely follows standard Lean conventions. Deprecated aliases for the field projections were added; these will be removed in a future release.* The change to the instance name algorithm (described above) can break projects that made use of the auto-generated names.* Option.toMonad has been renamed to Option.getM and the unneeded [Monad m] instance argument has been removed.\n\n"},"/Type-Classes/Basic-Classes/#The-Lean-Language-Reference--Type-Classes--Basic-Classes--Subsingleton-Types":{"id":"/Type-Classes/Basic-Classes/#The-Lean-Language-Reference--Type-Classes--Basic-Classes--Subsingleton-Types","header":"11.5.6. Subsingleton Types","context":"Lean Reference\u0009Type Classes\u0009Basic Classes","contents":"A subsingleton is a type with at most one element. It is either empty or has a unique element.All propositions are subsingletons because of proof irrelevance: false propositions are empty, and\nall proofs of a true proposition are equal to one another. Some non-propositional types are also\nsubsingletons.Prove that α is a subsingleton by showing that any two elements are equal.Any two elements of a subsingleton are equal.\n\nIf a type is a subsingleton, then all of its elements are equal.\n\nIf two types are equal and one of them is a subsingleton, then all of their elements are\nheterogeneously equal.\n\n"},"/IO/Tasks-and-Threads/#The-Lean-Language-Reference--IO--Tasks-and-Threads--Communication-Between-Tasks--Condition-Variables":{"id":"/IO/Tasks-and-Threads/#The-Lean-Language-Reference--IO--Tasks-and-Threads--Communication-Between-Tasks--Condition-Variables","header":"15.11.6.3. Condition Variables","context":"Lean Reference\u0009IO\u0009Tasks and Threads\u0009Communication Between Tasks","contents":"The types and functions in this section are available after importing Std.Sync.Mutex.\n\nCondition variable, a synchronization primitive to be used with a BaseMutex or Mutex.The thread that wants to modify the shared variable must:1. Lock the BaseMutex or Mutex2. Work on the shared variable3. Call Condvar.notifyOne or Condvar.notifyAll after it is done. Note that this may be done\nbefore or after the mutex is unlocked.If working with a Mutex the thread that waits on the Condvar can use Mutex.atomicallyOnce\nto wait until a condition is true. If working with a BaseMutex it must:1. Lock the BaseMutex.2. Do one of the following:* Use Condvar.waitUntil to (potentially repeatedly wait) on the condition variable until\nthe condition is true.* Implement the waiting manually by:1. Checking the condition2. Calling Condvar.wait which releases the BaseMutex and suspends execution until the\ncondition variable is notified.3. Check the condition and resume waiting if not satisfied.\n\nCreates a new condition variable.\n\nWaits until another thread calls notifyOne or notifyAll.\n\nWakes up a single other thread executing wait.\n\nWakes up all other threads executing wait.\n\nWaits on the condition variable until the predicate is true.\n\n"},"/Elaboration-and-Compilation/#elaboration-results":{"id":"/Elaboration-and-Compilation/#elaboration-results","header":"2.4. Elaboration Results","context":"Lean Reference\u0009Elaboration and Compilation","contents":"Lean's core type theory does not include pattern matching or recursive definitions.\nInstead, it provides low-level recursors that can be used to implement both case distinction and primitive recursion.\nThus, the elaborator must translate definitions that use pattern matching and recursion into definitions that use recursors.More details on the elaboration of recursive definitions is available in the dedicated section on the topic.\nThis translation is additionally a proof that the function terminates for all potential arguments, because all functions that can be translated to recursors also terminate.\n\nThe translation to recursors happens in two phases: during term elaboration, uses of pattern matching are replaced by appeals to auxiliary matching functions that implement the particular case distinction that occurs in the code.\nThese auxiliary functions are themselves defined using recursors, though they do not make use of the recursors' ability to actually implement recursive behavior.They use the casesOn construction that is described in the section on recursors and elaboration.\nThe term elaborator thus returns core-language terms in which pattern matching has been replaced with the use of special functions that implement case distinction, but these terms may still contain recursive occurrences of the function being defined.\nA definition that still includes recursion, but has otherwise been elaborated to the core language, is called a pre-definition.\nTo see auxiliary pattern matching functions in Lean's output, set the option pp.match to false.\n\n(pretty printer) disable/enable 'match' notation\n\n\n\nThe pre-definition is then sent to the compiler and to the kernel.\nThe compiler receives the pre-definition as-is, with recursion intact.\nThe version sent to the kernel, on the other hand, undergoes a second transformation that replaces explicit recursion with uses of recursors, well-founded recursion, or .\nThis split is for three reasons:* The compiler can compile partial functions that the kernel treats as opaque constants for the purposes of reasoning.* The compiler can also compile unsafe functions that bypass the kernel entirely.* Translation to recursors does not necessarily preserve the cost model expected by programmers, in particular laziness vs strictness, but compiled code must have predictable performance.\n   The other strategies used to justify recursive definitions result in internal terms that are even further from the program as it was written.The compiler stores an intermediate representation in an environment extension.\n\nFor straightforwardly structurally recursive functions, the translation will use the type's recursor.\nThese functions tend to be relatively efficient when run in the kernel, their defining equations hold definitionally, and they are easy to understand.\nFunctions that use other patterns of recursion that cannot be captured by the type's recursor are translated using well-founded recursion, which is structural recursion on a proof that some measure decreases at each recursive call, or using partial fixpoints, which logically capture at least part of a function's specification by appealing to domain-theoretic constructions.\nLean can automatically derive many of these termination proofs, but some require manual proofs.\nWell-founded recursion is more flexible, but the resulting functions are often slower to execute in the kernel due to the proof terms that show that a measure decreases, and their defining equations may hold only propositionally.\nTo provide a uniform interface to functions defined via structural and well-founded recursion and to check its own correctness, the elaborator proves equational lemmas that relate the function to its original definition.\nIn the function's namespace, eq_unfold relates the function directly to its definition, eq_def relates it to the definition after instantiating implicit parameters, and N lemmas eq_N relate each case of its pattern-matching to the corresponding right-hand side, including sufficient assumptions to indicate that earlier branches were not taken.\n\nEquational LemmasGiven the definition of thirdOfFive:def thirdOfFive : List α → Option α\n  | [_, _, x, _, _] => some x\n  | _ => none\nequational lemmas are generated that relate thirdOfFive to its definition.thirdOfFive.eq_unfold states that it can be unfolded to its original definition when no arguments are provided:thirdOfFive.eq_unfold.{u_1} :\n  @thirdOfFive.{u_1} = fun {α : Type u_1} x =>\n    match x with\n    | [head, head_1, x, head_2, head_3] => some x\n    | x => none\nthirdOfFive.eq_def states that it matches its definition when applied to arguments:thirdOfFive.eq_def.{u_1} {α : Type u_1} :\n  ∀ (x : List α),\n    thirdOfFive x =\n      match x with\n      | [head, head_1, x, head_2, head_3] => some x\n      | x => none\nthirdOfFive.eq_1 shows that its first defining equation holds:thirdOfFive.eq_1.{u} {α : Type u}\n    (head head_1 x head_2 head_3 : α) :\n  thirdOfFive [head, head_1, x, head_2, head_3] = some x\nthirdOfFive.eq_2 shows that its second defining equation holds:thirdOfFive.eq_2.{u_1} {α : Type u_1} :\n  ∀ (x : List α),\n    (∀ (head head_1 x_1 head_2 head_3 : α),\n      x = [head, head_1, x_1, head_2, head_3] → False) →\n    thirdOfFive x = none\nThe final lemma thirdOfFive.eq_2 includes a premise that the first branch could not have matched (that is, that the list does not have exactly five elements).\n\nRecursive Equational LemmasGiven the definition of everyOther:def everyOther : List α → List α\n  | [] => []\n  | [x] => [x]\n  | x :: _ :: xs => x :: everyOther xs\nequational lemmas are generated that relate everyOther's recursor-based implementation to its original recursive definition.everyOther.eq_unfold states that everyOther with no arguments is equal to its unfolding:everyOther.eq_unfold.{u} :\n  @everyOther.{u} = fun {α} x =>\n    match x with\n    | [] => []\n    | [x] => [x]\n    | x :: _ :: xs => x :: everyOther xs\neveryOther.eq_def states that a everyOther is equal to its definition when applied to arguments:everyOther.eq_def.{u} {α : Type u} :\n  ∀ (x : List α),\n    everyOther x =\n      match x with\n      | [] => []\n      | [x] => [x]\n      | x :: _ :: xs => x :: everyOther xs\neveryOther.eq_1 demonstrates its first pattern:everyOther.eq_1.{u} {α : Type u} : everyOther [] = ([] : List α)\neveryOther.eq_2 demonstrates its second pattern:everyOther.eq_2.{u} {α : Type u} (x : α) : everyOther [x] = [x]\neveryOther.eq_3 demonstrates its final pattern:everyOther.eq_3.{u} {α : Type u} (x y : α) (xs : List α) :\n  everyOther (x :: y :: xs) = x :: everyOther xs\nBecause the patterns do not overlap, no assumptions about prior patterns not having matched are necessary for the equational lemmas.\n\nAfter elaborating a module, having checked each addition to the environment with the kernel, the changes that the module made to the global environment (including extensions) are serialized to a .olean file.\nIn these files, Lean terms and values are represented just as they are in memory; thus the file can be directly memory-mapped.\nAll code paths that lead to Lean adding to the environment involve the new type or definition first being checked by the kernel.\nHowever, Lean is a very open, flexible system.\nTo guard against the possibility of poorly-written metaprograms jumping through hoops to add unchecked values to the environment, a separate tool lean4checker can be used to validate that the entire environment in a .olean file satisfies the kernel.\n\nIn addition to the .olean file, the elaborator produces a .ilean file, which is an index used by the language server.\nThis file contains information needed to work interactively with the module without fully loading it, such as the source positions of definitions.\nThe contents of .ilean files are an implementation detail and may change at any release.\n\nFinally, the compiler is invoked to translate the intermediate representation of functions stored in its environment extension into C code.\nA C file is produced for each Lean module; these are then compiled to native code using a bundled C compiler.\nIf the precompileModules option is set in the build configuration, then this native code can be dynamically loaded and invoked by Lean; otherwise, an interpreter is used.\nFor most workloads, the overhead of compilation is larger than the time saved by avoiding the interpreter, but some workloads can be sped up dramatically by pre-compiling tactics, language extensions, or other extensions to Lean.\n\n"},"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--Substrings--Conversions":{"id":"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--Substrings--Conversions","header":"19.8.4.10.8. Conversions","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009API Reference\u0009Substrings","contents":"Copies the region of the underlying string pointed to by a substring into a fresh string.\n\nChecks whether the substring can be interpreted as the decimal representation of a natural number.A substring can be interpreted as a decimal natural number if it is not empty and all the characters\nin it are digits.Use Substring.toNat? to convert such a substring to a natural number.\n\nChecks whether the substring can be interpreted as the decimal representation of a natural number,\nreturning the number if it can.A substring can be interpreted as a decimal natural number if it is not empty and all the characters\nin it are digits.Use Substring.isNat to check whether the substring is such a substring.\n\nReturns an iterator into the underlying string, at the substring's starting position. The ending\nposition is discarded, so the iterator alone cannot be used to determine whether its current\nposition is within the original substring.\n\nConverts a substring to the Lean compiler's representation of names. The resulting name is\nhierarchical, and the string is split at the dots ('.').\"a.b\".toSubstring.toName is the name a.b, not «a.b». For the latter, use\nName.mkSimple ∘ Substring.toString.\n\n"},"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Sets--Iteration":{"id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Sets--Iteration","header":"19.17.10.5. Iteration","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Tree-Based Sets","contents":"Check if any element satisfies the predicate, short-circuiting if a predicate succeeds.\n\nCheck if all elements satisfy the predicate, short-circuiting if a predicate fails.\n\nFolds the given function over the elements of the tree set in ascending order.\n\nMonadically computes a value by folding the given function over the elements in the tree set in\nascending order.\n\nFolds the given function over the elements of the tree set in descending order.\n\nMonadically computes a value by folding the given function over the elements in the tree set in\ndescending order.\n\nSupport for the for loop construct in do blocks. The iteration happens in ascending\norder.\n\nCarries out a monadic action on each element in the tree set in ascending order.\n\n"},"/Basic-Types/Floating-Point-Numbers/#The-Lean-Language-Reference--Basic-Types--Floating-Point-Numbers--API-Reference--Trigonometry":{"id":"/Basic-Types/Floating-Point-Numbers/#The-Lean-Language-Reference--Basic-Types--Floating-Point-Numbers--API-Reference--Trigonometry","header":"19.6.2.9. Trigonometry","context":"Lean Reference\u0009Basic Types\u0009Floating-Point Numbers\u0009API Reference","contents":"\n\n\n\n\n\n"},"/Basic-Types/Arrays/#array-api":{"id":"/Basic-Types/Arrays/#array-api","header":"19.16.4. API Reference","context":"Lean Reference\u0009Basic Types\u0009Arrays","contents":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}});