window.docContents[230].resolve({"/The-Type-System/Inductive-Types/#iota-reduction":{"id":"/The-Type-System/Inductive-Types/#iota-reduction","header":"4.4.3.1.2. Reduction","context":"Lean Reference\u0009Type System\u0009Inductive Types\u0009Logical Model\u0009Recursors","contents":"In addition to adding new constants to the logic, inductive type declarations also add new reduction rules.\nThese rules govern the interaction between recursors and constructors; specifically recursors that have constructors as their major premise.\nThis form of reduction is called ι-reduction (iota reduction).\n\nWhen the recursor's major premise is a constructor with no recursive parameters, the recursor application reduces to an application of the constructor's minor premise to the constructor's arguments.\nIf there are recursive parameters, then these arguments to the minor premise are found by applying the recursor to the recursive occurrence.\n\n"},"/Basic-Types/Floating-Point-Numbers/#The-Lean-Language-Reference--Basic-Types--Floating-Point-Numbers--API-Reference--Properties":{"id":"/Basic-Types/Floating-Point-Numbers/#The-Lean-Language-Reference--Basic-Types--Floating-Point-Numbers--API-Reference--Properties","header":"19.6.2.1. Properties","context":"Lean Reference\u0009Basic Types\u0009Floating-Point Numbers\u0009API Reference","contents":"Floating-point numbers fall into one of three categories:\n\n* Finite numbers are ordinary floating-point values.* Infinities, which may be positive or negative, result from division by zero.* NaNs, which are not numbers, result from other undefined operations, such as the square root of a negative number.\n\nChecks whether a floating-point number is a positive or negative infinite number, but not a finite\nnumber or NaN.This function does not reduce in the kernel. It is compiled to the C operator isinf.\n\nChecks whether a floating-point number is a positive or negative infinite number, but not a finite\nnumber or NaN.This function does not reduce in the kernel. It is compiled to the C operator isinf.\n\nChecks whether a floating point number is NaN (“not a number”) value.NaN values result from operations that might otherwise be errors, such as dividing zero by zero.This function does not reduce in the kernel. It is compiled to the C operator isnan.\n\nChecks whether a floating point number is NaN (\"not a number\") value.NaN values result from operations that might otherwise be errors, such as dividing zero by zero.This function does not reduce in the kernel. It is compiled to the C operator isnan.\n\nChecks whether a floating-point number is finite, that is, whether it is normal, subnormal, or zero,\nbut not infinite or NaN.This function does not reduce in the kernel. It is compiled to the C operator isfinite.\n\nChecks whether a floating-point number is finite, that is, whether it is normal, subnormal, or zero,\nbut not infinite or NaN.This function does not reduce in the kernel. It is compiled to the C operator isfinite.\n\n"}});