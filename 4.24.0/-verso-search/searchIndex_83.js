window.docContents[83].resolve({"/Definitions/Recursive-Definitions/#The-Lean-Language-Reference--Definitions--Recursive-Definitions--Controlling-Reduction--Reducibility-and-Tactics":{"contents":"The tactics with_reducible, with_reducible_and_instances, and with_unfolding_all control which definitions are unfolded by most tactics.\n\nReducibility and TacticsThe functions plus, sum, and tally are all synonyms for Nat.add that are respectively reducible, semireducible, and irreducible:abbrev plus := Nat.add\n\ndef sum := Nat.add\n\n@[irreducible]\ndef tally := Nat.add\nThe reducible synonym is unfolded by simp:theorem plus_eq_add : plus x y = x + y := by simp\nThe semireducible synonym is not, however, unfolded by simp:theorem sum_eq_add : sum x y = x + y := by simp\nNonetheless, the definitional equality check induced by rfl unfolds the sum:theorem sum_eq_add : sum x y = x + y := by rfl\nThe irreducible tally, however, is not reduced by definitional equality.theorem tally_eq_add : tally x y = x + y := by rfl\nThe simp tactic can unfold any definition, even irreducible ones, when they are explicitly provided:theorem tally_eq_add : tally x y = x + y := by simp [tally]\nSimilarly, part of a proof can be instructed to ignore irreducibility by placing it in a with_unfolding_all block:theorem tally_eq_add : tally x y = x + y := by with_unfolding_all rfl\n\n\n","context":"Lean Reference\u0009Definitions\u0009Recursive Definitions\u0009Controlling Reduction","header":"7.6.6.1. Reducibility and Tactics","id":"/Definitions/Recursive-Definitions/#The-Lean-Language-Reference--Definitions--Recursive-Definitions--Controlling-Reduction--Reducibility-and-Tactics"}});