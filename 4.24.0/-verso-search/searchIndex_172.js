window.docContents[172].resolve({"/Basic-Types/The-Unit-Type/#The-Lean-Language-Reference--Basic-Types--The-Unit-Type--Definitional-Equality":{"contents":"Unit-like types are inductive types that have a single constructor which takes no non-proof parameters.\nPUnit is one such type.\nAll elements of unit-like types are definitionally equal to all other elements.\n\nDefinitional Equality of UnitEvery term with type Unit is definitionally equal to every other term with type Unit:example (e1 e2 : Unit) : e1 = e2 := rfl\n\n\nDefinitional Equality of Unit-Like TypesBoth CustomUnit and AlsoUnit are unit-like types, with a single constructor that takes no parameters.\nEvery pair of terms with either type is definitionally equal.inductive CustomUnit where\n  | customUnit\n\nexample (e1 e2 : CustomUnit) : e1 = e2 := rfl\n\nstructure AlsoUnit where\n\nexample (e1 e2 : AlsoUnit) : e1 = e2 := rfl\nTypes with parameters, such as WithParam, are also unit-like if they have a single constructor that does not take parameters.inductive WithParam (n : Nat) where\n  | mk\n\nexample (x y : WithParam 3) : x = y := rfl\nConstructors with non-proof parameters are not unit-like, even if the parameters are all unit-like types.inductive NotUnitLike where\n  | mk (u : Unit)\nexample (e1 e2 : NotUnitLike) : e1 = e2 := rfl\nType mismatch\n  rfl\nhas type\n  ?m.13 = ?m.13\nbut is expected to have type\n  e1 = e2\nConstructors of unit-like types may take parameters that are proofs.inductive ProofUnitLike where\n  | mk : 2 = 2 â†’ ProofUnitLike\n\nexample (e1 e2 : ProofUnitLike) : e1 = e2 := rfl\n\n\n","context":"Lean Reference\u0009Basic Types\u0009The Unit Type","header":"19.9.1. Definitional Equality","id":"/Basic-Types/The-Unit-Type/#The-Lean-Language-Reference--Basic-Types--The-Unit-Type--Definitional-Equality"}});