window.docContents[32].resolve({"/Basic-Types/Booleans/#The-Lean-Language-Reference--Basic-Types--Booleans--Booleans-and-Propositions":{"contents":"Both Bool and Prop represent notions of truth.\nFrom a purely logical perspective, they are equivalent: propositional extensionality means that there are fundamentally only two propositions, namely True and False.\nHowever, there is an important pragmatic difference: Bool classifies values that can be computed by programs, while Prop classifies statements for which code generation doesn't make sense.\nIn other words, Bool is the notion of truth and falsehood that's appropriate for programs, while Prop is the notion that's appropriate for mathematics.\nBecause proofs are erased from compiled programs, keeping Bool and Prop distinct makes it clear which parts of a Lean file are intended for computation.\n\n\n\nA Bool can be used wherever a Prop is expected.\nThere is a coercion from every Bool b to the proposition b = true.\nBy propext, true = true is equal to True, and false = true is equal to False.\n\nNot every proposition can be used by programs to make run-time decisions.\nOtherwise, a program could branch on whether the Collatz conjecture is true or false!\nMany propositions, however, can be checked algorithmically.\nThese propositions are called decidable propositions, and have instances of the Decidable type class.\nThe function Decidable.decide converts a proof-carrying Decidable result into a Bool.\nThis function is also a coercion from decidable propositions to Bool, so (2 = 2 : Bool) evaluates to true.\n\n\n\n","context":"Lean Reference\u0009Basic Types\u0009Booleans","header":"19.11.2. Booleans and Propositions","id":"/Basic-Types/Booleans/#The-Lean-Language-Reference--Basic-Types--Booleans--Booleans-and-Propositions"},"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--Substrings--Folds-and-Aggregation":{"contents":"Folds a function over a substring from the left, accumulating a value starting with init. The\naccumulated value is combined with each character in order, using f.\n\nFolds a function over a substring from the right, accumulating a value starting with init. The\naccumulated value is combined with each character in reverse order, using f.\n\nChecks whether the Boolean predicate p returns true for every character in a substring.Short-circuits at the first character for which p returns false.\n\nChecks whether the Boolean predicate p returns true for any character in a substring.Short-circuits at the first character for which p returns true.\n\n","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009API Reference\u0009Substrings","header":"19.8.4.10.3. Folds and Aggregation","id":"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--Substrings--Folds-and-Aggregation"},"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--Substrings--Lookups":{"contents":"Returns the character at the given position in the substring.The position is relative to the substring, rather than the underlying string, and no bounds checking\nis performed with respect to the substring's end position. If the relative position is not a valid\nposition in the underlying string, the fallback value (default : Char), which is 'A', is\nreturned.  Does not panic.\n\nChecks whether a substring contains the specified character.\n\nReturns the first character in the substring.If the substring is empty, but the substring's start position is a valid position in the underlying\nstring, then the character at the start position is returned. If the substring's start position is\nnot a valid position in the string, the fallback value (default : Char), which is 'A', is\nreturned.  Does not panic.\n\n","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009API Reference\u0009Substrings","header":"19.8.4.10.6. Lookups","id":"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--Substrings--Lookups"},"/Definitions/Recursive-Definitions/#partial-fixpoint-monadic":{"contents":"Defining a function as a partial fixpoint is more powerful if the function's return type is a monad that is an instance of Lean.Order.MonoBind, such as Option.\nIn this case, recursive call are not restricted to tail-positions, but may also occur inside higher-order monadic functions such as bind and List.mapM.\n\nThe set of higher-order functions for which this works is extensible, so no exhaustive list is given here.\nThe aspiration is that a monadic recursive function definition that is built using abstract monadic operations like bind, but that does not open the abstraction of the monad (e.g. by matching on the Option value), is accepted.\nIn particular, using do-notation should work.\n\nMonadic functionsThe following function implements the Ackermann function in the Option monad, and is accepted without an (explicit or implicit) termination proof:def ack : (n m : Nat) → Option Nat\n  | 0,   y   => some (y+1)\n  | x+1, 0   => ack x 1\n  | x+1, y+1 => do ack x (← ack (x+1) y)\npartial_fixpoint\nRecursive calls may also occur within higher-order functions such as List.mapM, if they are set up appropriately, and do-notation:structure Tree where cs : List Tree\n\ndef Tree.rev (t : Tree) : Option Tree := do\n  Tree.mk (← t.cs.reverse.mapM (Tree.rev ·))\npartial_fixpoint\n\ndef Tree.rev' (t : Tree) : Option Tree := do\n  let mut cs := []\n  for c in t.cs do\n    cs := (← c.rev') :: cs\n  return Tree.mk cs\npartial_fixpoint\nPattern matching on the result of the recursive call will prevent the definition by partial fixpoint from going through:def List.findIndex (xs : List α) (p : α → Bool) : Option Nat :=\n  match xs with\n  | [] => none\n  | x::ys =>\n    if p x then\n      some 0\n    else\n      match List.findIndex ys p with\n      | none => none\n      | some r => some (r + 1)\npartial_fixpoint\nCould not prove 'List.findIndex' to be monotone in its recursive calls:\n  Cannot eliminate recursive call `List.findIndex ys p` enclosed in\n    match ys✝.findIndex p with\n    | none => none\n    | some r => some (r + 1)\nIn this particular case, using Functor.map instead of explicit pattern matching helps:def List.findIndex (xs : List α) (p : α → Bool) : Option Nat :=\n  match xs with\n  | [] => none\n  | x::ys =>\n    if p x then\n      some 0\n    else\n      (· + 1) <$> List.findIndex ys p\npartial_fixpoint\n\n\n","context":"Lean Reference\u0009Definitions\u0009Recursive Definitions\u0009Partial Fixpoint Recursion","header":"7.6.4.2. Monadic functions","id":"/Definitions/Recursive-Definitions/#partial-fixpoint-monadic"},"/releases/v4.11.0/#release-v4___11___0":{"contents":"Language features, tactics, and metaprograms* The variable inclusion mechanism has been changed. Like before, when a definition mentions a variable, Lean will add it as an argument of the definition, but now in theorem bodies, variables are not included based on usage in order to ensure that changes to the proof cannot change the statement of the overall theorem. Instead, variables are only available to the proof if they have been mentioned in the theorem header or in an include command or are instance implicit and depend only on such variables. The omit command can be used to omit included variables.See breaking changes below.PRs: #4883, #4814, #5000, #5036, #5138, 0edf1b.* Recursive definitions* Structural recursion can now be explicitly requested usingtermination_by structural x\nin analogy to the existing termination_by x syntax that causes well-founded recursion to be used.\n#4542* #4672 fixes a bug that could lead to ill-typed terms.* The termination_by? syntax no longer forces the use of well-founded recursion, and when structural\nrecursion is inferred, it will print the result using the termination_by structural syntax.* Mutual structural recursion is now supported. This feature supports both mutual recursion over a non-mutual\ndata type, as well as recursion over mutual or nested data types:mutual\ndef Even : Nat → Prop\n  | 0 => True\n  | n+1 => Odd n\n\ndef Odd : Nat → Prop\n  | 0 => False\n  | n+1 => Even n\nend\n\nmutual\ninductive A\n| other : B → A\n| empty\ninductive B\n| other : A → B\n| empty\nend\n\nmutual\ndef A.size : A → Nat\n| .other b => b.size + 1\n| .empty => 0\n\ndef B.size : B → Nat\n| .other a => a.size + 1\n| .empty => 0\nend\n\ninductive Tree where | node : List Tree → Tree\n\nmutual\ndef Tree.size : Tree → Nat\n| node ts => Tree.list_size ts\n\ndef Tree.list_size : List Tree → Nat\n| [] => 0\n| t::ts => Tree.size t + Tree.list_size ts\nend\nFunctional induction principles are generated for these functions as well (A.size.induct, A.size.mutual_induct).Nested structural recursion is still not supported.PRs: #4639, #4715, #4642, #4656, #4684, #4715, #4728, #4575, #4731, #4658, #4734, #4738, #4718, #4733, #4787, #4788, #4789, #4807, #4772* #4809 makes unnecessary termination_by clauses cause warnings, not errors.* #4831 improves handling of nested structural recursion through non-recursive types.* #4839 improves support for structural recursive over inductive predicates when there are reflexive arguments.* simp tactic* #4784 sets configuration Simp.Config.implicitDefEqProofs to true by default.* omega tactic* #4612 normalizes the order that constraints appear in error messages.* #4695 prevents pushing casts into multiplications unless it produces a non-trivial linear combination.* #4989 fixes a regression.* decide tactic* #4711 switches from using default transparency to at least default transparency when reducing the Decidable instance.* #4674 adds detailed feedback on decide tactic failure. It tells you which Decidable instances it unfolded, if it get stuck on Eq.rec it gives a hint about avoiding tactics when defining Decidable instances, and if it gets stuck on Classical.choice it gives hints about classical instances being in scope. During this process, it processes Decidable.recs and matches to pin blame on a non-reducing instance.* @[ext] attribute* #4543 and #4762 make @[ext] realize ext_iff theorems from user ext theorems. Fixes the attribute so that @[local ext] and @[scoped ext] are usable. The @[ext (iff := false)] option can be used to turn off ext_iff realization.* #4694 makes \"go to definition\" work for the generated lemmas. Also adjusts the core library to make use of ext_iff generation.* #4710 makes ext_iff theorem preserve inst implicit binder types, rather than making all binder types implicit.* #eval command* #4810 introduces a safer #eval command that prevents evaluation of terms that contain sorry. The motivation is that failing tactics, in conjunction with operations such as array accesses, can lead to the Lean process crashing. Users can use the new #eval! command to use the previous unsafe behavior. (#4829 adjusts a test.)* #4447 adds #discr_tree_key and #discr_tree_simp_key commands, for helping debug discrimination tree failures. The #discr_tree_key t command prints the discrimination tree keys for a term t (or, if it is a single identifier, the type of that constant). It uses the default configuration for generating keys. The #discr_tree_simp_key command is similar to #discr_tree_key, but treats the underlying type as one of a simp lemma, that is it transforms it into an equality and produces the key of the left-hand side.For example,#discr_tree_key (∀ {a n : Nat}, bar a (OfNat.ofNat n))\n-- bar _ (@OfNat.ofNat Nat _ _)\n\n#discr_tree_simp_key Nat.add_assoc\n-- @HAdd.hAdd Nat Nat Nat _ (@HAdd.hAdd Nat Nat Nat _ _ _) _\n* #4741 changes option parsing to allow user-defined options from the command line. Initial options are now re-parsed and validated after importing. Command line option assignments prefixed with weak. are silently discarded if the option name without the prefix does not exist.* Deriving handlers* 7253ef and a04f3c improve the construction of the BEq deriving handler.* 86af04 makes BEq deriving handler work when there are dependently typed fields.* #4826 refactors the DecidableEq deriving handle to use termination_by structural.* Metaprogramming* #4593 adds unresolveNameGlobalAvoidingLocals.* #4618 deletes deprecated functions from 2022.* #4642 adds Meta.lambdaBoundedTelescope.* #4731 adds Meta.withErasedFVars, to enter a context with some fvars erased from the local context.* #4777 adds assignment validation at closeMainGoal, preventing users from circumventing the occurs check for tactics such as exact.* #4807 introduces Lean.Meta.PProdN module for packing and projecting nested PProds.* #5170 fixes Syntax.unsetTrailing. A consequence of this is that \"go to definition\" now works on the last module name in an import block (issue #4958).Language server, widgets, and IDE extensions* #4727 makes it so that responses to info view requests come as soon as the relevant tactic has finished execution.* #4580 makes it so that whitespace changes do not invalidate imports, and so starting to type the first declaration after imports should no longer cause them to reload.* #4780 fixes an issue where hovering over unimported builtin names could result in a panic.Pretty printing* #4558 fixes the pp.instantiateMVars setting and changes the default value to true.* #4631 makes sure syntax nodes always run their formatters. Fixes an issue where if ppSpace appears in a macro or elab command then it does not format with a space.* #4665 fixes a bug where pretty printed signatures (for example in #check) were overly hoverable due to pp.tagAppFns being set.* #4724 makes match pretty printer be sensitive to pp.explicit, which makes hovering over a match in the Infoview show the underlying term.* #4764 documents why anonymous constructor notation isn't pretty printed with flattening.* #4786 adjusts the parenthesizer so that only the parentheses are hoverable, implemented by having the parentheses \"steal\" the term info from the parenthesized expression.* #4854 allows arbitrarily long sequences of optional arguments to be omitted from the end of applications, versus the previous conservative behavior of omitting up to one optional argument.Library* Nat* #4597 adds bitwise lemmas Nat.and_le_(left|right).* #4874 adds simprocs for simplifying bit expressions.* Int* #4903 fixes performance of HPow Int Nat Int synthesis by rewriting it as a NatPow Int instance.* UInt* and Fin* #4605 adds lemmas.* #4629 adds *.and_toNat.* Option* #4599 adds get lemmas.* #4600 adds Option.or, a version of Option.orElse that is strict in the second argument.* GetElem* #4603 adds getElem_congr to help with rewriting indices.* List and Array* Upstreamed from Batteries: #4586 upstreams List.attach and Array.attach, #4697 upstreams List.Subset and List.Sublist and API, #4706 upstreams basic material on List.Pairwise and List.Nodup, #4720 upstreams more List.erase API, #4836 and #4837 upstream List.IsPrefix/List.IsSuffix/List.IsInfix and add Decidable instances, #4855 upstreams List.tail, List.findIdx, List.indexOf, List.countP, List.count, and List.range', #4856 upstreams more List lemmas, #4866 upstreams List.pairwise_iff_getElem, #4865 upstreams List.eraseIdx lemmas.* #4687 adjusts List.replicate simp lemmas and simprocs.* #4704 adds characterizations of List.Sublist.* #4707 adds simp normal form tests for List.Pairwise and List.Nodup.* #4708 and #4815 reorganize lemmas on list getters.* #4765 adds simprocs for literal array accesses such as #[1,2,3,4,5][2].* #4790 removes typeclass assumptions for List.Nodup.eraseP.* #4801 adds efficient usize functions for array types.* #4820 changes List.filterMapM to run left-to-right.* #4835 fills in and cleans up gaps in List API.* #4843, #4868, and #4877 correct List.Subset lemmas.* #4863 splits Init.Data.List.Lemmas into function-specific files.* #4875 fixes statement of List.take_takeWhile.* Lemmas: #4602, #4627, #4678 for List.head and list.getLast, #4723 for List.erase, #4742* ByteArray* #4582 eliminates partial from ByteArray.toList and ByteArray.findIdx?.* BitVec* #4568 adds recurrence theorems for bitblasting multiplication.* #4571 adds shiftLeftRec lemmas.* #4872 adds ushiftRightRec and lemmas.* #4873 adds getLsb_replicate.* Std.HashMap added:* #4583 adds Std.HashMap as a verified replacement for Lean.HashMap. See the PR for naming differences, but #4725 renames HashMap.remove to HashMap.erase.* #4682 adds Inhabited instances.* #4732 improves BEq argument order in hash map lemmas.* #4759 makes lemmas resolve instances via unification.* #4771 documents that hash maps should be used linearly to avoid expensive copies.* #4791 removes bif from hash map lemmas, which is inconvenient to work with in practice.* #4803 adds more lemmas.* SMap* #4690 upstreams SMap.foldM.* BEq* #4607 adds PartialEquivBEq, ReflBEq, EquivBEq, and LawfulHashable classes.* IO* #4660 adds IO.Process.Child.tryWait.* #4747, #4730, and #4756 add ×' syntax for PProd. Adds a delaborator for PProd and MProd values to pretty print as flattened angle bracket tuples.* Other fixes or improvements* #4604 adds lemmas for cond.* #4619 changes some definitions into theorems.* #4616 fixes some names with duplicated namespaces.* #4620 fixes simp lemmas flagged by the simpNF linter.* #4666 makes the Antisymm class be a Prop.* #4621 cleans up unused arguments flagged by linter.* #4680 adds imports for orphaned Init modules.* #4679 adds imports for orphaned Std.Data modules.* #4688 adds forward and backward directions of not_exists.* #4689 upstreams eq_iff_true_of_subsingleton.* #4709 fixes precedence handling for Repr instances for negative numbers for Int and Float.* #4760 renames TC (\"transitive closure\") to Relation.TransGen.* #4842 fixes List deprecations.* #4852 upstreams some Mathlib attributes applied to lemmas.* 93ac63 improves proof.* #4862 and #4878 generalize the universe for PSigma.exists and rename it to Exists.of_psigma_prop.* Typos: #4737, 7d2155* Docs: #4782, #4869, #4648Lean internals* Elaboration* #4596 enforces isDefEqStuckEx at unstuckMVar procedure, causing isDefEq to throw a stuck defeq exception if the metavariable was created in a previous level. This results in some better error messages, and it helps rw succeed in synthesizing instances (see issue #2736).* #4713 fixes deprecation warnings when there are overloaded symbols.* elab_as_elim algorithm:* #4722 adds check that inferred motive is type-correct.* #4800 elaborates arguments for parameters appearing in the types of targets.* #4817 makes the algorithm correctly handle eliminators with explicit motive arguments.* #4792 adds term elaborator for Lean.Parser.Term.namedPattern (e.g. n@(n' + 1)) to report errors when used in non-pattern-matching contexts.* #4818 makes anonymous dot notation work when the expected type is a pi-type-valued type synonym.* Typeclass inference* #4646 improves synthAppInstances, the function responsible for synthesizing instances for the rw and apply tactics. Adds a synthesis loop to handle functions whose instances need to be synthesized in a complex order.* Inductive types* #4684 (backported as 98ee78) refactors InductiveVal to have a numNested : Nat field instead of isNested : Bool. This modifies the kernel.* Definitions* #4776 improves performance of Replacement.apply.* #4712 fixes .eq_def theorem generation with messy universes.* #4841 improves success of finding T.below x hypothesis when transforming match statements for IndPredBelow.* Diagnostics and profiling* #4611 makes kernel diagnostics appear when diagnostics is enabled even if it is the only section.* #4753 adds missing profileitM functions.* #4754 adds Lean.Expr.numObjs to compute the number of allocated sub-expressions in a given expression, primarily for diagnosing performance issues.* #4769 adds missing withTraceNodes to improve trace.profiler output.* #4781 and #4882 make the \"use set_option diagnostics true\" message be conditional on current setting of diagnostics.* Performance* #4767, #4775, and #4887 add ShareCommon.shareCommon' for sharing common terms. In an example with 16 million subterms, it is 20 times faster than the old shareCommon procedure.* #4779 ensures Expr.replaceExpr preserves DAG structure in Exprs.* #4783 documents performance issue in Expr.replaceExpr.* #4794, #4797, #4798 make for_each use precise cache.* #4795 makes Expr.find? and Expr.findExt? use the kernel implementations.* #4799 makes Expr.replace use the kernel implementation.* #4871 makes Expr.foldConsts use a precise cache.* #4890 makes expr_eq_fn use a precise cache.* Utilities* #4453 upstreams ToExpr FilePath and compile_time_search_path%.* Module system* #4652 fixes handling of const2ModIdx in finalizeImport, making it prefer the original module for a declaration when a declaration is re-declared.* Kernel* #4637 adds a check to prevent large Nat exponentiations from evaluating. Elaborator reduction is controlled by the option exponentiation.threshold.* #4683 updates comments in kernel/declaration.h, making sure they reflect the current Lean 4 types.* #4796 improves performance by using replace with a precise cache.* #4700 improves performance by fixing the implementation of move constructors and move assignment operators. Expression copying was taking 10% of total runtime in some workloads. See issue #4698.* #4702 improves performance in replace_rec_fn::apply by avoiding expression copies. These copies represented about 13% of time spent in save_result in some workloads. See the same issue.* Other fixes or improvements* #4590 fixes a typo in some constants and trace.profiler.useHeartbeats.* #4617 add 'since' dates to deprecated attributes.* #4625 improves the robustness of the constructor-as-variable test.* #4740 extends test with nice example reported on Zulip.* #4766 moves Syntax.hasIdent to be available earlier and shakes dependencies.* #4881 splits out Lean.Language.Lean.Types.* #4893 adds LEAN_EXPORT for sharecommon functions.* Typos: #4635, #4719, af40e6* Docs: #4748 (Command.Scope)Compiler, runtime, and FFI* #4661 moves Std from libleanshared to much smaller libInit_shared. This fixes the Windows build.* #4668 fixes initialization, explicitly initializing Std in lean_initialize.* #4746 adjusts shouldExport to exclude more symbols to get below Windows symbol limit. Some exceptions are added by #4884 and #4956 to support Verso.* #4778 adds lean_is_exclusive_obj (Lean.isExclusiveUnsafe) and lean_set_external_data.* #4515 fixes calling programs with spaces on Windows.Lake* #4735 improves a number of elements related to Git checkouts, cloud releases,\nand related error handling.* On error, Lake now prints all top-level logs. Top-level logs are those produced by Lake outside of the job monitor (e.g., when cloning dependencies).* When fetching a remote for a dependency, Lake now forcibly fetches tags. This prevents potential errors caused by a repository recreating tags already fetched.* Git error handling is now more informative.* The builtin package facets release, optRelease, extraDep are now captions in the same manner as other facets.* afterReleaseSync and afterReleaseAsync now fetch optRelease rather than release.* Added support for optional jobs, whose failure does not cause the whole build to failure. Now optRelease is such a job.* #4608 adds draft CI workflow when creating new projects.* #4847 adds CLI options to control log levels. The --log-level=<lv> controls the minimum log level Lake should output. For instance, --log-level=error will only print errors (not warnings or info). Also, adds an analogous --fail-level option to control the minimum log level for build failures. The existing --iofail and --wfail options are respectively equivalent to --fail-level=info and --fail-level=warning.* Docs: #4853DevOps/CI* Workflows* #4531 makes release trigger an update of release.lean-lang.org.* #4598 adjusts pr-release to the new lakefile.lean syntax.* #4632 makes pr-release use the correct tag name.* #4638 adds ability to manually trigger nightly release.* #4640 adds more debugging output for restart-on-label CI.* #4663 bumps up waiting for 10s to 30s for restart-on-label.* #4664 bumps versions for actions/checkout and actions/upload-artifacts.* 582d6e bumps version for actions/download-artifact.* 6d9718 adds back dropped check-stage3.* 0768ad adds Jira sync (for FRO).* #4830 adds support to report CI errors on FRO Zulip.* #4838 adds trigger for nightly_bump_toolchain on mathlib4 upon nightly release.* abf420 fixes msys2.* #4895 deprecates Nix-based builds and removes interactive components. Users who prefer the flake build should maintain it externally.* #4693, #4458, and #4876 update the release checklist.* #4669 fixes the \"max dynamic symbols\" metric per static library.* #4691 improves compatibility of tests/list_simp for retesting simp normal forms with Mathlib.* #4806 updates the quickstart guide.* c02aa9 documents the triage team in the contribution guide.Breaking changes* For @[ext]-generated ext and ext_iff lemmas, the x and y term arguments are now implicit. Furthermore these two lemmas are now protected (#4543).* Now trace.profiler.useHearbeats is trace.profiler.useHeartbeats (#4590).* A bugfix in the structural recursion code may in some cases break existing code, when a parameter of the type of the recursive argument is bound behind indices of that type. This can usually be fixed by reordering the parameters of the function (#4672).* Now List.filterMapM sequences monadic actions left-to-right (#4820).* The effect of the variable command on proofs of theorems has been changed. Whether such section variables are accessible in the proof now depends only on the theorem signature and other top-level commands, not on the proof itself. This change ensures that* the statement of a theorem is independent of its proof. In other words, changes in the proof cannot change the theorem statement.* tactics such as induction cannot accidentally include a section variable.* the proof can be elaborated in parallel to subsequent declarations in a future version of Lean.The effect of variables on the theorem header as well as on other kinds of declarations is unchanged.Specifically, section variables are included if they* are directly referenced by the theorem header,* are included via the new include command in the current section and not subsequently mentioned in an omit statement,* are directly referenced by any variable included by these rules, OR* are instance-implicit variables that reference only variables included by these rules.For porting, a new option deprecated.oldSectionVars is included to locally switch back to the old behavior.\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.11.0 (2024-09-02)","id":"/releases/v4.11.0/#release-v4___11___0"},"/releases/v4.20.0/#release-v4___20___0":{"contents":"For this release, 346 changes landed. In addition to the 108 feature additions and 85 fixes listed below there were 6 refactoring changes, 7 documentation improvements, 8 performance improvements, 4 improvements to the test suite and 126 other changes.HighlightsThe Lean v4.20.0 release brings multiple new features, bug fixes, improvements to Lake, and groundwork for the module system.Language Features* #6432 implements tactics called extract_lets and lift_lets that\nmanipulate let/let_fun expressions. The extract_lets tactic\ncreates new local declarations extracted from any let and let_fun\nexpressions in the main goal. For top-level lets in the target, it is\nlike the intros tactic, but in general it can extract lets from deeper\nsubexpressions as well. The lift_lets tactic moves let and let_fun\nexpressions as far out of an expression as possible, but it does not\nextract any new local declarations. The option extract_lets +lift\ncombines these behaviors.* #7806 modifies the syntaxes of the ext, intro and enter conv\ntactics to accept _. The introduced binder is an inaccessible name.* #7830 modifies the syntax of induction, cases, and other tactics\nthat use Lean.Parser.Tactic.inductionAlts. If a case omits => ...\nthen it is assumed to be => ?_. Example:example (p : Nat × Nat) : p.1 = p.1 := by\n  cases p with | _ p1 p2\n  /-\n  case mk\n  p1 p2 : Nat\n  ⊢ (p1, p2).fst = (p1, p2).fst\n  -/\nThis works with multiple cases as well. Example:example (n : Nat) : n + 1 = 1 + n := by\n  induction n with | zero | succ n ih\n  /-\n  case zero\n  ⊢ 0 + 1 = 1 + 0\n\n  case succ\n  n : Nat\n  ih : n + 1 = 1 + n\n  ⊢ n + 1 + 1 = 1 + (n + 1)\n  -/\nThe induction n with | zero | succ n ih is short for induction n with | zero | succ n ih => ?_, which is short for induction n with | zero => ?_ | succ n ih => ?_. Note that a consequence of parsing is that\nonly the last alternative can omit =>. Any =>-free alternatives\nbefore an alternative with => will be a part of that alternative.* #7831 adds extensibility to the evalAndSuggest procedure used to\nimplement try?. Users can now implement their own handlers for any\ntactic.-- Install a `TryTactic` handler for `assumption`\n@[try_tactic assumption]\ndef evalTryApply : TryTactic := fun tac => do\n  -- We just use the default implementation, but return a different tactic.\n  evalAssumption tac\n  `(tactic| (trace \"worked\"; assumption))\n\n/-- info: Try this: · trace \"worked\"; assumption -/\n#guard_msgs (info) in\nexample (h : False) : False := by\n  try? (max := 1) -- at most one solution\n\n-- `try?` uses `evalAndSuggest` the attribute `[try_tactic]` is used to extend `evalAndSuggest`.\n-- Let's define our own `try?` that uses `evalAndSuggest`\nelab stx:\"my_try?\" : tactic => do\n  -- Things to try\n  let toTry ← `(tactic| attempt_all | assumption | apply True | rfl)\n  evalAndSuggest stx toTry\n\n/--\ninfo: Try these:\n• · trace \"worked\"; assumption\n• rfl\n-/\n#guard_msgs (info) in\nexample (a : Nat) (h : a = a) : a = a := by\n  my_try?\n* #8055 adds an implementation of an async IO multiplexing framework as\nwell as an implementation of it for the Timer API in order to\ndemonstrate it.* #8088 adds the “unfolding” variant of the functional induction and\nfunctional cases principles, under the name foo.induct_unfolding resp.\nfoo.fun_cases_unfolding. These theorems combine induction over the\nstructure of a recursive function with the unfolding of that function,\nand should be more reliable, easier to use and more efficient than just\ncase-splitting and then rewriting with equational theorems.For example instead ofackermann.induct\n  (motive : Nat → Nat → Prop)\n  (case1 : ∀ (m : Nat), motive 0 m)\n  (case2 : ∀ (n : Nat), motive n 1 → motive (Nat.succ n) 0)\n  (case3 : ∀ (n m : Nat), motive (n + 1) m → motive n (ackermann (n + 1) m) → motive (Nat.succ n) (Nat.succ m))\n  (x x : Nat) : motive x x\none getsackermann.fun_cases_unfolding\n  (motive : Nat → Nat → Nat → Prop)\n  (case1 : ∀ (m : Nat), motive 0 m (m + 1))\n  (case2 : ∀ (n : Nat), motive n.succ 0 (ackermann n 1))\n  (case3 : ∀ (n m : Nat), motive n.succ m.succ (ackermann n (ackermann (n + 1) m)))\n  (x✝ x✝¹ : Nat) : motive x✝ x✝¹ (ackermann x✝ x✝¹)\n* #8097 adds support for inductive and coinductive predicates defined\nusing lattice theoretic structures on Prop. These are syntactically\ndefined using greatest_fixpoint or least_fixpoint termination\nclauses for recursive Prop-valued functions. The functionality relies\non partial_fixpoint machinery and requires function definitions to be\nmonotone. For non-mutually recursive predicates, an appropriate\n(co)induction proof principle (given by Park induction) is generated.Library Highlights#8004 adds extensional hash maps and hash sets under the names\nStd.ExtDHashMap, Std.ExtHashMap and Std.ExtHashSet. Extensional\nhash maps work like regular hash maps, except that they have\nextensionality lemmas which make them easier to use in proofs. This\nhowever makes it also impossible to regularly iterate over its entries.Other notable library developments in this release include:* Updates to the Option API,* Async runtime developments: added support for multiplexing via UDP and TCP sockets, as well as channels,* New BitVec definitions related to overflow handling,* New lemmas for Nat.lcm, and Int variants for Nat.gcd and Nat.lcm,* Upstreams from Mathlib related to Nat and Int,* Additions to numeric types APIs, such as UIntX.ofInt, Fin.ofNat'_mul and Fin.mul_ofNat', Int.toNat_sub'',* Updates to Perm API in Array, List, and added support for Vector,* Additional lemmas for Array/List/Vector.Lake* #7909 adds Lake support for building modules given their source file\npath. This is made use of in both the CLI and the server.Breaking Changes* #7474 updates rw?, show_term, and other tactic-suggesting tactics\nto suggest expose_names when necessary and validate tactics prior to\nsuggesting them, as exact? already did, and it also ensures all such\ntactics produce hover info in the messages showing tactic suggestions.This introduces a breaking change in the TryThis API: the type? parameter\nof addRewriteSuggestion is now an LOption, not an Option, to obviate the need\nfor a hack we previously used to indicate that a rewrite closed the goal.* #7789 fixes lean potentially changing or interpreting arguments\nafter --run.Breaking change: The Lean file to run must now be passed directly\nafter --run, which accidentally was not enforced before.* #7813 fixes an issue where let n : Nat := sorry in the Infoview\npretty prints as n : ℕ := sorry `«Foo:17:17». This was caused by\ntop-level expressions being pretty printed with the same rules as\nInfoview hovers. Closes #6715. Refactors Lean.Widget.ppExprTagged; now\nit takes a delaborator, and downstream users should configure their own\npretty printer option overrides if necessary if they used the explicit\nargument (see Lean.Widget.makePopup.ppExprForPopup for an example).\nBreaking change: ppExprTagged does not set pp.proofs on the root\nexpression.* #7855 moves ReflBEq to Init.Core and changes LawfulBEq to extend\nReflBEq.Breaking changes:* The refl field of ReflBEq has been renamed to rfl to match\nLawfulBEq* LawfulBEq extends ReflBEq, so in particular LawfulBEq.rfl is no\nlonger valid* #7873 fixes a number of bugs related to the handling of the source\nsearch path in the language server, where deleting files could cause\nseveral features to stop functioning and both untitled files and files\nthat don't exist on disc could have conflicting module names.See the PR description for the details on changes in URI <-> module name conversion.Breaking changes:* Server.documentUriFromModule has been renamed to\nServer.documentUriFromModule? and doesn't take a SearchPath argument\nanymore, as the SearchPath is now computed from the LEAN_SRC_PATH\nenvironment variable. It has also been moved from Lean.Server.GoTo to\nLean.Server.Utils.* Server.moduleFromDocumentUri does not take a SearchPath argument\nanymore and won't return an Option anymore. It has also been moved\nfrom Lean.Server.GoTo to Lean.Server.Utils.* The System.SearchPath.searchModuleNameOfUri function has been\nremoved. It is recommended to use Server.moduleFromDocumentUri\ninstead.* The initSrcSearchPath function has been renamed to\ngetSrcSearchPath and has been moved from Lean.Util.Paths to\nLean.Util.Path. It also doesn't need to take a pkgSearchPath\nargument anymore.* #7967 adds a bootstrap option to Lake which is used to identify the\ncore Lean package. This enables Lake to use the current stage's include\ndirectory rather than the Lean toolchains when compiling Lean with Lean\nin core.Breaking change: The Lean library directory is no longer part of\ngetLeanLinkSharedFlags. FFI users should provide this option\nseparately when linking to Lean (e.g.. via s!\"-L{(←getLeanLibDir).toString}\").\nSee the FFI example for a demonstration.Language* #6325 ensures that environments can be loaded, repeatedly, without\nexecuting arbitrary code* #6432 implements tactics called extract_lets and lift_lets that\nmanipulate let/let_fun expressions. The extract_lets tactic\ncreates new local declarations extracted from any let and let_fun\nexpressions in the main goal. For top-level lets in the target, it is\nlike the intros tactic, but in general it can extract lets from deeper\nsubexpressions as well. The lift_lets tactic moves let and let_fun\nexpressions as far out of an expression as possible, but it does not\nextract any new local declarations. The option extract_lets +lift\ncombines these behaviors.* #7474 updates rw?, show_term, and other tactic-suggesting tactics\nto suggest expose_names when necessary and validate tactics prior to\nsuggesting them, as exact? already did, and it also ensures all such\ntactics produce hover info in the messages showing tactic suggestions.* #7797 adds a monolithic CommRing class, for internal use by grind,\nand includes instances for Int/BitVec/IntX/UIntX.* #7803 adds normalization rules for function composition to grind.* #7806 modifies the syntaxes of the ext, intro and enter conv\ntactics to accept _. The introduced binder is an inaccessible name.* #7808 adds missing forall normalization rules to grind.* #7816 fixes an issue where x.f.g wouldn't work but (x.f).g would\nwhen x.f is generalized field notation. The problem was that x.f.g\nwould assume x : T should be the first explicit argument to T.f. Now\nit uses consistent argument insertion rules. Closes #6400.* #7825 improves support for Nat in the cutsat procedure used in\ngrind:* cutsat no longer pollutes the local context with facts of the form\n-1 * NatCast.natCast x <= 0 for each x : Nat. These facts are now\nstored internally in the cutsat state.* A single context is now used for all Nat terms.* #7829 fixes an issue in the cutsat counterexamples. It removes the\noptimization (Cutsat.State.terms) that was used to avoid the new\ntheorem eq_def. In the two new tests, prior to this PR, cutsat\nproduced a bogus counterexample with b := 2.* #7830 modifies the syntax of induction, cases, and other tactics\nthat use Lean.Parser.Tactic.inductionAlts. If a case omits => ...\nthen it is assumed to be => ?_. Example:example (p : Nat × Nat) : p.1 = p.1 := by\n  cases p with | _ p1 p2\n  /-\n  case mk\n  p1 p2 : Nat\n  ⊢ (p1, p2).fst = (p1, p2).fst\n  -/\nThis works with multiple cases as well. Example:example (n : Nat) : n + 1 = 1 + n := by\n  induction n with | zero | succ n ih\n  /-\n  case zero\n  ⊢ 0 + 1 = 1 + 0\n\n  case succ\n  n : Nat\n  ih : n + 1 = 1 + n\n  ⊢ n + 1 + 1 = 1 + (n + 1)\n  -/\nThe induction n with | zero | succ n ih is short for induction n with | zero | succ n ih => ?_, which is short for induction n with | zero => ?_ | succ n ih => ?_. Note that a consequence of parsing is that\nonly the last alternative can omit =>. Any =>-free alternatives\nbefore an alternative with => will be a part of that alternative.* #7831 adds extensibility to the evalAndSuggest procedure used to\nimplement try?. Users can now implement their own handlers for any\ntactic. The new test demonstrates how this feature works.* #7859 allows the LRAT parser to accept any proof that derives the\nempty clause at somepoint, not necessarily in the last line. Some tools\nlike lrat-trim occasionally include deletions after the derivation of\nthe empty clause but the proof is sound as long as it soundly derives\nthe empty clause somewhere.* #7861 fixes an issue that prevented theorems from being activated in\ngrind.* #7862 improves the normalization of Bool terms in grind. Recall\nthat grind currently does not case split on Boolean terms to reduce\nthe size of the search space.* #7864 adds support to grind for case splitting on implications of\nthe form p -> q and (h : p) -> q h. See the new option (splitImp := true).* #7865 adds a missing propagation rule for implication in grind. It\nalso avoids unnecessary case-splits on implications.* #7870 adds a mixin typeclass for Lean.Grind.CommRing recording the\ncharacteristic of the ring, and constructs instances for Int, IntX,\nUIntX, and BitVec.* #7885 fixes the counterexamples produced by the cutsat procedure in\ngrind for examples containing Nat terms.* #7892 improves the support for funext in grind. We will push\nanother PR to minimize the number of case-splits later.* #7902 introduces a dedicated option for checking whether elaborators\nare running in the language server.* #7905 fixes an issue introduced bug #6125 where an inductive or\nstructure with an autoimplicit parameter with a type that has a\nmetavariable would lead to a panic. Closes #7788.* #7907 fixes two bugs in grind.1. Model-based theory combination was creating type incorrect terms.2. Nat.cast vs NatCast.natCast issue during normalization.* #7914 adds a function hook PersistentEnvExtension.saveEntriesFn that\ncan be used to store server-only metadata such as position information\nand docstrings that should not affect (re)builds.* #7920 introduces a fast path based on comparing the (cached) hash\nvalue to the DecidableEq instance of the core expression data type in\nbv_decide's bitblaster.* #7926 fixes two issues that were preventing grind to solve\ngetElem?_eq_some_iff.1. Missing propagation rule for Exists p = False2. Missing conditions at isCongrToPrevSplit a filter for discarding\nunnecessary case-splits.* #7937 implements a lookahead feature to reduce the size of the search\nspace in grind. It is currently effective only for arithmetic atoms.* #7949 adds the attribute [grind ext]. It is used to select which\n[ext] theorems should be used by grind. The option grind +extAll\ninstructs grind to use all [ext] theorems available in the\nenvironment.\nAfter update stage0, we need to add the builtin [grind ext]\nannotations to key theorems such as funext.* #7950 modifies all_goals so that in recovery mode it commits changes\nto the state only for those goals for which the tactic succeeds (while\npreserving the new message log state). Before, we were trusting that\nfailing tactics left things in a reasonable state, but now we roll back\nand admit the goal. The changes also fixes a bug where we were rolling\nback only the metacontext state and not the tactic state, leading to an\ninconsistent state (a goal list with metavariables not in the\nmetacontext). Closes #7883* #7952 makes two improvements to the local context when there are\nautobound implicits in variables. First, the local context no longer\nhas two copies of every variable (the local context is rebuilt if the\ntypes of autobound implicits have metavariables). Second, these\nmetavariables get names using the same algorithm used by binders that\nappear in declarations (with mkForallFVars' instead of\nmkForallFVars).* #7957 ensures that mkAppM can be used to construct terms that are\nonly type-correct at at default transparency, even if we are in\nwithReducible (e.g. in simp), so that simp does not stumble over\nsimplifying let expression with simplifiable type.reliable.* #7961 fixes a bug in bv_decide where if it was presented with a match\non an enum with as many arms as constructors but the last arm being a\ndefault match it would (wrongly) give up on the match.* #7975 reduces the priority of the parent projections of\nLean.Grind.CommRing, to avoid these being used in typeclass inference\nin Mathlib.* #7976 ensure that bv_decide can handle the simp normal form of a\nshift.* #7978 adds a repro for a non-determinism problem in grind.* #7980 adds a simple type for representing monomials in a CommRing.\nThis is going to be used in grind.* #7986 implements reverse lexicographical and graded reverse\nlexicographical orders for CommRing monomials.* #7989 adds functions and theorems for CommRing multivariate\npolynomials.* #7992 add a function for converting CommRing expressions into\nmultivariate polynomials.* #7997 removes all type annotations (optional paramters, auto\nparameters, out params, semi-out params, not just optional parameters as\nbefore) from the type of functional induction principles.* #8011 adds IsCharP support to the multivariate‑polynomial library in\nCommRing.* #8012 adds the option debug.terminalTacticsAsSorry. When enabled,\nterminal tactics such as grind and omega are replaced with sorry.\nUseful for debugging and fixing bootstrapping issues.* #8014 makes RArray universe polymorphic.* #8016 fixes several issues in the CommRing multivariate polynomial\nlibrary:1. Replaces the previous array type with the universe polymorphic\nRArray.2. Properly eliminates cancelled monomials.3. Sorts monomials in decreasing order.4. Marks the parameter p of the IsCharP class as an output\nparameter.5. Adds LawfulBEq instances for the types Power, Mon, and Poly.* #8025 simplifies the CommRing monomials, and adds1. Monomial lcm2. Monomial division3. S-polynomials* #8029 implements basic support for CommRing in grind. Terms are\nalready being reified and normalized. We still need to process the\nequations, but grind can already prove simple examples such as:open Lean.Grind in\nexample [CommRing α] (x : α) : (x + 1)*(x - 1) = x^2 - 1 := by\n  grind +ring\n\n* #8032 adds support to grind for detecting unsatisfiable commutative\nring equations when the ring characteristic is known. Examples:example (x : Int) : (x + 1)*(x - 1) = x^2 → False := by\n  grind +ring\n\n* #8033 adds functions for converting CommRing reified terms back into\nLean expressions.* #8036 fixes a linearity issue in bv_decide's bitblaster, caused by\nthe fact that the higher order combinators AIG.RefVec.zip and\nAIG.RefVec.fold were not being properly specialised.* #8042 makes IntCast a field of Lean.Grind.CommRing, along with\nadditional axioms relating it to negation of OfNat. This allows use to\nuse existing instances which are not definitionally equal to the\npreviously given construction.* #8043 adds NullCert type for representing Nullstellensatz\ncertificates that will be produced by the new commutative ring procedure\nin grind.* #8050 fixes missing trace messages when produced inside realizeConst* #8055 adds an implementation of an async IO multiplexing framework as\nwell as an implementation of it for the Timer API in order to\ndemonstrate it.* #8064 adds a failing grind test, showing a bug where grind is trying\nto assign a metavariable incorrectly.* #8065 adds a (failing) test case for an obstacle I've been running\ninto setting up grind for HashMap.* #8068 ensures that for modules opted into the experimental module\nsystem, we do not import module docstrings or declaration ranges.* #8076 fixes simp?!, simp_all?! and dsimp?! to do auto-unfolding.* #8077 adds simprocs to simplify appends of non-overlapping Bitvector\nadds. We add a simproc instead of just a simp lemma to ensure that we\ncorrectly rewrite bitvector appends. Since bitvector appends lead to\ncomputation at the bitvector width level, it seems to be more stable to\nwrite a simproc.* #8083 fixes #8081.* #8086 makes sure that the functional induction priciples for mutually\nrecursive structural functions with extra parameters are split deeply,\nas expected.* #8088 adds the “unfolding” variant of the functional induction and\nfunctional cases principles, under the name foo.induct_unfolding resp.\nfoo.fun_cases_unfolding. These theorems combine induction over the\nstructure of a recursive function with the unfolding of that function,\nand should be more reliable, easier to use and more efficient than just\ncase-splitting and then rewriting with equational theorems.* #8090 adjusts the experimental module system to elide theorem bodies\n(i.e. proofs) from being imported into other modules.* #8094 fixes the generation of functional induction principles for\nfunctions with nested nested well-founded recursion and late fixed\nparameters. This is a follow-up for #7166. Fixes #8093.* #8096 lets induction accept eliminator where the motive application\nin the conclusion has complex arguments; these are abstracted over using\nkabstract if possible. This feature will go well with unfolding\ninduction principles (#8088).* #8097 adds support for inductive and coinductive predicates defined\nusing lattice theoretic structures on Prop. These are syntactically\ndefined using greatest_fixpoint or least_fixpoint termination\nclauses for recursive Prop-valued functions. The functionality relies\non partial_fixpoint machinery and requires function definitions to be\nmonotone. For non-mutually recursive predicates, an appropriate\n(co)induction proof principle (given by Park induction) is generated.* #8101 fixes a parallelism regression where linters that e.g. check for\nerrors in the command would no longer find such messages.* #8102 allows ASCII <- in if let clauses, for consistency with\nbind, where both are allowed. Fixes #8098.* #8111 adds the helper type class NoZeroNatDivisors for the\ncommutative ring procedure in grind. Core only implements it for\nInt. It can be instantiated in Mathlib for any type A that\nimplements NoZeroSMulDivisors Nat A.\nSee findSimp? and PolyDerivation for details on how this instance\nimpacts the commutative ring procedure.* #8122 implements the generation of compact proof terms for\nNullstellensatz certificates in the new commutative ring procedure in\ngrind. Some examples:example [CommRing α] (x y : α) : x = 1 → y = 2 → 2*x + y = 4 := by\n  grind +ring\n\n* #8126 implements the main loop of the new commutative ring procedure\nin grind. In the main loop, for each polynomial p in the todo queue,\nthe procedure:* Simplifies it using the current basis.* Computes critical pairs with polynomials already in the basis and adds\nthem to the queue.* #8128 implements equality propagation in the new commutative ring\nprocedure in grind. The idea is to propagate implied equalities back\nto the grind core module that does congruence closure. In the\nfollowing example, the equalities: x^2*y = 1 and x*y^2 - y = 0 imply\nthat y*x is equal to y*x*y, which implies by congruence that f (y*x) = f (y*x*y).example [CommRing α] (x y : α) (f : α → Nat) : x^2*y = 1 → x*y^2 - y = 0 → f (y*x) = f (y*x*y) := by\n  grind +ring\n* #8129 updates the If-Normalization example, to separately give an\nimplementation and subsequently prove the spec (using fun_induction),\ninstead of previously building a term in the subtype directly. At the\nsame time, adds a (failing) grind test case illustrating a problem\nwith unused match witnesses.* #8131 adds a configuration option that controls the maximum number of\nsteps the commutative-ring procedure in grind performs.* #8133 fixes the monomial order used by the commutative ring procedure\nin grind. The following new test now terminates quickly.example [CommRing α] (a b c : α)\n  : a + b + c = 3 →\n    a^2 + b^2 + c^2 = 5 →\n    a^3 + b^3 + c^3 = 7 →\n    a^4 + b^4 + c^4 = 9 := by\n  grind +ring\n* #8134 ensures that set_option grind.debug true works properly when\nusing grind +ring. It also adds the helper functions mkPropEq and\nmkExpectedPropHint.* #8137 improves equality propagation (also known as theory combination)\nand polynomial simplification for rings that do not implement the\nNoZeroNatDivisors class. With these fixes, grind can now solve:example [CommRing α] (a b c : α) (f : α → Nat)\n  : a + b + c = 3 →\n    a^2 + b^2 + c^2 = 5 →\n    a^3 + b^3 + c^3 = 7 →\n    f (a^4 + b^4) + f (9 - c^4) ≠ 1 := by\n  grind +ring\nThis example uses the commutative ring procedure, the linear integer\narithmetic solver, and congruence closure.\nFor rings that implement NoZeroNatDivisors, a polynomial is now also\ndivided by the greatest common divisor (gcd) of its coefficients when it\nis inserted into the basis.* #8157 fixes an incompatibility of replayConst as used by e.g.\naesop with native_decide-using tactics such as bv_decide* #8158 fixes the grind +splitImp and the arrow propagator. Given p : Prop, the propagator was incorrectly assuming A was always a\nproposition in an arrow A -> p. also adds a missing\nnormalization rule to grind.* #8159 adds support for the following import variants to the\nexperimental module system:* private import: Makes the imported constants available only in\nnon-exported contexts such as proofs. In particular, the import will not\nbe loaded, or required to exist at all, when the current module is\nimported into other modules.* import all: Makes non-exported information such as proofs of the\nimported module available in non-exported contexts in the current\nmodule. Main purpose is to allow for reasoning about imported\ndefinitions when they would otherwise be opaque. TODO: adjust name\nresolution so that imported private decls are accessible through\nsyntax.* #8161 changes Lean.Grind.CommRing to inline the NatCast instance\n(i.e. to be provided by the user) rather than constructing one from the\nexisting data. Without this change we can't construct instances in\nMathlib that grind can use.* #8163 adds some currently failing tests for grind +ring, resulting\nin either kernel type mismatches (bugs) or a kernel deep recursion\n(perhaps just a too-large problem).* #8167 improves the heuristics used to compute the basis and simplify\npolynomials in the commutative procedure used in grind.* #8168 fixes a bug when constructing the proof term for a\nNullstellensatz certificate produced by the new commutative ring\nprocedure in grind. The kernel was rejecting the proof term.* #8170 adds the infrastructure for creating stepwise proof terms in the\ncommutative procedure used in grind.* #8189 implements stepwise proof terms in the commutative ring\nprocedure used by grind. These terms serve as an alternative\nrepresentation to the traditional Nullstellensatz certificates, aiming\nto address the exponential worst-case complexity often associated\nwith certificate construction.* #8231 changes the behaviour of apply? so that the sorry it uses to\nclose the goal is non-synthetic. (Recall that correct use of synthetic\nsorries requires that the tactic also generates an error message, which\nwe don't want to do in this situation.) Either this PR or #8230 are\nsufficient to defend against the problem reported in #8212.* #8254 fixes unintended inlining of ToJson, FromJson, and Repr\ninstances, which was causing exponential compilation times in deriving\nclauses for large structures.Library* #6081 adds an inheritEnv field to IO.Process.SpawnArgs. If\nfalse, the spawned process does not inherit its parent's environment.* #7108 proves List.head_of_mem_head? and the analogous\nList.getLast_of_mem_getLast?.* #7400 adds lemmas for the filter, map and filterMap functions of\nthe hash map.* #7659 adds SMT-LIB operators to detect overflow\nBitVec.(umul_overflow, smul_overflow), according to the definitions\nhere,\nand the theorems proving equivalence of such definitions with the\nBitVec library functions (umulOverflow_eq, smulOverflow_eq).\nSupport theorems for these proofs are BitVec.toInt_one_of_lt, BitVec.toInt_mul_toInt_lt, BitVec.le_toInt_mul_toInt, BitVec.toNat_mul_toNat_lt, BitVec.two_pow_le_toInt_mul_toInt_iff, BitVec.toInt_mul_toInt_lt_neg_two_pow_iff and Int.neg_mul_le_mul, Int.bmod_eq_self_of_le_mul_two, Int.mul_le_mul_of_natAbs_le, Int.mul_le_mul_of_le_of_le_of_nonneg_of_nonpos, Int.pow_lt_pow. The PR\nalso includes a set of tests.* #7671 contains the theorem proving that signed division x.toInt /\ny.toInt only overflows when x = intMin w and y = allOnes w (for 0 < w).\nTo show that this is the only case in which overflow happens, we refer\nto overflow for negation\n(BitVec.sdivOverflow_eq_negOverflow_of_neg_one): in fact,\nx.toInt/(allOnes w).toInt = - x.toInt, i.e., the overflow conditions\nare the same as negOverflow for x, and then reason about the signs\nof the operands with the respective theorems.\nThese BitVec theorems themselves rely on numerous Int.ediv_* theorems,\nthat carefully set the bounds of signed division for integers.* #7761 implements the core theorem for the Bitwuzla rewrites\nNORM_BV_NOT_OR_SHL\nand\nBV_ADD_SHL,\nwhich convert the mixed-boolean-arithmetic expression into a purely\narithmetic expression:theorem add_shiftLeft_eq_or_shiftLeft {x y : BitVec w} :\n    x + (y <<< x) =  x ||| (y <<< x)\n* #7770 adds a shared mutex (or read-write lock) as Std.SharedMutex.* #7774 adds Option.pfilter, a variant of Option.filter and several\nlemmas for it and other Option functions. These lemmas are split off\nfrom #7400.* #7791 adds lemmas about Nat.lcm.* #7802 adds Int.gcd and Int.lcm variants of all Nat.gcd and\nNat.lcm lemmas.* #7818 deprecates Option.merge and Option.liftOrGet in favor of\nOption.zipWith.* #7819 extends Std.Channel to provide a full sync and async API, as\nwell as unbounded, zero sized and bounded channels.* #7835 adds BitVec.[toInt_append|toFin_append].* #7847 removes @[simp] from all deprecated theorems. simp will\nstill use such lemmas, without any warning message.* #7851 partially reverts #7818, because the function called\nOption.zipWith in that PR does not actually correspond to\nList.zipWith. We choose Option.merge as the name instead.* #7855 moves ReflBEq to Init.Core and changes LawfulBEq to extend\nReflBEq.* #7856 changes definitions and theorems not to use the membership\ninstance on Option unless the theorem is specifically about the\nmembership instance.* #7869 fixes a regression introduced in #7445 where the new\nArray.emptyWithCapacity was accidentally not tagged with the correct\nfunction to actually allocate the capacity.* #7871 generalizes the typeclass assumptions on monadic Option\nfunctions.* #7879 adds Int.toNat_emod, analogous to Int.toNat_add/mul.* #7880 adds the functions UIntX.ofInt, and basic lemmas.* #7886 adds UIntX.pow and Pow UIntX Nat instances, and similarly\nfor signed fixed-width integers. These are currently only the naive\nimplementation, and will need to be subsequently replaced via\n@[extern] with fast implementations (tracked at #7887).* #7888 adds Fin.ofNat'_mul and Fin.mul_ofNat', parallel to the\nexisting lemmas about add.* #7889 adds Int.toNat_sub'' a variant of Int.toNat_sub taking\ninequality hypotheses, rather than expecting the arguments to be casts\nof natural numbers. This is parallel to the existing toNat_add and\ntoNat_mul.* #7890 adds missing lemmas about Int.bmod, parallel to lemmas about\nthe other mod variants.* #7891 adds the rfl simp lemma Int.cast x = x for x : Int.* #7893 adds BitVec.pow and Pow (BitVec w) Nat. The implementation\nis the naive one, and should later be replaced by an @[extern]. This\nis tracked at https://github.com/leanprover/lean4/issues/7887.* #7897 cleans up the Option development, upstreaming some results\nfrom mathlib in the process.* #7899 shuffles some results about integers around to make sure that\nall material that currently exists about Int.bmod is located in\nDivMod/Lemmas.lean and not downstream of that.* #7901 adds instance [Pure f] : Inhabited (OptionT f α), so that\nInhabited (OptionT Id Empty) synthesizes.* #7912 adds List.Perm.take/drop, and Array.Perm.extract,\nrestricting permutations to sublist / subarrays when they are constant\nelsewhere.* #7913 adds some missing List/Array/Vector lemmas about\nisSome_idxOf?, isSome_finIdxOf?, isSome_findFinIdx?, isSome_findIdx?and the correspondingisNone` versions.* #7933 adds lemmas about Int.bmod to achieve parity between\nInt.bmod and Int.emod/Int.fmod/Int.tmod. Furthermore, it adds\nmissing lemmas for emod/fmod/tmod and performs cleanup on names\nand statements for all four operations, also with a view towards\nincreasing consistency with the corresponding Nat.mod lemmas.* #7938 adds lemmas about List/Array/Vector.countP/count interacting\nwith replace. (Specializing to _self and _ne lemmas doesn't seem\nuseful, as there will still be an if on the RHS.)* #7939 adds Array.count_erase and specializations.* #7953 generalizes some typeclass hypotheses in the List.Perm API\n(away from DecidableEq), and reproduces List.Perm.mem_iff for\nArray, and fixes a mistake in the statement of Array.Perm.extract.* #7971 upstreams much of the material from Mathlib/Data/Nat/Init.lean\nand Mathlib/Data/Nat/Basic.lean.* #7983 upstreams many of the results from Mathlib/Data/Int/Init.lean.* #7994 reproduces the Array.Perm API for Vector. Both are still\nsignificantly less developed than the API for List.Perm.* #7999 replaces Array.Perm and Vector.Perm with one-field\nstructures. This avoids dot notation for List to work like e.g.\nh.cons 3 where h is an Array.Perm.* #8000 deprecates some Int.ofNat_* lemmas in favor of\nInt.natCast_*.* #8004 adds extensional hash maps and hash sets under the names\nStd.ExtDHashMap, Std.ExtHashMap and Std.ExtHashSet. Extensional\nhash maps work like regular hash maps, except that they have\nextensionality lemmas which make them easier to use in proofs. This\nhowever makes it also impossible to regularly iterate over its entries.* #8030 adds some missing lemmas about\nList/Array/Vector.findIdx?/findFinIdx?/findSome?/idxOf?.* #8044 introduces the modules Std.Data.DTreeMap.Raw,\nStd.Data.TreeMap.Raw and Std.Data.TreeSet.Raw and imports them into\nStd.Data. All modules related to the raw tree maps are imported into\nthese new modules so that they are now a transitive dependency of Std.* #8067 fixes the behavior of Substring.isNat to disallow empty\nstrings.* #8078 is a follow up to #8055 and implements a Selector for async\nTCP in order to allow IO multiplexing using TCP sockets.* #8080 fixes Json.parse to handle surrogate pairs correctly.* #8085 moves the coercion α → Option α to the new file\nInit.Data.Option.Coe. This file may not be imported anywhere in Init\nor Std.* #8089 adds optimized division functions for Int and Nat when the\narguments are known to be divisible (such as when normalizing\nrationals). These are backed by the gmp functions mpz_divexact and\nmpz_divexact_ui. See also leanprover-community/batteries#1202.* #8136 adds an initial set of @[grind] annotations for\nList/Array/Vector, enough to set up some regression tests using\ngrind in proofs about List. More annotations to follow.* #8139 is a follow up to #8055 and implements a Selector for async\nUDP in order to allow IO multiplexing using UDP sockets.* #8144 changes the predicate for Option.guard to be p : α → Bool\ninstead of p : α → Prop. This brings it in line with other comparable\nfunctions like Option.filter.* #8147 adds List.findRev? and List.findSomeRev?, for parity with\nthe existing Array API, and simp lemmas converting these into existing\noperations.* #8148 generalises List.eraseDups to allow for an arbitrary\ncomparison relation. Further, it proves eraseDups_append : (as ++ bs).eraseDups = as.eraseDups ++ (bs.removeAll as).eraseDups.* #8150 is a follow up to #8055 and implements a Selector for\nStd.Channel in order to allow\nmultiplexing using channels.* #8154 adds unconditional lemmas for\nHashMap.getElem?_insertMany_list, alongside the existing ones that\nhave quite strong preconditions. Also for TreeMap (and\ndependent/extensional variants).* #8175 adds simp/grind lemmas about List/Array/Vector.contains.\nIn the presence of LawfulBEq these effectively already held, via\nsimplifying contains to mem, but now these also fire without\nLawfulBEq.* #8184 adds the insertMany_append lemma for all map variants.Compiler* #6063 updates the version of LLVM and clang used by and shipped with\nLean to 19.1.2* #7824 fixes an issue where uses of 'noncomputable' definitions can get\nincorrectly compiled, while also removing the use of 'noncomputable'\ndefinitions altogether. Some uses of 'noncomputable' definitions (e.g.\nClassical.propDecidable) do not get compiled correctly by type erasure.\nRunning the optimizer on the result can lead to them being optimized\naway, eluding the later IR-level check for uses of noncomputable\ndefinitions.* #7838 adds support for mpz objects (i.e., big nums) to the\nshareCommon functions.* #7854 introduces fundamental API to distribute module data across\nmultiple files in preparation for the module system.* #7945 fixes a potential race between IO.getTaskState and the task in\nquestion finishing, resulting in undefined behavior.* #7958 ensures that after main is finished we still wait on dedicated\ntasks instead of exiting forcefully. If users wish to violently kill\ntheir dedicated tasks at the end of main instead they can run\nIO.Process.exit at the end of main instead.* #7990 adopts lcAny in more cases of type erasure in the new code\ngenerator.* #7996 disables CSE of local function declarations in the base phase of\nthe new compiler. This was introducing sharing between lambdas to bind\ncalls w/ do notation, which caused them to later no longer be inlined.* #8006 changes the inlining heuristics of the new code generator to\nmatch the old one, which ensures that monadic folds get sufficiently\ninlined for their tail recursion to be exposed to the code generator.* #8007 changes eager lambda lifting heuristics in the new compiler to\nmatch the old compiler, which ensures that inlining/specializing monadic\ncode does not accidentally create mutual tail recursion that the code\ngenerator can't handle.* #8008 changes specialization in the new code generator to consider\ncallee params to be ground variables, which improves the specialization\nof polymorphic functions.* #8009 restricts lifting outside of cases expressions on values of a\nDecidable type, since we can't correctly represent the dependency on the\nerased proposition in the later stages of the compiler.* #8010 fixes caseOn expressions with an implemented_by to work\ncorrectly with hash consing, even when the elaborator produces terms\nthat reconstruct the discriminant rather than just reusing a variable.* #8015 fixes the IR elim_dead_branches pass to correctly handle join\npoints with no params, which currently get considered unreachable. I was\nnot able to find an easy repro of this with the old compiler, but it\noccurs when bootstrapping Lean with the new compiler.* #8017 makes the IR elim_dead_branches pass correctly handle extern\nfunctions by considering them as having a top return value. This fix is\nrequired to bootstrap the Init/ directory with the new compiler.* #8023 fixes the IR expand_reset_reuse pass to correctly handle\nduplicate projections from the same base/index. This does not occur (at\nleast easily) with the old compiler, but it occurs when bootstrapping\nLean with the new compiler.* #8124 correctly handles escaping functions in the LCNF\nelimDeadBranches pass, by setting all params to top instead of\npotentially leaving them at their default bottom value.* #8125 adds support for the init attribute to the new compiler.* #8127 adds support for borrowed params in the new compiler, which\nrequires adding support for .mdata expressions to LCNF type handling.* #8132 adds support for lowering casesOn for builtin types in the new\ncompiler.* #8156 fixes a bug where the old compiler's lcnf conversion expr cache\nwas not including all of the relevant information in the key, leading to\nterms inadvertently being erased. The root variable is used to\ndetermine whether lambda arguments to applications should get let\nbindings or not, which in turn affects later decisions about type\nerasure (erase_irrelevant assumes that any non-atomic argument is\nirrelevant).* #8236 fixes an issue where the combination of extern_lib and\nprecompileModules would lead to \"symbol not found\" errors.Pretty Printing* #7805 modifies the pretty printing of raw natural number literals; now\nboth pp.explicit and pp.natLit enable the nat_lit prefix. An\neffect of this is that the hover on such a literal in the Infoview has\nthe nat_lit prefix.* #7812 modifies the pretty printing of pi types. Now ∀ will be\npreferred over → for propositions if the domain is not a proposition.\nFor example, ∀ (n : Nat), True pretty prints as ∀ (n : Nat), True\nrather than as Nat → True. There is also now an option pp.foralls\n(default true) that when false disables using ∀ at all, for\npedagogical purposes. also adjusts instance implicit binder\npretty printing — nondependent pi types won't show the instance binder\nname. Closes #1834.* #7813 fixes an issue where let n : Nat := sorry in the Infoview\npretty prints as n : ℕ := sorry `«Foo:17:17». This was caused by\ntop-level expressions being pretty printed with the same rules as\nInfoview hovers. Closes #6715. Refactors Lean.Widget.ppExprTagged; now\nit takes a delaborator, and downstream users should configure their own\npretty printer option overrides if necessary if they used the explicit\nargument (see Lean.Widget.makePopup.ppExprForPopup for an example).\nBreaking change: ppExprTagged does not set pp.proofs on the root\nexpression.* #7840 causes structure instance notation to be tagged with the\nconstructor when pp.tagAppFns is true. This will make docgen will have\n{ and } be links to the structure constructor.* #8022 fixes a bug where pretty printing is done in a context with\ncleared local instances. These were cleared since the local context is\nupdated during a name sanitization step, but preserving local instances\nis valid since the modification to the local context only affects user\nnames.Documentation* #7947 adds some docstrings to clarify the functions of\nLean.mkFreshId, Lean.Core.mkFreshUserName,\nLean.Elab.Term.mkFreshBinderName, and\nLean.Meta.mkFreshBinderNameForTactic.* #8018 adjusts the RArray docstring to the new reality from #8014.Server* #7610 adjusts the TryThis widget to also work in widget messages\nrather than only as a panel widget. It also adds additional\ndocumentation explaining why this change was needed.* #7873 fixes a number of bugs related to the handling of the source\nsearch path in the language server, where deleting files could cause\nseveral features to stop functioning and both untitled files and files\nthat don't exist on disc could have conflicting module names.* #7882 fixes a regression where elaboration of a previous document\nversion is not cancelled on changes to the document.* #8242 fixes the 'goals accomplished' diagnostics. They were\naccidentally broken in #7902.Lake* #7796 moves Lean's shared library path before the workspace's in\nLake's augmented environment (e.g., lake env).* #7809 fixes the order of libraries when loading them via\n--load-dynlib or --plugin in lean and when linking them into a\nshared library or executable. A Dynlib now tracks its dependencies and\nthey are topologically sorted before being passed to either linking or\nloading.* #7822 changes Lake to use normalized absolute paths for its various\nfiles and directories.* #7860 restores the use of builtins (e.g., initializer, elaborators,\nand macros) for DSL features and the use of the Lake plugin in the\nserver.* #7906 changes Lake build traces to track their mixed inputs. The\ntracked inputs are saved as part of the .trace file, which can\nsignificantly assist in debugging trace issues. In addition, this PR\ntweaks some existing Lake traces. Most significant, module olean traces\nno longer incorporate their module's source trace.* #7909 adds Lake support for building modules given their source file\npath. This is made use of in both the CLI and the sever.* #7963 adds helper functions to convert between Lake.EStateT and\nEStateM.* #7967 adds a bootstrap option to Lake which is used to identify the\ncore Lean package. This enables Lake to use the current stage's include\ndirectory rather than the Lean toolchains when compiling Lean with Lean\nin core.* #7987 fixes a bug in #7967 that broke external library linking.* #8026 fixes bugs in #7809 and #7909 that were not caught partially\nbecause the badImport test had been disabled.* #8048 moves the Lake DSL syntax into a dedicated module with minimal\nimports.* #8152 fixes a regression where non-precompiled module builds would\n--load-dynlib package extern_lib targets.* #8183 makes Lake tests much more verbose in output. It also fixes some\nbugs that had been missed due to disabled tests. Most significantly, the\ntarget specifier @pkg (e.g., in lake build) is now always\ninterpreted as a package. It was previously ambiguously interpreted due\nto changes in #7909.* #8190 adds documentation for native library options (e.g., dynlibs,\nplugins, moreLinkObjs, moreLinkLibs) and needs to the Lake\nREADME. It is also includes information about specifying targets on the\nLake CLI and in Lean and TOML configuration files.Other* #7785 adds further automation to the release process, taking care of\ntagging, and creating new bump/v4.X.0 branches automatically, and\nfixing some bugs.* #7789 fixes lean potentially changing or interpreting arguments\nafter --run.* #8060 fixes a bug in the Lean kernel. During reduction of Nat.pow,\nthe kernel did not validate that the WHNF of the first argument is a\nNat literal before interpreting it as an mpz number. adds\nthe missing check.\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.20.0 (2025-06-02)","id":"/releases/v4.20.0/#release-v4___20___0"}});