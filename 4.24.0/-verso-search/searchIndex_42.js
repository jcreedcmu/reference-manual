window.docContents[42].resolve({"/Basic-Types/Bitvectors/#The-Lean-Language-Reference--Basic-Types--Bitvectors--API-Reference--Arithmetic--Signed-Operations":{"contents":"Returns the absolute value of a signed bitvector.\n\nNegation of bitvectors. This can be interpreted as either signed or unsigned negation modulo 2^n.\nUsually accessed via the - prefix operator.SMT-LIB name: bvneg.\n\nSigned T-division (using the truncating rounding convention) for bitvectors. This function obeys the\nLean convention that division by zero returns zero.Examples:* (7#4).sdiv 2 = 3#4* (-9#4).sdiv 2 = -4#4* (5#4).sdiv -2 = -2#4* (-7#4).sdiv (-2) = 3#4\n\nSigned division for bitvectors using the SMT-LIB using the\nSMT-LIB convention,\nwhere division by zero returns BitVector.allOnes n.Specifically, x.smtSDiv 0 = if x >= 0 then -1 else 1SMT-LIB name: bvsdiv.\n\nRemainder for signed division rounded to negative infinity.SMT-LIB name: bvsmod.\n\nRemainder for signed division rounding to zero.SMT-LIB name: bvsrem.\n\nChecks whether addition of x and y results in signed overflow, treating x and y as 2's\ncomplement signed bitvectors.SMT-LIB name: bvsaddo.\n\nChecks whether the subtraction of x and y results in signed overflow, treating x and y as\n2's complement signed bitvectors.SMT-Lib name: bvssubo.\n\n","context":"Lean Reference\u0009Basic Types\u0009Bitvectors\u0009API Reference\u0009Arithmetic","header":"19.5.5.8.2. Signed Operations","id":"/Basic-Types/Bitvectors/#The-Lean-Language-Reference--Basic-Types--Bitvectors--API-Reference--Arithmetic--Signed-Operations"},"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Configuration-File-Format--Lean-Format--Utilities":{"contents":"The Current DirectoryA macro that expands to the path of package's directory\nduring the Lakefile's elaboration.\n\nConfiguration OptionsA macro that expands to the specified configuration option (or none,\nif the option has not been set) during the Lakefile's elaboration.Configuration arguments are set either via the Lake CLI (by the -K option)\nor via the with clause in a require statement.\n\nCompile-Time ConditionalsThe meta if command has two forms:meta if <c:term> then <a:command>\nmeta if <c:term> then <a:command> else <b:command>\nIt expands to the command a if the term c evaluates to true\n(at elaboration time). Otherwise, it expands to command b (if an else\nclause is provided).One can use this command to specify, for example, external library targets\nonly available on specific platforms:meta if System.Platform.isWindows then\nextern_lib winOnlyLib := ...\nelse meta if System.Platform.isOSX then\nextern_lib macOnlyLib := ...\nelse\nextern_lib linuxOnlyLib := ...\n\n\nCommand SequencesThe do command syntax groups multiple similarly indented commands together.\nThe group can then be passed to another command that usually only accepts a\nsingle command (e.g., meta if).\n\nCompile-Time Side EffectsExecutes a term of type IO α at elaboration-time\nand produces an expression corresponding to the result via ToExpr α.\n\n","context":"Lean Reference\u0009Build Tools\u0009Lake\u0009Configuration File Format\u0009Lean Format","header":"22.1.3.2.7. Utilities","id":"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Configuration-File-Format--Lean-Format--Utilities"},"/Error-Explanations/lean___invalidDottedIdent/#The-Lean-Language-Reference--Error-Explanations--lean___invalidDottedIdent--Examples":{"contents":"Insufficient type informationdef reverseDuplicate (xs : List α) :=\n  .reverse (xs ++ xs)\nInvalid dotted identifier notation: The expected type of `.reverse` could not be determined\ndef reverseDuplicate (xs : List α) : List α :=\n  .reverse (xs ++ xs)\nBecause the return type of reverseDuplicate is not specified, the expected type of .reverse\ncannot be determined. Lean will not use the type of the argument xs ++ xs to infer the omitted\nnamespace. Adding the return type List α allows Lean to infer the type of .reverse and thus the\nappropriate namespace (List) in which to resolve this identifier.Note that this means that changing the return type of reverseDuplicate changes how .reverse\nresolves: if the return type is  T, then Lean will (attempt to) resolve .reverse to a function\nT.reverse whose return type is T—even if T.reverse does not take an argument of type\nList α.\n\nDotted identifier where type universe expectedexample (n : Nat) :=\n  match n > 42 with\n  | .true  => n - 1\n  | .false => n + 1\nInvalid dotted identifier notation: Not supported on type universe\n  Prop\nexample (n : Nat) :=\n  match decide (n > 42) with\n  | .true  => n - 1\n  | .false => n + 1\nThe proposition n > 42 has type Prop, which, being a type universe, does not support\ndotted-identifier notation. As this example demonstrates, attempting to use this notation in such a\ncontext is almost always an error. The intent in this example was for .true and .false to be\nBooleans, not propositions; however, match expressions do not automatically perform this coercion\nfor decidable propositions. Explicitly adding decide makes the discriminant a Bool and allows\nthe dotted-identifier resolution to succeed.\n\n","context":"Lean Reference\u0009Error Explanations\u0009lean.invalidDottedIdent","header":"Examples","id":"/Error-Explanations/lean___invalidDottedIdent/#The-Lean-Language-Reference--Error-Explanations--lean___invalidDottedIdent--Examples"},"/IO/Files___-File-Handles___-and-Streams/#The-Lean-Language-Reference--IO--Files___-File-Handles___-and-Streams--Files-and-Directories":{"contents":"Returns the current working directory of the executing process.\n\nReturns the file name of the currently-running executable.\n\nReturns the directory that the current executable is located in.\n\n","context":"Lean Reference\u0009IO\u0009Files, File Handles, and Streams","header":"15.5.6. Files and Directories","id":"/IO/Files___-File-Handles___-and-Streams/#The-Lean-Language-Reference--IO--Files___-File-Handles___-and-Streams--Files-and-Directories"},"/Notations-and-Macros/Macros/#macro-monad-hygiene":{"contents":"Hygiene is implemented by adding macro scopes to the identifiers that occur in syntax.\nOrdinarily, the process of quotation adds all necessary scopes, but macros that construct syntax directly must add macro scopes to the identifiers that they introduce.\n\nIncrements the macro scope counter so that inside the body of x the macro\nscope is fresh.\n\nAdd a new macro scope to the name n.\n\n","context":"Lean Reference\u0009Notations and Macros\u0009Macros\u0009The Macro Monad","header":"20.5.2.2. Hygiene-Related Operations","id":"/Notations-and-Macros/Macros/#macro-monad-hygiene"},"/releases/v4.16.0/#release-v4___16___0":{"contents":"HighlightsUnique sorrys#5757 makes it harder to create \"fake\" theorems about definitions that\nare stubbed-out with sorry by ensuring that each sorry is not\ndefinitionally equal to any other. For example, this now fails:example : (sorry : Nat) = sorry := rfl -- fails\nHowever, this still succeeds, since the sorry is a single\nindeterminate Nat:def f (n : Nat) : Nat := sorry\nexample : f 0 = f 1 := rfl -- succeeds\nOne can be more careful by putting parameters to the right of the colon:def f : (n : Nat) → Nat := sorry\nexample : f 0 = f 1 := rfl -- fails\nMost sources of synthetic sorries (recall: a sorry that originates from\nthe elaborator) are now unique, except for elaboration errors, since\nmaking these unique tends to cause a confusing cascade of errors. In\ngeneral, however, such sorries are labeled. This enables \"go to\ndefinition\" on sorry in the Infoview, which brings you to its origin.\nThe option set_option pp.sorrySource true causes the pretty printer to\nshow source position information on sorries.Separators in numeric literals#6204 lets _ be used in numeric literals as a separator. For\nexample, 1_000_000, 0xff_ff or 0b_10_11_01_00. New lexical syntax:numeral10 : [0-9]+ (\"_\"+ [0-9]+)*\nnumeral2  : \"0\" [bB] (\"_\"* [0-1]+)+\nnumeral8  : \"0\" [oO] (\"_\"* [0-7]+)+\nnumeral16 : \"0\" [xX] (\"_\"* hex_char+)+\nfloat     : numeral10 \".\" numeral10? [eE[+-]numeral10]\nAdditional new featues* #6300 adds the debug.proofAsSorry option. When enabled, the proofs\nof theorems are ignored and replaced with sorry.* #6362 adds the --error=kind option (shorthand: -Ekind) to the\nlean CLI. When set, messages of kind (e.g.,\nlinter.unusedVariables) will be reported as errors. This setting does\nnothing in interactive contexts (e.g., the server).* #6366 adds support for Float32 and fixes a bug in the runtime.Library updatesThe Lean 4 library saw many changes that improve arithmetic reasoning, enhance data structure APIs,\nand refine library organization. Key changes include better support for bitwise operations, shifts,\nand conversions, expanded lemmas for Array, Vector, and List, and improved ordering definitions.\nSome modules have been reorganized for clarity, and internal refinements ensure greater consistency and correctness.Breaking changes#6330 removes unnecessary parameters from the functional induction\nprinciples. This is a breaking change; broken code can typically be adjusted\nsimply by passing fewer parameters.This highlights section was contributed by Violetta Sim.For this release, 201 changes landed. In addition to the 74 feature additions and 44 fixes listed below there were 7 refactoring changes, 5 documentation improvements and 62 chores.Language* #3696 makes all message constructors handle pretty printer errors.* #4460 runs all linters for a single command (together) on a separate\nthread from further elaboration, making a first step towards\nparallelizing the elaborator.* #5757, see the highlights section above for details.* #6123 ensures that the configuration in Simp.Config is used when\nreducing terms and checking definitional equality in simp.* #6204, see the highlights section above for details.* #6270 fixes a bug that could cause the injectivity tactic to fail in\nreducible mode, which could cause unfolding lemma generation to fail\n(used by tactics such as unfold). In particular,\nLean.Meta.isConstructorApp'? was not aware that n + 1 is equivalent\nto Nat.succ n.* #6273 modifies the \"foo has been deprecated: use betterFoo instead\"\nwarning so that foo and betterFoo are hoverable.* #6278 enables simp configuration options to be passed to norm_cast.* #6286 ensure bv_decide uses definitional equality in its reflection\nprocedure as much as possible. Previously it would build up explicit\ncongruence proofs for the kernel to check. This reduces the size of\nproof terms passed to kernel speeds up checking of large reflection\nproofs.* #6288 uses Lean.RArray in bv_decide's reflection proofs. Giving\nspeedups on problems with lots of variables.* #6295 sets up simprocs for all the remaining operations defined in\nInit.Data.Fin.Basic* #6300, see the highlights section above for details.* #6330, see the highlights section above for details.* #6362, see the highlights section above for details.* #6366, see the highlights section above for details.* #6375 fixes a bug in the simplifier. It was producing terms with loose\nbound variables when eliminating unused let_fun expressions.* #6378 adds an explanation to the error message when cases and\ninduction are applied to a term whose type is not an inductive type.\nFor Prop, these tactics now suggest the by_cases tactic. Example:tactic 'cases' failed, major premise type is not an inductive type\n  Prop\n* #6381 fixes a bug in withTrackingZetaDelta and\nwithTrackingZetaDeltaSet. The MetaM caches need to be reset. See new\ntest.* #6385 fixes a bug in simp_all? that caused some local declarations\nto be omitted from the Try this: suggestions.* #6386 ensures that revertAll clears auxiliary declarations when\ninvoked directly by users.* #6387 fixes a type error in the proof generated by the contradiction\ntactic.* #6397 ensures that simp and dsimp do not unfold definitions that\nare not intended to be unfolded by the user. See issue #5755 for an\nexample affected by this issue.* #6398 ensures Meta.check check projections.* #6412 adds reserved names for congruence theorems used in the\nsimplifier and grind tactics. The idea is prevent the same congruence\ntheorems to be generated over and over again.* #6413 introduces the following features to the WIP grind tactic:* Expr internalization.* Congruence theorem cache.* Procedure for adding new facts* New tracing options* New preprocessing steps: fold projections and eliminate dangling\nExpr.mdata* #6414 fixes a bug in Lean.Meta.Closure that would introduce\nunder-applied delayed assignment metavariables, which would keep them\nfrom ever getting instantiated. This bug affected match elaboration\nwhen the expected type contained postponed elaboration problems, for\nexample tactic blocks.* #6419 fixes multiple bugs in the WIP grind tactic. It also adds\nsupport for printing the grind internal state.* #6428 adds a new preprocessing step to the grind tactic:\nuniverse-level normalization. The goal is to avoid missing equalities in\nthe congruence closure module.* #6430 adds the predicate Expr.fvarsSet a b, which returns true if\nand only if the free variables in a are a subset of the free variables\nin b.* #6433 adds a custom type and instance canonicalizer for the (WIP)\ngrind tactic. The grind tactic uses congruence closure but\ndisregards types, type formers, instances, and proofs. Proofs are\nignored due to proof irrelevance. Types, type formers, and instances are\nconsidered supporting elements and are not factored into congruence\ndetection. Instead, grind only checks whether elements are\nstructurally equal, which, in the context of the grind tactic, is\nequivalent to pointer equality. See new tests for examples where the\ncanonicalizer is important.* #6435 implements the congruence table for the (WIP) grind tactic. It\nalso fixes several bugs, and adds a new preprocessing step.* #6437 adds support for detecting congruent terms in the (WIP) grind\ntactic. It also introduces the grind.debug option, which, when set to\ntrue, checks many invariants after each equivalence class is merged.\nThis option is intended solely for debugging purposes.* #6438 ensures norm_cast doesn't fail to act in the presence of\nno_index annotations* #6441 adds basic truth value propagation rules to the (WIP) grind\ntactic.* #6442 fixes the checkParents sanity check in grind.* #6443 adds support for propagating the truth value of equalities in\nthe (WIP) grind tactic.* #6447 refactors grind and adds support for invoking the simplifier\nusing the GrindM monad.* #6448 declares the command builtin_grind_propagator for registering\nequation propagator for grind. It also declares the auxiliary the\nattribute.* #6449 completes the implementation of the command\nbuiltin_grind_propagator.* #6452 adds support for generating (small) proofs for any two\nexpressions that belong to the same equivalence class in the grind\ntactic state.* #6453 improves bv_decide's performance in the presence of large\nliterals.* #6455 fixes a bug in the equality proof generator in the (WIP) grind\ntactic.* #6456 fixes another bug in the equality proof generator in the (WIP)\ngrind tactic.* #6457 adds support for generating congruence proofs for congruences\ndetected by the grind tactic.* #6458 adds support for compact congruence proofs in the (WIP) grind\ntactic. The mkCongrProof function now verifies whether the congruence\nproof can be constructed using only congr, congrFun, and congrArg,\navoiding the need to generate the more complex hcongr auxiliary\ntheorems.* #6459 adds the (WIP) grind tactic. It currently generates a warning\nmessage to make it clear that the tactic is not ready for production.* #6461 adds a new propagation rule for negation to the (WIP) grind\ntactic.* #6463 adds support for constructors to the (WIP) grind tactic. When\nmerging equivalence classes, grind checks for equalities between\nconstructors. If they are distinct, it closes the goal; if they are the\nsame, it applies injectivity.* #6464 completes support for literal values in the (WIP) grind\ntactic. grind now closes the goal whenever it merges two equivalence\nclasses with distinct literal values.* #6465 adds support for projection functions to the (WIP) grind\ntactic.* #6466 completes the implementation of addCongrTable in the (WIP)\ngrind tactic. It also adds a new test to demonstrate why the extra\ncheck is needed. It also updates the field cgRoot (congruence root).* #6468 fixes issue #6467* #6469 adds support code for implementing e-match in the (WIP) grind\ntactic.* #6470 introduces a command for specifying patterns used in the\nheuristic instantiation of global theorems in the grind tactic. Note\nthat this PR only adds the parser.* #6472 implements the command grind_pattern. The new command allows\nusers to associate patterns with theorems. These patterns are used for\nperforming heuristic instantiation with e-matching. In the future, we\nwill add the attributes @[grind_eq], @[grind_fwd], and\n@[grind_bwd] to compute the patterns automatically for theorems.* #6473 adds a deriving handler for the ToExpr class. It can handle\nmutual and nested inductive types, however it falls back to creating\npartial instances in such cases. This is upstreamed from the Mathlib\nderiving handler written by @kmill, but has fixes to handle autoimplicit\nuniverse level variables.* #6474 adds pattern validation to the grind_pattern command. The new\ncheckCoverage function will also be used to implement the attributes\n@[grind_eq], @[grind_fwd], and @[grind_bwd].* #6475 adds support for activating relevant theorems for the (WIP)\ngrind tactic. We say a theorem is relevant to a grind goal if the\nsymbols occurring in its patterns also occur in the goal.* #6478 internalize nested ground patterns when activating ematch\ntheorems in the (WIP) grind tactic.* #6481 implements E-matching for the (WIP) grind tactic. We still\nneed to finalize and internalize the new instances.* #6484 addresses a few error messages where diffs weren't being\nexposed.* #6485 implements Grind.EMatch.instantiateTheorem in the (WIP)\ngrind tactic.* #6487 adds source position information for structure parent\nprojections, supporting \"go to definition\". Closes #3063.* #6488 fixes and refactors the E-matching module for the (WIP) grind\ntactic.* #6490 adds basic configuration options for the grind tactic.* #6492 fixes a bug in the theorem instantiation procedure in the (WIP)\ngrind tactic.* #6497 fixes another theorem instantiation bug in the grind tactic.\nIt also moves new instances to be processed to Goal.* #6498 adds support in the grind tactic for propagating dependent\nforall terms forall (h : p), q[h] where p is a proposition.* #6499 fixes the proof canonicalizer for grind.* #6500 fixes a bug in the markNestedProofs used in grind. See new\ntest.* #6502 fixes a bug in the proof assembly procedure utilized by the\ngrind tactic.* #6503 adds a simple strategy to the (WIP) grind tactic. It just\nkeeps internalizing new theorem instances found by E-matching.* #6506 adds the monotonicity tactic, intended to be used inside the\npartial_fixpoint feature.* #6508 fixes a bug in the sanity checkers for the grind tactic. See\nthe new test for an example of a case where it was panicking.* #6509 fixes a bug in the congruence closure data structure used in the\ngrind tactic. The new test includes an example that previously caused\na panic. A similar panic was also occurring in the test\ngrind_nested_proofs.lean.* #6510 adds a custom congruence rule for equality in grind. The new\nrule takes into account that Eq is a symmetric relation. In the\nfuture, we will add support for arbitrary symmetric relations. The\ncurrent rule is important for propagating disequalities effectively in\ngrind.* #6512 introduces support for user-defined fallback code in the grind\ntactic. The fallback code can be utilized to inspect the state of\nfailing grind subgoals and/or invoke user-defined automation. Users\ncan now write grind on_failure <code>, where <code> should have the\ntype GoalM Unit. See the modified tests in this PR for examples.* #6513 adds support for (dependent) if-then-else terms (i.e., ite and\ndite applications) in the grind tactic.* #6514 enhances the assertion of new facts in grind by avoiding the\ncreation of unnecessary metavariables.Library* #6182 adds BitVec.[toInt|toFin]_concat and moves a couple of\ntheorems into the concat section, as BitVec.msb_concat is needed for\nthe toInt_concat proof.* #6188 completes the toNat theorems for the bitwise operations\n(and, or, xor, shiftLeft, shiftRight) of the UInt types and\nadds toBitVec theorems as well. It also renames and_toNat to\ntoNat_and to fit with the current naming convention.* #6238 adds theorems characterizing the value of the unsigned shift\nright of a bitvector in terms of its 2s complement interpretation as an\ninteger.\nUnsigned shift right by at least one bit makes the value of the\nbitvector less than or equal to 2^(w-1),\nmakes the interpretation of the bitvector Int and Nat agree.\nIn the case when n = 0, then the shift right value equals the integer\ninterpretation.* #6244 changes the implementation of HashMap.toList, so the ordering\nagrees with HashMap.toArray.* #6272 introduces the basic theory of permutations of Arrays and\nproves Array.swap_perm.* #6282 moves IO.Channel and IO.Mutex from Init to Std.Sync and\nrenames them to Std.Channel and Std.Mutex.* #6294 upstreams List.length_flatMap, countP_flatMap and\ncount_flatMap from Mathlib. These were not possible to state before we\nupstreamed List.sum.* #6315 adds protected to Fin.cast and BitVec.cast, to avoid\nconfusion with _root_.cast. These should mostly be used via\ndot-notation in any case.* #6316 adds lemmas simplifying for loops over Option into\nOption.pelim, giving parity with lemmas simplifying for loops of\nList into List.fold.* #6317 completes the basic API for BitVec.ofBool.* #6318 generalizes the universe level for Array.find?, by giving it a\nseparate implementation from Array.findM?.* #6324 adds GetElem lemmas for the basic Vector operations.* #6333 generalizes the panic functions to a type of Sort u rather\nthan Type u. This better supports universe polymorphic types and\navoids confusing errors.* #6334 adds Nat theorems for distributing >>> over bitwise\noperations, paralleling those of BitVec.* #6338 adds BitVec.[toFin|getMsbD]_setWidth and\n[getMsb|msb]_signExtend as well as ofInt_toInt.* #6341 generalizes DecidableRel to allow a heterogeneous relation.* #6353 reproduces the API around List.any/all for Array.any/all.* #6364 makes fixes suggested by the Batteries environment linters,\nparticularly simpNF, and unusedHavesSuffices.* #6365 expands the Array.set and Array.setIfInBounds lemmas to\nmatch existing lemmas for List.set.* #6367 brings Vector lemmas about membership and indexing to parity\nwith List and Array.* #6369 adds lemmas about Vector.set, anyM, any, allM, and\nall.* #6376 adds theorems about == on Vector, reproducing those already\non List and Array.* #6379 replaces the inductive predicate List.lt with an upstreamed version of List.Lex from Mathlib.\n(Previously Lex.lt was defined in terms of <; now it is generalized to take an arbitrary relation.)\nThis subtly changes the notion of ordering on List α.List.lt was a weaker relation: in particular if l₁ < l₂, then a :: l₁ < b :: l₂ may hold according to List.lt even if a and b are merely incomparable (either neither a < b nor b < a), whereas according to List.Lex this would require a = b.When < is total, in the sense that ¬ · < · is antisymmetric, then the two relations coincide.Mathlib was already overriding the order instances for List α, so this change should not be noticed by anyone already using Mathlib.We simultaneously add the boolean valued List.lex function, parameterised by a BEq typeclass and an arbitrary lt function. This will support the flexibility previously provided for List.lt, via a == function which is weaker than strict equality.* #6390 redefines Range.forIn' and Range.forM, in preparation for\nwriting lemmas about them.* #6391 requires that the step size in Std.Range is positive, to avoid\nill-specified behaviour.* #6396 adds lemmas reducing for loops over Std.Range to for loops\nover List.range'.* #6399 adds basic lemmas about lexicographic order on Array and Vector,\nachieving parity with List.* #6423 adds missing lemmas about lexicographic order on\nList/Array/Vector.* #6477 adds the necessary domain theory that backs the\npartial_fixpoint feature.Compiler* #6311 adds support for HEq to the new code generator.* #6348 adds support for Float32 to the Lean runtime.* #6350 adds missing features and fixes bugs in the Float32 support* #6383 ensures the new code generator produces code for opaque\ndefinitions that are not tagged as @[extern].\nRemark: This is the behavior of the old code generator.* #6405 adds support for erasure of Decidable.decide to the new code\ngenerator. It also adds a new Probe.runOnDeclsNamed function, which is\nhelpful for writing targeted single-file tests of compiler internals.* #6415 fixes a bug in the sharecommon module, which was returning\nincorrect results for objects that had already been processed by\nsharecommon. See the new test for an example that triggered the bug.* #6429 adds support for extern LCNF decls, which is required for parity\nwith the existing code generator.* #6535 avoids a linker warning on Windows.* #6547 should prevent Lake from accidentally picking up other linkers\ninstalled on the machine.* #6574 actually prevents Lake from accidentally picking up other\ntoolchains installed on the machine.Pretty Printing* #5689 adjusts the way the pretty printer unresolves names. It used to\nmake use of all exports when pretty printing, but now it only uses\nexports that put names into parent namespaces (heuristic: these are\n\"API exports\" that are intended by the library author), rather than\n\"horizontal exports\" that put the names into an unrelated namespace,\nwhich the dot notation feature in #6189 now incentivizes.* #5757, aside from introducing labeled sorries, fixes the bug that the metadata attached to the pretty-printed representation of arguments with a borrow annotation (for example, the second argument of String.append), is inconsistent with the metadata attached to the regular arguments.Documentation* #6450 adds a docstring to the @[app_delab] attribute.Server* #6279 fixes a bug in structure instance field completion that caused\nit to not function correctly for bracketed structure instances written\nin Mathlib style.* #6408 fixes a regression where goals that don't exist were being\ndisplayed. The regression was triggered by #5835 and originally caused\nby #4926.Lake* #6176 changes Lake's build process to no longer use leanc for\ncompiling C files or linking shared libraries and executables. Instead,\nit directly invokes the bundled compiler (or the native compiler if\nnone) using the necessary flags.* #6289 adapts Lake modules to use prelude and includes them in the\ncheck-prelude CI.* #6291 ensures the the log error position is properly preserved when\nprepending stray log entries to the job log. It also adds comparison\nsupport for Log.Pos.* #6388 merges BuildJob and Job, deprecating the former. Job now\ncontains a trace as part of its state which can be interacted with\nmonadically. also simplifies the implementation of OpaqueJob.* #6411 adds the ability to override package entries in a Lake manifest\nvia a separate JSON file. This file can be specified on the command line\nwith --packages or applied persistently by placing it at\n.lake/package-overrides.json.* #6422 fixes a bug in #6388 where the Package.afterBuildCahe*\nfunctions would produce different traces depending on whether the cache\nwas fetched.* #6627 aims to fix the trace issues reported by Mathlib that are\nbreaking lake exe cache in downstream projects.* #6631 sets MACOSX_DEPLOYMENT_TARGET for shared libraries (it was\npreviously only set for executables).Other* #6285 upstreams the ToLevel typeclass from mathlib and uses it to\nfix the existing ToExpr instances so that they are truly universe\npolymorphic (previously it generated malformed expressions when the\nuniverse level was nonzero). We improve on the mathlib definition of\nToLevel to ensure the class always lives in Type, irrespective of\nthe universe parameter.* #6363 fixes errors at load time in the comparison mode of the Firefox\nprofiler.\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.16.0 (2025-02-03)","id":"/releases/v4.16.0/#release-v4___16___0"}});